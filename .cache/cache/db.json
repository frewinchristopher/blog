{"keys":[{"id":"transformer-remark-markdown-ast-73a2717d0752ed60c603c318fc0521b0-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: A Toast to Full Stack Developers\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":66},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Warning everyone - this is a bit of rant post - but I hope some of you will agree and we can turn the tables of a stubborn community a bit.","position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":140,"offset":207},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":140,"offset":207},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Full Stack Myth?","position":{"start":{"line":8,"column":3,"offset":211},"end":{"line":8,"column":23,"offset":231},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":209},"end":{"line":8,"column":23,"offset":231},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Much to my suprise, thoughout my various software engineering media consumption adventures - I’ve discovered there is a general consensus that the idea of ‘full stack’ is FAKE NEWS. Lots of people on podcasts say it I say screw that. That is a lot like saying, “oh hey, did you know it’s impossible to write great apps or games if you’re a solo developer?” or, “What?!?! A nice dynamic UI, ","position":{"start":{"line":10,"column":1,"offset":233},"end":{"line":10,"column":391,"offset":623},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"with","position":{"start":{"line":10,"column":392,"offset":624},"end":{"line":10,"column":396,"offset":628},"indent":[]}}],"position":{"start":{"line":10,"column":391,"offset":623},"end":{"line":10,"column":397,"offset":629},"indent":[]}},{"type":"text","value":" a relational database backend ","position":{"start":{"line":10,"column":397,"offset":629},"end":{"line":10,"column":428,"offset":660},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"and","position":{"start":{"line":10,"column":429,"offset":661},"end":{"line":10,"column":432,"offset":664},"indent":[]}}],"position":{"start":{"line":10,"column":428,"offset":660},"end":{"line":10,"column":433,"offset":665},"indent":[]}},{"type":"text","value":" a websocket to send messages between the two!?!? You’re a madman!!!“.","position":{"start":{"line":10,"column":433,"offset":665},"end":{"line":10,"column":503,"offset":735},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":233},"end":{"line":10,"column":503,"offset":735},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Wait a second - isn’t that what this whole Web 3.0 stuff is supposed to do? Empower developers to make great apps all by themselves? I mean jeez, I know us, we’ve spent hours on hours learning python, backend databases, container deploys, dabbled in numerous backend frameworks, not even getting started with your favorite modern front end framework of choice (yeah, there’s a lot of those too!) like Vue, React, Ember or more.","position":{"start":{"line":12,"column":1,"offset":737},"end":{"line":12,"column":428,"offset":1164},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":737},"end":{"line":12,"column":428,"offset":1164},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Of course full stack developers know they are more a less a jack of all trades, master of none. I know there are people who could kick my ass at both Postgresql database maintenence, and there are just as many frontend people who could totally kick my ass with a badass UI in React.","position":{"start":{"line":14,"column":1,"offset":1166},"end":{"line":14,"column":283,"offset":1448},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1166},"end":{"line":14,"column":283,"offset":1448},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For me, full stack has always been about the adventure of software itself - its the nature of the discepline in fact - there are new tools being rolled out literally every day. I mean, really, if you’ve written backend code for databases but have also built websites (I know there are many of us out there!)- how are you supposed to write that susincctly on a resume or CV? “Hi, I’m Chris, part-time-database-program-writer-and-part-time-front-end-engineer”? I do concede that the moniker ‘full stack’ is not really a good enough description by itself. In my case, I could say ‘full stack ","position":{"start":{"line":16,"column":1,"offset":1450},"end":{"line":16,"column":590,"offset":2039},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"web developer","position":{"start":{"line":16,"column":591,"offset":2040},"end":{"line":16,"column":604,"offset":2053},"indent":[]}}],"position":{"start":{"line":16,"column":590,"offset":2039},"end":{"line":16,"column":605,"offset":2054},"indent":[]}},{"type":"text","value":"’. With more practice, maybe someday a full stack ","position":{"start":{"line":16,"column":605,"offset":2054},"end":{"line":16,"column":655,"offset":2104},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"android developer","position":{"start":{"line":16,"column":656,"offset":2105},"end":{"line":16,"column":673,"offset":2122},"indent":[]}}],"position":{"start":{"line":16,"column":655,"offset":2104},"end":{"line":16,"column":674,"offset":2123},"indent":[]}},{"type":"text","value":" - but I need to run through a lot more projects before that happens :)","position":{"start":{"line":16,"column":674,"offset":2123},"end":{"line":16,"column":745,"offset":2194},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1450},"end":{"line":16,"column":745,"offset":2194},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":18,"column":3,"offset":2198},"end":{"line":18,"column":13,"offset":2208},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":2196},"end":{"line":18,"column":13,"offset":2208},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Just because we’re not the greatest, most amazing expert in a certain language, just because we don’t know certain frameworks, just because we haven’t focused in one software engineering discipline our entire careers…","position":{"start":{"line":20,"column":1,"offset":2210},"end":{"line":20,"column":220,"offset":2429},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":2210},"end":{"line":20,"column":220,"offset":2429},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Shouldn’t we still be able to call ourselves full stack developers?","position":{"start":{"line":22,"column":2,"offset":2432},"end":{"line":22,"column":69,"offset":2499},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2431},"end":{"line":22,"column":70,"offset":2500},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2431},"end":{"line":22,"column":70,"offset":2500},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Of course.","position":{"start":{"line":24,"column":3,"offset":2504},"end":{"line":24,"column":13,"offset":2514},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2502},"end":{"line":24,"column":15,"offset":2516},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":2502},"end":{"line":24,"column":15,"offset":2516},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":25,"column":1,"offset":2517}}}},{"id":"transformer-remark-markdown-ast-f188a4d4c807cec0fc8830103c771561-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Hello World - My First Post :)\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":64},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I’ll be writing here for sometime into the future now, though I’m not sure how often, as I’m rather busy with the work for ","position":{"start":{"line":6,"column":1,"offset":66},"end":{"line":6,"column":124,"offset":189},"indent":[]}},{"type":"link","title":null,"url":"nlp-champs.com","children":[{"type":"text","value":"nlp-champs.com","position":{"start":{"line":6,"column":125,"offset":190},"end":{"line":6,"column":139,"offset":204},"indent":[]}}],"position":{"start":{"line":6,"column":124,"offset":189},"end":{"line":6,"column":156,"offset":221},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":156,"offset":221},"end":{"line":6,"column":161,"offset":226},"indent":[]}},{"type":"link","title":null,"url":"skillscout.herokuapp.com","children":[{"type":"text","value":"SkillScout","position":{"start":{"line":6,"column":162,"offset":227},"end":{"line":6,"column":172,"offset":237},"indent":[]}}],"position":{"start":{"line":6,"column":161,"offset":226},"end":{"line":6,"column":199,"offset":264},"indent":[]}},{"type":"text","value":" (the original thing that brought on the need case for ","position":{"start":{"line":6,"column":199,"offset":264},"end":{"line":6,"column":254,"offset":319},"indent":[]}},{"type":"link","title":null,"url":"nlp-champs.com","children":[{"type":"text","value":"nlp-champs.com","position":{"start":{"line":6,"column":255,"offset":320},"end":{"line":6,"column":269,"offset":334},"indent":[]}}],"position":{"start":{"line":6,"column":254,"offset":319},"end":{"line":6,"column":286,"offset":351},"indent":[]}},{"type":"text","value":". Plus, it ","position":{"start":{"line":6,"column":286,"offset":351},"end":{"line":6,"column":297,"offset":362},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"really","position":{"start":{"line":6,"column":298,"offset":363},"end":{"line":6,"column":304,"offset":369},"indent":[]}}],"position":{"start":{"line":6,"column":297,"offset":362},"end":{"line":6,"column":305,"offset":370},"indent":[]}},{"type":"text","value":" doesn’t help that I recently fell down the rabbit hole that is blockchain. That stuff makes my head :boom: :boom: :boom: daily.","position":{"start":{"line":6,"column":305,"offset":370},"end":{"line":6,"column":433,"offset":498},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":66},"end":{"line":6,"column":433,"offset":498},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":7,"column":1,"offset":499}}}},{"id":"transformer-remark-markdown-ast-03925b7761ae5347eab83ca8e6d2b3aa-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, server? Check. Command? Check. Service Name? Check. So, what do we get for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":114,"offset":5767},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":114,"offset":5767},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5769},"end":{"line":107,"column":64,"offset":5832},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5769},"end":{"line":107,"column":64,"offset":5832},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5834},"end":{"line":109,"column":124,"offset":5957},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5834},"end":{"line":109,"column":124,"offset":5957},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5960},"end":{"line":112,"column":63,"offset":6022},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":112,"column":63,"offset":6022},"end":{"line":113,"column":1,"offset":6023},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6023},"end":{"line":113,"column":64,"offset":6086},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5960},"end":{"line":113,"column":64,"offset":6086},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6088},"end":{"line":115,"column":107,"offset":6194},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6194},"end":{"line":115,"column":129,"offset":6216},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6216},"end":{"line":115,"column":130,"offset":6217},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6088},"end":{"line":115,"column":130,"offset":6217},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6219},"end":{"line":141,"column":4,"offset":7091},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual Property Disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7094},"end":{"line":143,"column":140,"offset":7232},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7233},"end":{"line":143,"column":147,"offset":7239},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7232},"end":{"line":143,"column":197,"offset":7289},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7289},"end":{"line":143,"column":198,"offset":7290},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7093},"end":{"line":143,"column":199,"offset":7291},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7093},"end":{"line":143,"column":199,"offset":7291},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7292}}}},{"id":"transformer-remark-markdown-ast-8da88dd5d7387d819def24ffbdd41eb9-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: An Ethereum Developer's Toolbelt\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":66},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Ethereum is not that old","position":{"start":{"line":6,"column":3,"offset":70},"end":{"line":6,"column":27,"offset":94},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":27,"offset":94},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, ","position":{"start":{"line":8,"column":2,"offset":97},"end":{"line":8,"column":215,"offset":310},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com","children":[{"type":"text","value":"read my Medium article on the subject.","position":{"start":{"line":8,"column":216,"offset":311},"end":{"line":8,"column":254,"offset":349},"indent":[]}}],"position":{"start":{"line":8,"column":215,"offset":310},"end":{"line":8,"column":275,"offset":370},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":96},"end":{"line":8,"column":276,"offset":371},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":96},"end":{"line":8,"column":276,"offset":371},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.","position":{"start":{"line":10,"column":1,"offset":373},"end":{"line":10,"column":264,"offset":636},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":373},"end":{"line":10,"column":264,"offset":636},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Truffle","position":{"start":{"line":12,"column":3,"offset":640},"end":{"line":12,"column":16,"offset":653},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":638},"end":{"line":12,"column":16,"offset":653},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Ethermint","position":{"start":{"line":16,"column":3,"offset":659},"end":{"line":16,"column":18,"offset":674},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":657},"end":{"line":16,"column":18,"offset":674},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Truffle and Ethermint?!?!","position":{"start":{"line":18,"column":3,"offset":678},"end":{"line":18,"column":28,"offset":703},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":676},"end":{"line":18,"column":28,"offset":703},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":19,"column":1,"offset":704}}}},{"id":"transformer-remark-markdown-ast-b0654921c6f8d0cc4cc873f0469c7c11-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: My First and Final Statement on Bitcoin for this Blog\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":87},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lots of words have been thrown around Bitcoin recently. Tulip Madness. Silk Road. Ponzi Scheme. While this blog will (rest assured) remain about software development and programming, I had to give my final say (barring what a spew on reddit :) ) SOMEWHERE about bitcoin, and let me promise you, I won’t post about Bitcoin (in relation to politics or economics) every again.","position":{"start":{"line":6,"column":1,"offset":89},"end":{"line":6,"column":374,"offset":462},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":89},"end":{"line":6,"column":374,"offset":462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The simple economics are: there will only every 21 million of them, it was the first of its kind (certainly not the best - many improvements in other coins and blockchain protocols exist). But the fact still stands, bitcoin has the largest AND majority market cap among all the other currencies.","position":{"start":{"line":8,"column":1,"offset":464},"end":{"line":8,"column":296,"offset":759},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":464},"end":{"line":8,"column":296,"offset":759},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"","children":[],"position":{"start":{"line":10,"column":1,"offset":761},"end":{"line":10,"column":5,"offset":765},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":761},"end":{"line":10,"column":5,"offset":765},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A comic I thought up about Bitcoin :)","position":{"start":{"line":12,"column":1,"offset":767},"end":{"line":12,"column":38,"offset":804},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":767},"end":{"line":12,"column":38,"offset":804},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As cash flows from standard gold to Bitcoin, the market cap could approach the ","position":{"start":{"line":14,"column":1,"offset":806},"end":{"line":14,"column":80,"offset":885},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"trillions","position":{"start":{"line":14,"column":81,"offset":886},"end":{"line":14,"column":90,"offset":895},"indent":[]}}],"position":{"start":{"line":14,"column":80,"offset":885},"end":{"line":14,"column":91,"offset":896},"indent":[]}},{"type":"text","value":" range. With that order of magnitude of market cap, 1 Bitcoin would have:","position":{"start":{"line":14,"column":91,"offset":896},"end":{"line":14,"column":164,"offset":969},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":806},"end":{"line":14,"column":164,"offset":969},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Market Capitalization | Bitcoin price*\n1 Trillion | 52631\n2 Trillion |\n3 Trillion |\n… |\n7 Trillion (market cap of gold) |","position":{"start":{"line":16,"column":1,"offset":971},"end":{"line":21,"column":34,"offset":1094},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":16,"column":1,"offset":971},"end":{"line":21,"column":34,"offset":1094},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"*","position":{"start":{"line":23,"column":1,"offset":1096},"end":{"line":23,"column":3,"offset":1098},"indent":[]}},{"type":"text","value":"(assume around 19 million bitcoins - currently 18.6 as of writing this entry)","position":{"start":{"line":23,"column":3,"offset":1098},"end":{"line":23,"column":80,"offset":1175},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1096},"end":{"line":23,"column":80,"offset":1175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I predict:","position":{"start":{"line":25,"column":1,"offset":1177},"end":{"line":25,"column":11,"offset":1187},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1177},"end":{"line":25,"column":11,"offset":1187},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$20,000 by January 1st 2018","position":{"start":{"line":27,"column":3,"offset":1191},"end":{"line":27,"column":30,"offset":1218},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1191},"end":{"line":27,"column":30,"offset":1218},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1189},"end":{"line":27,"column":30,"offset":1218},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$50,000 by end of Q2 2018","position":{"start":{"line":28,"column":3,"offset":1221},"end":{"line":28,"column":28,"offset":1246},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1221},"end":{"line":28,"column":28,"offset":1246},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1219},"end":{"line":28,"column":28,"offset":1246},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$100,000 by end of Q4 2018","position":{"start":{"line":29,"column":3,"offset":1249},"end":{"line":29,"column":29,"offset":1275},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1249},"end":{"line":29,"column":29,"offset":1275},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1247},"end":{"line":29,"column":29,"offset":1275},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1189},"end":{"line":29,"column":29,"offset":1275},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Here’s what has to happen for the price of Bitcoin to crash","position":{"start":{"line":31,"column":3,"offset":1279},"end":{"line":31,"column":62,"offset":1338},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1277},"end":{"line":31,"column":62,"offset":1338},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Actually, if 100% of people who bought became true 100% hodlers, the price would remain constant","position":{"start":{"line":32,"column":3,"offset":1341},"end":{"line":32,"column":99,"offset":1437},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1341},"end":{"line":32,"column":99,"offset":1437},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1339},"end":{"line":32,"column":99,"offset":1437},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1339},"end":{"line":32,"column":99,"offset":1437},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let it stand as a permanant marker:","position":{"start":{"line":34,"column":1,"offset":1439},"end":{"line":34,"column":36,"offset":1474},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1439},"end":{"line":34,"column":36,"offset":1474},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"as of 16:08 UTC, Tuesday december 12, 2017 the mid-market price on GDAX for 1 Bitcoin was $17,450.","position":{"start":{"line":36,"column":3,"offset":1478},"end":{"line":36,"column":101,"offset":1576},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1476},"end":{"line":36,"column":103,"offset":1578},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1476},"end":{"line":36,"column":103,"offset":1578},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":37,"column":1,"offset":1579}}}},{"id":"transformer-remark-markdown-html-73a2717d0752ed60c603c318fc0521b0-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Warning everyone - this is a bit of rant post - but I hope some of you will agree and we can turn the tables of a stubborn community a bit.</p>\n<h1>The Full Stack Myth?</h1>\n<p>Much to my suprise, thoughout my various software engineering media consumption adventures - I’ve discovered there is a general consensus that the idea of ‘full stack’ is FAKE NEWS. Lots of people on podcasts say it I say screw that. That is a lot like saying, “oh hey, did you know it’s impossible to write great apps or games if you’re a solo developer?” or, “What?!?! A nice dynamic UI, <em>with</em> a relational database backend <em>and</em> a websocket to send messages between the two!?!? You’re a madman!!!“.</p>\n<p>Wait a second - isn’t that what this whole Web 3.0 stuff is supposed to do? Empower developers to make great apps all by themselves? I mean jeez, I know us, we’ve spent hours on hours learning python, backend databases, container deploys, dabbled in numerous backend frameworks, not even getting started with your favorite modern front end framework of choice (yeah, there’s a lot of those too!) like Vue, React, Ember or more.</p>\n<p>Of course full stack developers know they are more a less a jack of all trades, master of none. I know there are people who could kick my ass at both Postgresql database maintenence, and there are just as many frontend people who could totally kick my ass with a badass UI in React.</p>\n<p>For me, full stack has always been about the adventure of software itself - its the nature of the discepline in fact - there are new tools being rolled out literally every day. I mean, really, if you’ve written backend code for databases but have also built websites (I know there are many of us out there!)- how are you supposed to write that susincctly on a resume or CV? “Hi, I’m Chris, part-time-database-program-writer-and-part-time-front-end-engineer”? I do concede that the moniker ‘full stack’ is not really a good enough description by itself. In my case, I could say ‘full stack <em>web developer</em>’. With more practice, maybe someday a full stack <em>android developer</em> - but I need to run through a lot more projects before that happens :)</p>\n<h1>Conclusion</h1>\n<p>Just because we’re not the greatest, most amazing expert in a certain language, just because we don’t know certain frameworks, just because we haven’t focused in one software engineering discipline our entire careers…</p>\n<p><em>Shouldn’t we still be able to call ourselves full stack developers?</em></p>\n<p><strong>Of course.</strong></p>"},{"id":"transformer-remark-markdown-html-f188a4d4c807cec0fc8830103c771561-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>I’ll be writing here for sometime into the future now, though I’m not sure how often, as I’m rather busy with the work for <a href=\"nlp-champs.com\">nlp-champs.com</a> and <a href=\"skillscout.herokuapp.com\">SkillScout</a> (the original thing that brought on the need case for <a href=\"nlp-champs.com\">nlp-champs.com</a>. Plus, it <em>really</em> doesn’t help that I recently fell down the rabbit hole that is blockchain. That stuff makes my head :boom: :boom: :boom: daily.</p>"},{"id":"transformer-remark-markdown-html-03925b7761ae5347eab83ca8e6d2b3aa-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay, server? Check. Command? Check. Service Name? Check. So, what do we get for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual Property Disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-html-8da88dd5d7387d819def24ffbdd41eb9-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<h1>Ethereum is not that old</h1>\n<p><em>This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, <a href=\"https://medium.com\">read my Medium article on the subject.</a></em></p>\n<p>As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.</p>\n<h1>Enter Truffle</h1>\n<h1>Enter Ethermint</h1>\n<h1>Truffle and Ethermint?!?!</h1>"},{"id":"transformer-remark-markdown-html-b0654921c6f8d0cc4cc873f0469c7c11-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Lots of words have been thrown around Bitcoin recently. Tulip Madness. Silk Road. Ponzi Scheme. While this blog will (rest assured) remain about software development and programming, I had to give my final say (barring what a spew on reddit :) ) SOMEWHERE about bitcoin, and let me promise you, I won’t post about Bitcoin (in relation to politics or economics) every again.</p>\n<p>The simple economics are: there will only every 21 million of them, it was the first of its kind (certainly not the best - many improvements in other coins and blockchain protocols exist). But the fact still stands, bitcoin has the largest AND majority market cap among all the other currencies.</p>\n<p><a href=\"\"></a></p>\n<p>A comic I thought up about Bitcoin :)</p>\n<p>As cash flows from standard gold to Bitcoin, the market cap could approach the <em>trillions</em> range. With that order of magnitude of market cap, 1 Bitcoin would have:</p>\n<p>Market Capitalization | Bitcoin price*\n1 Trillion | 52631\n2 Trillion |\n3 Trillion |\n… |\n7 Trillion (market cap of gold) |</p>\n<p>*(assume around 19 million bitcoins - currently 18.6 as of writing this entry)</p>\n<p>I predict:</p>\n<ul>\n<li>$20,000 by January 1st 2018</li>\n<li>$50,000 by end of Q2 2018</li>\n<li>$100,000 by end of Q4 2018</li>\n</ul>\n<h1>Here’s what has to happen for the price of Bitcoin to crash</h1>\n<ul>\n<li>Actually, if 100% of people who bought became true 100% hodlers, the price would remain constant</li>\n</ul>\n<p>Let it stand as a permanant marker:</p>\n<p><strong>as of 16:08 UTC, Tuesday december 12, 2017 the mid-market price on GDAX for 1 Bitcoin was $17,450.</strong></p>"},{"id":"transformer-remark-markdown-ast-25a832b39555769c5f8523d8f451643f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, server? Check. Command? Check. Service Name? Check. So, what do we get for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":114,"offset":5767},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":114,"offset":5767},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5769},"end":{"line":107,"column":64,"offset":5832},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5769},"end":{"line":107,"column":64,"offset":5832},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5834},"end":{"line":109,"column":124,"offset":5957},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5834},"end":{"line":109,"column":124,"offset":5957},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5960},"end":{"line":112,"column":63,"offset":6022},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":112,"column":63,"offset":6022},"end":{"line":113,"column":1,"offset":6023},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6023},"end":{"line":113,"column":64,"offset":6086},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5960},"end":{"line":113,"column":64,"offset":6086},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6088},"end":{"line":115,"column":107,"offset":6194},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6194},"end":{"line":115,"column":129,"offset":6216},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6216},"end":{"line":115,"column":130,"offset":6217},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6088},"end":{"line":115,"column":130,"offset":6217},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6219},"end":{"line":141,"column":4,"offset":7091},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7094},"end":{"line":143,"column":140,"offset":7232},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7233},"end":{"line":143,"column":147,"offset":7239},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7232},"end":{"line":143,"column":197,"offset":7289},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7289},"end":{"line":143,"column":198,"offset":7290},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7093},"end":{"line":143,"column":199,"offset":7291},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7093},"end":{"line":143,"column":199,"offset":7291},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7292}}}},{"id":"transformer-remark-markdown-html-25a832b39555769c5f8523d8f451643f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay, server? Check. Command? Check. Service Name? Check. So, what do we get for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-bb4732f2bf121e426461a6a5c6ab82f1-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, server? Check. Command? Check. Service Name? Check. So, what do we get for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":114,"offset":5767},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":114,"offset":5767},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5769},"end":{"line":107,"column":64,"offset":5832},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5769},"end":{"line":107,"column":64,"offset":5832},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5834},"end":{"line":109,"column":124,"offset":5957},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5834},"end":{"line":109,"column":124,"offset":5957},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5960},"end":{"line":112,"column":63,"offset":6022},"indent":[]}},{"type":"break","position":{"start":{"line":112,"column":63,"offset":6022},"end":{"line":113,"column":1,"offset":6025},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6025},"end":{"line":113,"column":64,"offset":6088},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5960},"end":{"line":113,"column":64,"offset":6088},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6090},"end":{"line":115,"column":107,"offset":6196},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6196},"end":{"line":115,"column":129,"offset":6218},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6218},"end":{"line":115,"column":130,"offset":6219},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6090},"end":{"line":115,"column":130,"offset":6219},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6221},"end":{"line":141,"column":4,"offset":7093},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7096},"end":{"line":143,"column":140,"offset":7234},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7235},"end":{"line":143,"column":147,"offset":7241},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7234},"end":{"line":143,"column":197,"offset":7291},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7291},"end":{"line":143,"column":198,"offset":7292},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7095},"end":{"line":143,"column":199,"offset":7293},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7095},"end":{"line":143,"column":199,"offset":7293},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7294}}}},{"id":"transformer-remark-markdown-html-bb4732f2bf121e426461a6a5c6ab82f1-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay, server? Check. Command? Check. Service Name? Check. So, what do we get for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code><br>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-d6aee0ff7bc215ac4a97e2c4d77cc7d4-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay… Server name? Check. Service Name? Check. Command name(s)? Check.  So, what do we get for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":130,"offset":5783},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":130,"offset":5783},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5785},"end":{"line":107,"column":64,"offset":5848},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5785},"end":{"line":107,"column":64,"offset":5848},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5850},"end":{"line":109,"column":124,"offset":5973},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5850},"end":{"line":109,"column":124,"offset":5973},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5976},"end":{"line":112,"column":63,"offset":6038},"indent":[]}},{"type":"break","position":{"start":{"line":112,"column":63,"offset":6038},"end":{"line":113,"column":1,"offset":6041},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6041},"end":{"line":113,"column":64,"offset":6104},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5976},"end":{"line":113,"column":64,"offset":6104},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6106},"end":{"line":115,"column":107,"offset":6212},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6212},"end":{"line":115,"column":129,"offset":6234},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6234},"end":{"line":115,"column":130,"offset":6235},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6106},"end":{"line":115,"column":130,"offset":6235},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6237},"end":{"line":141,"column":4,"offset":7109},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7112},"end":{"line":143,"column":140,"offset":7250},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7251},"end":{"line":143,"column":147,"offset":7257},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7250},"end":{"line":143,"column":197,"offset":7307},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7307},"end":{"line":143,"column":198,"offset":7308},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7111},"end":{"line":143,"column":199,"offset":7309},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7111},"end":{"line":143,"column":199,"offset":7309},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7310}}}},{"id":"transformer-remark-markdown-html-d6aee0ff7bc215ac4a97e2c4d77cc7d4-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay… Server name? Check. Service Name? Check. Command name(s)? Check.  So, what do we get for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code><br>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-95dc09fe8c306e5a21563de221d69705-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":129,"offset":5782},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":129,"offset":5782},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5784},"end":{"line":107,"column":64,"offset":5847},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5784},"end":{"line":107,"column":64,"offset":5847},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5849},"end":{"line":109,"column":124,"offset":5972},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5849},"end":{"line":109,"column":124,"offset":5972},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5975},"end":{"line":112,"column":63,"offset":6037},"indent":[]}},{"type":"break","position":{"start":{"line":112,"column":63,"offset":6037},"end":{"line":113,"column":1,"offset":6040},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6040},"end":{"line":113,"column":64,"offset":6103},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5975},"end":{"line":113,"column":64,"offset":6103},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6105},"end":{"line":115,"column":107,"offset":6211},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6211},"end":{"line":115,"column":129,"offset":6233},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6233},"end":{"line":115,"column":130,"offset":6234},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6105},"end":{"line":115,"column":130,"offset":6234},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6236},"end":{"line":141,"column":4,"offset":7108},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7111},"end":{"line":143,"column":140,"offset":7249},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7250},"end":{"line":143,"column":147,"offset":7256},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7249},"end":{"line":143,"column":197,"offset":7306},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7306},"end":{"line":143,"column":198,"offset":7307},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7110},"end":{"line":143,"column":199,"offset":7308},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7110},"end":{"line":143,"column":199,"offset":7308},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7309}}}},{"id":"transformer-remark-markdown-html-95dc09fe8c306e5a21563de221d69705-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code><br>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-f450ba50d24374626578a47cc98c7691-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get for a command for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":143,"offset":5796},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":143,"offset":5796},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5798},"end":{"line":107,"column":64,"offset":5861},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5798},"end":{"line":107,"column":64,"offset":5861},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5863},"end":{"line":109,"column":124,"offset":5986},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5863},"end":{"line":109,"column":124,"offset":5986},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5989},"end":{"line":112,"column":63,"offset":6051},"indent":[]}},{"type":"break","position":{"start":{"line":112,"column":63,"offset":6051},"end":{"line":113,"column":1,"offset":6054},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6054},"end":{"line":113,"column":64,"offset":6117},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5989},"end":{"line":113,"column":64,"offset":6117},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6119},"end":{"line":115,"column":107,"offset":6225},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6225},"end":{"line":115,"column":129,"offset":6247},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6247},"end":{"line":115,"column":130,"offset":6248},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6119},"end":{"line":115,"column":130,"offset":6248},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6250},"end":{"line":141,"column":4,"offset":7122},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7125},"end":{"line":143,"column":140,"offset":7263},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7264},"end":{"line":143,"column":147,"offset":7270},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7263},"end":{"line":143,"column":197,"offset":7320},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7320},"end":{"line":143,"column":198,"offset":7321},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7124},"end":{"line":143,"column":199,"offset":7322},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7124},"end":{"line":143,"column":199,"offset":7322},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7323}}}},{"id":"transformer-remark-markdown-html-f450ba50d24374626578a47cc98c7691-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get for a command for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code><br>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-8b3ac26bbed76f4c64aa9b512dff7234-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get as a command for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":142,"offset":5795},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":142,"offset":5795},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5797},"end":{"line":107,"column":64,"offset":5860},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5797},"end":{"line":107,"column":64,"offset":5860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":1,"offset":5862},"end":{"line":109,"column":124,"offset":5985},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5862},"end":{"line":109,"column":124,"offset":5985},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5988},"end":{"line":112,"column":63,"offset":6050},"indent":[]}},{"type":"break","position":{"start":{"line":112,"column":63,"offset":6050},"end":{"line":113,"column":1,"offset":6053},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6053},"end":{"line":113,"column":64,"offset":6116},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5988},"end":{"line":113,"column":64,"offset":6116},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6118},"end":{"line":115,"column":107,"offset":6224},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6224},"end":{"line":115,"column":129,"offset":6246},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6246},"end":{"line":115,"column":130,"offset":6247},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6118},"end":{"line":115,"column":130,"offset":6247},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6249},"end":{"line":141,"column":4,"offset":7121},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7124},"end":{"line":143,"column":140,"offset":7262},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7263},"end":{"line":143,"column":147,"offset":7269},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7262},"end":{"line":143,"column":197,"offset":7319},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7319},"end":{"line":143,"column":198,"offset":7320},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7123},"end":{"line":143,"column":199,"offset":7321},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7123},"end":{"line":143,"column":199,"offset":7321},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7322}}}},{"id":"transformer-remark-markdown-html-8b3ac26bbed76f4c64aa9b512dff7234-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get as a command for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true restart of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code><br>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-1c2c723d93d780d634591c360acc289d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: Sending Windows Server Commands From SAP ABAP\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":79},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alright, let’s do a bit of applied stuff today.","position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":81},"end":{"line":6,"column":48,"offset":128},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Backstory","position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":12,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":12,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.","position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":143},"end":{"line":10,"column":307,"offset":449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.","position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":451},"end":{"line":12,"column":202,"offset":652},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"The Problem","position":{"start":{"line":14,"column":3,"offset":656},"end":{"line":14,"column":14,"offset":667},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":654},"end":{"line":14,"column":14,"offset":667},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.","position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":669},"end":{"line":16,"column":422,"offset":1090},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It’s called ","position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":13,"offset":1104},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":18,"column":13,"offset":1104},"end":{"line":18,"column":17,"offset":1108},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":17,"offset":1108},"end":{"line":18,"column":18,"offset":1109},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1092},"end":{"line":18,"column":18,"offset":1109},"indent":[]}},{"type":"html","lang":null,"value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>","position":{"start":{"line":20,"column":1,"offset":1111},"end":{"line":79,"column":4,"offset":4662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Wow. That’s a monster of a command documentation. Let’s break down what we need.","position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":4664},"end":{"line":81,"column":81,"offset":4744},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:","position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":4748},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":4746},"end":{"line":83,"column":150,"offset":4895},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"\\\\AWESOMESERVER01","position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":4897},"end":{"line":85,"column":20,"offset":4916},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"That’s not a special setting for server names that we have at my company or anything like that, that’s part of the ","position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":116,"offset":5033},"indent":[]}},{"type":"inlineCode","value":"sc","position":{"start":{"line":87,"column":116,"offset":5033},"end":{"line":87,"column":120,"offset":5037},"indent":[]}},{"type":"text","value":" command. Notice the line in the documentation that says exactly that:","position":{"start":{"line":87,"column":120,"offset":5037},"end":{"line":87,"column":190,"offset":5107},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":4918},"end":{"line":87,"column":190,"offset":5107},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The option ","position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":16,"offset":5124},"indent":[]}},{"type":"html","value":"<server>","position":{"start":{"line":89,"column":16,"offset":5124},"end":{"line":89,"column":24,"offset":5132},"indent":[]}},{"type":"text","value":" has the form ”","position":{"start":{"line":89,"column":24,"offset":5132},"end":{"line":89,"column":39,"offset":5147},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":39,"offset":5147},"end":{"line":89,"column":41,"offset":5149},"indent":[]}},{"type":"text","value":"\\","position":{"start":{"line":89,"column":41,"offset":5149},"end":{"line":89,"column":43,"offset":5151},"indent":[]}},{"type":"text","value":"ServerName”","position":{"start":{"line":89,"column":43,"offset":5151},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":5113},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":5111},"end":{"line":89,"column":54,"offset":5162},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":5109},"end":{"line":89,"column":54,"offset":5162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service ","position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":132,"offset":5295},"indent":[]}},{"type":"inlineCode","value":"ServiceName even with Whitespace","position":{"start":{"line":91,"column":132,"offset":5295},"end":{"line":91,"column":166,"offset":5329},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":166,"offset":5329},"end":{"line":91,"column":167,"offset":5330},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":5164},"end":{"line":91,"column":167,"offset":5330},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Command? What command do we need? Let’s check out that wall of text documentation:","position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":5332},"end":{"line":93,"column":83,"offset":5414},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"stop------------Sends a STOP request to a service.","position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":5,"offset":5420},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":5418},"end":{"line":95,"column":55,"offset":5470},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":5416},"end":{"line":95,"column":55,"offset":5470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:","position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":5472},"end":{"line":97,"column":89,"offset":5560},"indent":[]}},{"type":"blockquote","children":[{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Commands:\n  …\n  start-----------Starts a service.","position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":5,"offset":5566},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":3,"offset":5564},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}}],"position":{"start":{"line":99,"column":1,"offset":5562},"end":{"line":101,"column":36,"offset":5619},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"That will be useful later, too.","position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5621},"end":{"line":103,"column":32,"offset":5652},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get as a command for our efforts? It looks like this:","position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":142,"offset":5795},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5654},"end":{"line":105,"column":142,"offset":5795},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":107,"column":1,"offset":5797},"end":{"line":107,"column":64,"offset":5860},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5797},"end":{"line":107,"column":64,"offset":5860},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So, in order for this to be a true ","position":{"start":{"line":109,"column":1,"offset":5862},"end":{"line":109,"column":36,"offset":5897},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"restart","position":{"start":{"line":109,"column":37,"offset":5898},"end":{"line":109,"column":44,"offset":5905},"indent":[]}}],"position":{"start":{"line":109,"column":36,"offset":5897},"end":{"line":109,"column":45,"offset":5906},"indent":[]}},{"type":"text","value":" of the service, we would have to issue a stop/start command pair on the service:","position":{"start":{"line":109,"column":45,"offset":5906},"end":{"line":109,"column":126,"offset":5987},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5862},"end":{"line":109,"column":126,"offset":5987},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"","position":{"start":{"line":112,"column":1,"offset":5990},"end":{"line":112,"column":63,"offset":6052},"indent":[]}},{"type":"break","position":{"start":{"line":112,"column":63,"offset":6052},"end":{"line":113,"column":1,"offset":6055},"indent":[1]}},{"type":"inlineCode","value":"sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"","position":{"start":{"line":113,"column":1,"offset":6055},"end":{"line":113,"column":64,"offset":6118},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5990},"end":{"line":113,"column":64,"offset":6118},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module ","position":{"start":{"line":115,"column":1,"offset":6120},"end":{"line":115,"column":107,"offset":6226},"indent":[]}},{"type":"inlineCode","value":"SXPG_COMMAND_EXECUTE","position":{"start":{"line":115,"column":107,"offset":6226},"end":{"line":115,"column":129,"offset":6248},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":115,"column":129,"offset":6248},"end":{"line":115,"column":130,"offset":6249},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":6120},"end":{"line":115,"column":130,"offset":6249},"indent":[]}},{"type":"html","lang":"abap","value":"<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>","position":{"start":{"line":117,"column":1,"offset":6251},"end":{"line":141,"column":4,"offset":7123},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, ","position":{"start":{"line":143,"column":2,"offset":7126},"end":{"line":143,"column":140,"offset":7264},"indent":[]}},{"type":"link","title":null,"url":"https://www.ospelt.com/en/ospelt/info/home.html","children":[{"type":"text","value":"Ospelt","position":{"start":{"line":143,"column":141,"offset":7265},"end":{"line":143,"column":147,"offset":7271},"indent":[]}}],"position":{"start":{"line":143,"column":140,"offset":7264},"end":{"line":143,"column":197,"offset":7321},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":143,"column":197,"offset":7321},"end":{"line":143,"column":198,"offset":7322},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7125},"end":{"line":143,"column":199,"offset":7323},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":7125},"end":{"line":143,"column":199,"offset":7323},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":144,"column":1,"offset":7324}}}},{"id":"transformer-remark-markdown-html-1c2c723d93d780d634591c360acc289d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Alright, let’s do a bit of applied stuff today.</p>\n<h1>Backstory</h1>\n<p>For a long time, I had a ticket open for our IT for a automatic job that would restart a certain task on a windows server we had - for reasons we still don’t know yet, this particular service would state that it was running, when in fact the job it was supposed to be orchestrating was clearly not running.</p>\n<p>One lazy Friday when I didn’t have much to do, I was brainstorming if it was possible that maybe I could take this ticket into my own hands, writing something on our ABAP stack that could do the trick.</p>\n<h1>The Problem</h1>\n<p>I needed to issue . That much I knew how to do - I had used custom command services with transaction SM69 before. The hard thing that I got stuck with: how could I, from our SAP application server, issue a specific command, on a specific server, to a specific service? Whew. Still with me? With help from one of our basic team members, we discovered that as it turns out, windows has a very nice command for exactly that.</p>\n<p>It’s called <code>sc</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>C:\\>sc\nDESCRIPTION:\n        SC is a command line program used for communicating with the\n        Service Control Manager and services.\nUSAGE:\n        sc <server> [command] [service name] <option1> <option2>...\n\n\n        The option <server> has the form \"\\\\ServerName\"\n        Further help on commands can be obtained by typing: \"sc [command]\"\n        Commands:\n          query-----------Queries the status for a service, or enumerates the status for types of services.\n          queryex---------Queries the extended status for a service, or enumerates the status for types of services.\n          start-----------Starts a service.\n          pause-----------Sends a PAUSE control request to a service.\n          interrogate-----Sends an INTERROGATE control request to a service.\n          continue--------Sends a CONTINUE control request to a service.\n          stop------------Sends a STOP request to a service.\n          config----------Changes the configuration of a service (persistent).\n          description-----Changes the description of a service.\n          failure---------Changes the actions taken by a service upon failure.\n          failureflag-----Changes the failure actions flag of a service.\n          sidtype---------Changes the service SID type of a service.\n          privs-----------Changes the required privileges of a service.\n          managedaccount--Changes the service to mark the service account password as managed by LSA.\n          qc--------------Queries the configuration information for a service.\n          qdescription----Queries the description for a service.\n          qfailure--------Queries the actions taken by a service upon failure.\n          qfailureflag----Queries the failure actions flag of a service.\n          qsidtype--------Queries the service SID type of a service.\n          qprivs----------Queries the required privileges of a service.\n          qtriggerinfo----Queries the trigger parameters of a service.\n          qpreferrednode--Queries the preferred NUMA node of a service.\n          qrunlevel-------Queries the run level of a service.\n          qmanagedaccount-Queries whether a services uses an account with a password managed by LSA.\n          qprotection-----Queries the process protection level of a service.\n          delete----------Deletes a service (from the registry).\n          create----------Creates a service. (adds it to the registry).\n          control---------Sends a control to a service.\n          sdshow----------Displays a service's security descriptor.\n          sdset-----------Sets a service's security descriptor.\n          showsid---------Displays the service SID string corresponding to an arbitrary name.\n          triggerinfo-----Configures the trigger parameters of a service.\n          preferrednode---Sets the preferred NUMA node of a service.\n          runlevel--------Sets the run level of a service.\n          GetDisplayName--Gets the DisplayName for a service.\n          GetKeyName------Gets the ServiceKeyName for a service.\n          EnumDepend------Enumerates Service Dependencies.\n\n        The following commands don't require a service name:\n        sc <server> <command> <option>\n          boot------------(ok | bad) Indicates whether the last boot should be saved as the last-known-good boot configuration\n          Lock------------Locks the Service Database\n          QueryLock-------Queries the LockStatus for the SCManager Database\nEXAMPLE:\n        sc start MyService\n\nWould you like to see help for the QUERY and QUERYEX commands? [ y | n ]:</code></pre>\n      </div>\n<p>Wow. That’s a monster of a command documentation. Let’s break down what we need.</p>\n<ul>\n<li>The server. We know that (for this example, I’m going to just call it AWESOMESERVER01). But wait! There’s a gotchya, we will need to write it like:</li>\n</ul>\n<p><code>\\\\AWESOMESERVER01</code></p>\n<p>That’s not a special setting for server names that we have at my company or anything like that, that’s part of the <code>sc</code> command. Notice the line in the documentation that says exactly that:</p>\n<blockquote>\n<blockquote>\n<p>The option <server> has the form ”\\\\ServerName”</p>\n</blockquote>\n</blockquote>\n<p>Okay, now for our service name. Again, for instruction purposes of the command and for privacy sake, I’m going to call our service <code>ServiceName even with Whitespace</code>.</p>\n<p>Command? What command do we need? Let’s check out that wall of text documentation:</p>\n<blockquote>\n<blockquote>\n<p>stop------------Sends a STOP request to a service.</p>\n</blockquote>\n</blockquote>\n<p>Yep, that sounds about as right as you can get. Oh also, hold your thoughts on this one:</p>\n<blockquote>\n<blockquote>\n<p>Commands:\n…\nstart-----------Starts a service.</p>\n</blockquote>\n</blockquote>\n<p>That will be useful later, too.</p>\n<p>Okay… Server name? Check. Service Name? Check. Command name(s)? Check. So, what do we get as a command for our efforts? It looks like this:</p>\n<p><code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>So, in order for this to be a true <em>restart</em> of the service, we would have to issue a stop/start command pair on the service:</p>\n<p><code>sc \\\\AWESOMESERVER01 stop \"ServiceName even with Whitespace\"</code><br>\n<code>sc \\\\AWESOMESERVER01 start \"ServiceName even with Whitespace\"</code></p>\n<p>How do we do that in ABAP? Well, to run SM69 commands programmatically, we have the tasty function module <code>SXPG_COMMAND_EXECUTE</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-abap\"><code><span class=\"token keyword\">CALL</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token string\">'SXPG_COMMAND_EXECUTE'</span>\n  <span class=\"token keyword\">EXPORTING</span>\n    commandname                   <span class=\"token operator\">=</span> gv_commandname\n    additional_parameters         <span class=\"token operator\">=</span> gv_additional_parameters\n    operatingsystem               <span class=\"token operator\">=</span> gv_operatingsystem\n  <span class=\"token keyword\">TABLES</span>\n    exec_protocol                 <span class=\"token operator\">=</span> gt_result\n  <span class=\"token keyword\">EXCEPTIONS</span>\n    no_permission                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    command_not_found             <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    parameters_too_long           <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    security_risk                 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    wrong_check_call_interface    <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n    program_start_error           <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    program_termination_error     <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n    x_error                       <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\n    parameter_expected            <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n    too_many_parameters           <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    illegal_command               <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n    wrong_asynchronous_parameters <span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n    cant_enq_tbtco_entry          <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\n    jobcount_generation_error     <span class=\"token operator\">=</span> <span class=\"token number\">14</span>\n    <span class=\"token keyword\">OTHERS</span>                        <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">.</span>\n</code></pre>\n      </div>\n<p><em>Intellectual property disclaimer: the exact source code and use case have been modified from the real use case at the company I work for, <a href=\"https://www.ospelt.com/en/ospelt/info/home.html\">Ospelt</a>.</em></p>"},{"id":"transformer-remark-markdown-ast-83a69d435d253c506453564ab56a36b5-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: My First and Final Statement on Bitcoin for this Blog\ndate: \"2017-12-12\"","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":4,"column":4,"offset":87},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lots of words have been thrown around Bitcoin recently. Tulip Madness. Silk Road. Ponzi Scheme. While this blog will (rest assured) remain about software development and programming, I had to give my final say (barring what a spew on reddit :) ) SOMEWHERE about bitcoin, and let me promise you, I won’t post about Bitcoin (in relation to politics or economics) every again.","position":{"start":{"line":6,"column":1,"offset":89},"end":{"line":6,"column":374,"offset":462},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":89},"end":{"line":6,"column":374,"offset":462},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The simple economics are: there will only every 21 million of them, it was the first of its kind (certainly not the best - many improvements in other coins and blockchain protocols exist). But the fact still stands, bitcoin has the largest AND majority market cap among all the other currencies.","position":{"start":{"line":8,"column":1,"offset":464},"end":{"line":8,"column":296,"offset":759},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":464},"end":{"line":8,"column":296,"offset":759},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"","children":[],"position":{"start":{"line":10,"column":1,"offset":761},"end":{"line":10,"column":5,"offset":765},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":761},"end":{"line":10,"column":5,"offset":765},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A comic I thought up about Bitcoin :)","position":{"start":{"line":12,"column":1,"offset":767},"end":{"line":12,"column":38,"offset":804},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":767},"end":{"line":12,"column":38,"offset":804},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As cash flows from standard gold to Bitcoin, the market cap could approach the ","position":{"start":{"line":14,"column":1,"offset":806},"end":{"line":14,"column":80,"offset":885},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"trillions","position":{"start":{"line":14,"column":81,"offset":886},"end":{"line":14,"column":90,"offset":895},"indent":[]}}],"position":{"start":{"line":14,"column":80,"offset":885},"end":{"line":14,"column":91,"offset":896},"indent":[]}},{"type":"text","value":" range. With that order of magnitude of market cap, 1 Bitcoin would have:","position":{"start":{"line":14,"column":91,"offset":896},"end":{"line":14,"column":164,"offset":969},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":806},"end":{"line":14,"column":164,"offset":969},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Market Capitalization | Bitcoin price*\n1 Trillion | ~$53,000\n2 Trillion | ~$105,000\n3 Trillion | ~$158,000\n… |\n7 Trillion (market cap of gold) | ~$368,000","position":{"start":{"line":16,"column":1,"offset":971},"end":{"line":21,"column":44,"offset":1127},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":16,"column":1,"offset":971},"end":{"line":21,"column":44,"offset":1127},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"*","position":{"start":{"line":23,"column":1,"offset":1129},"end":{"line":23,"column":3,"offset":1131},"indent":[]}},{"type":"text","value":"(assume around 19 million bitcoins - currently 16.7 as of writing this entry)","position":{"start":{"line":23,"column":3,"offset":1131},"end":{"line":23,"column":80,"offset":1208},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1129},"end":{"line":23,"column":80,"offset":1208},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I predict:","position":{"start":{"line":25,"column":1,"offset":1210},"end":{"line":25,"column":11,"offset":1220},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1210},"end":{"line":25,"column":11,"offset":1220},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$20,000 by January 1st 2018","position":{"start":{"line":27,"column":3,"offset":1224},"end":{"line":27,"column":30,"offset":1251},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":1224},"end":{"line":27,"column":30,"offset":1251},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1222},"end":{"line":27,"column":30,"offset":1251},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$50,000 by end of Q2 2018","position":{"start":{"line":28,"column":3,"offset":1254},"end":{"line":28,"column":28,"offset":1279},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1254},"end":{"line":28,"column":28,"offset":1279},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1252},"end":{"line":28,"column":28,"offset":1279},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$100,000 by end of Q4 2018","position":{"start":{"line":29,"column":3,"offset":1282},"end":{"line":29,"column":29,"offset":1308},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1282},"end":{"line":29,"column":29,"offset":1308},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1280},"end":{"line":29,"column":29,"offset":1308},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1222},"end":{"line":29,"column":29,"offset":1308},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Here’s what has to happen for the price of Bitcoin to crash","position":{"start":{"line":31,"column":3,"offset":1312},"end":{"line":31,"column":62,"offset":1371},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1310},"end":{"line":31,"column":62,"offset":1371},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Actually, if 100% of people who bought became true 100% hodlers, the price would remain constant","position":{"start":{"line":32,"column":3,"offset":1374},"end":{"line":32,"column":99,"offset":1470},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1374},"end":{"line":32,"column":99,"offset":1470},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1372},"end":{"line":32,"column":99,"offset":1470},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1372},"end":{"line":32,"column":99,"offset":1470},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let it stand as a permanant marker:","position":{"start":{"line":34,"column":1,"offset":1472},"end":{"line":34,"column":36,"offset":1507},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1472},"end":{"line":34,"column":36,"offset":1507},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"as of 16:08 UTC, Tuesday december 12, 2017 the mid-market price on GDAX for 1 Bitcoin was $17,450.","position":{"start":{"line":36,"column":3,"offset":1511},"end":{"line":36,"column":101,"offset":1609},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1509},"end":{"line":36,"column":103,"offset":1611},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1509},"end":{"line":36,"column":103,"offset":1611},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":37,"column":1,"offset":1612}}}},{"id":"transformer-remark-markdown-html-83a69d435d253c506453564ab56a36b5-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Lots of words have been thrown around Bitcoin recently. Tulip Madness. Silk Road. Ponzi Scheme. While this blog will (rest assured) remain about software development and programming, I had to give my final say (barring what a spew on reddit :) ) SOMEWHERE about bitcoin, and let me promise you, I won’t post about Bitcoin (in relation to politics or economics) every again.</p>\n<p>The simple economics are: there will only every 21 million of them, it was the first of its kind (certainly not the best - many improvements in other coins and blockchain protocols exist). But the fact still stands, bitcoin has the largest AND majority market cap among all the other currencies.</p>\n<p><a href=\"\"></a></p>\n<p>A comic I thought up about Bitcoin :)</p>\n<p>As cash flows from standard gold to Bitcoin, the market cap could approach the <em>trillions</em> range. With that order of magnitude of market cap, 1 Bitcoin would have:</p>\n<p>Market Capitalization | Bitcoin price*\n1 Trillion | ~$53,000\n2 Trillion | ~$105,000\n3 Trillion | ~$158,000\n… |\n7 Trillion (market cap of gold) | ~$368,000</p>\n<p>*(assume around 19 million bitcoins - currently 16.7 as of writing this entry)</p>\n<p>I predict:</p>\n<ul>\n<li>$20,000 by January 1st 2018</li>\n<li>$50,000 by end of Q2 2018</li>\n<li>$100,000 by end of Q4 2018</li>\n</ul>\n<h1>Here’s what has to happen for the price of Bitcoin to crash</h1>\n<ul>\n<li>Actually, if 100% of people who bought became true 100% hodlers, the price would remain constant</li>\n</ul>\n<p>Let it stand as a permanant marker:</p>\n<p><strong>as of 16:08 UTC, Tuesday december 12, 2017 the mid-market price on GDAX for 1 Bitcoin was $17,450.</strong></p>"},{"id":"transformer-remark-markdown-ast-e171c67c96adb0962de63d6f763a877f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: My First and Final Statement on Bitcoin for this Blog\ndate: \"2017-12-12\"\ndraft: true","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":99},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lots of words have been thrown around Bitcoin recently. Tulip Madness. Silk Road. Ponzi Scheme. While this blog will (rest assured) remain about software development and programming, I had to give my final say (barring what a spew on reddit :) ) SOMEWHERE about bitcoin, and let me promise you, I won’t post about Bitcoin (in relation to politics or economics) every again.","position":{"start":{"line":7,"column":1,"offset":101},"end":{"line":7,"column":374,"offset":474},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":101},"end":{"line":7,"column":374,"offset":474},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The simple economics are: there will only every 21 million of them, it was the first of its kind (certainly not the best - many improvements in other coins and blockchain protocols exist). But the fact still stands, bitcoin has the largest AND majority market cap among all the other currencies.","position":{"start":{"line":9,"column":1,"offset":476},"end":{"line":9,"column":296,"offset":771},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":476},"end":{"line":9,"column":296,"offset":771},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"","children":[],"position":{"start":{"line":11,"column":1,"offset":773},"end":{"line":11,"column":5,"offset":777},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":773},"end":{"line":11,"column":5,"offset":777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A comic I thought up about Bitcoin :)","position":{"start":{"line":13,"column":1,"offset":779},"end":{"line":13,"column":38,"offset":816},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":779},"end":{"line":13,"column":38,"offset":816},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As cash flows from standard gold to Bitcoin, the market cap could approach the ","position":{"start":{"line":15,"column":1,"offset":818},"end":{"line":15,"column":80,"offset":897},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"trillions","position":{"start":{"line":15,"column":81,"offset":898},"end":{"line":15,"column":90,"offset":907},"indent":[]}}],"position":{"start":{"line":15,"column":80,"offset":897},"end":{"line":15,"column":91,"offset":908},"indent":[]}},{"type":"text","value":" range. With that order of magnitude of market cap, 1 Bitcoin would have:","position":{"start":{"line":15,"column":91,"offset":908},"end":{"line":15,"column":164,"offset":981},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":818},"end":{"line":15,"column":164,"offset":981},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Market Capitalization | Bitcoin price*\n1 Trillion | ~$53,000\n2 Trillion | ~$105,000\n3 Trillion | ~$158,000\n… |\n7 Trillion (market cap of gold) | ~$368,000","position":{"start":{"line":17,"column":1,"offset":983},"end":{"line":22,"column":44,"offset":1139},"indent":[1,1,1,1,1]}}],"position":{"start":{"line":17,"column":1,"offset":983},"end":{"line":22,"column":44,"offset":1139},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"*","position":{"start":{"line":24,"column":1,"offset":1141},"end":{"line":24,"column":3,"offset":1143},"indent":[]}},{"type":"text","value":"(assume around 19 million bitcoins - currently 16.7 as of writing this entry)","position":{"start":{"line":24,"column":3,"offset":1143},"end":{"line":24,"column":80,"offset":1220},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1141},"end":{"line":24,"column":80,"offset":1220},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I predict:","position":{"start":{"line":26,"column":1,"offset":1222},"end":{"line":26,"column":11,"offset":1232},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1222},"end":{"line":26,"column":11,"offset":1232},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$20,000 by January 1st 2018","position":{"start":{"line":28,"column":3,"offset":1236},"end":{"line":28,"column":30,"offset":1263},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1236},"end":{"line":28,"column":30,"offset":1263},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1234},"end":{"line":28,"column":30,"offset":1263},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$50,000 by end of Q2 2018","position":{"start":{"line":29,"column":3,"offset":1266},"end":{"line":29,"column":28,"offset":1291},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1266},"end":{"line":29,"column":28,"offset":1291},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1264},"end":{"line":29,"column":28,"offset":1291},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"$100,000 by end of Q4 2018","position":{"start":{"line":30,"column":3,"offset":1294},"end":{"line":30,"column":29,"offset":1320},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1294},"end":{"line":30,"column":29,"offset":1320},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1292},"end":{"line":30,"column":29,"offset":1320},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1234},"end":{"line":30,"column":29,"offset":1320},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Here’s what has to happen for the price of Bitcoin to crash","position":{"start":{"line":32,"column":3,"offset":1324},"end":{"line":32,"column":62,"offset":1383},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1322},"end":{"line":32,"column":62,"offset":1383},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Actually, if 100% of people who bought became true 100% hodlers, the price would remain constant","position":{"start":{"line":33,"column":3,"offset":1386},"end":{"line":33,"column":99,"offset":1482},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1386},"end":{"line":33,"column":99,"offset":1482},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1384},"end":{"line":33,"column":99,"offset":1482},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1384},"end":{"line":33,"column":99,"offset":1482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let it stand as a permanant marker:","position":{"start":{"line":35,"column":1,"offset":1484},"end":{"line":35,"column":36,"offset":1519},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1484},"end":{"line":35,"column":36,"offset":1519},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"as of 16:08 UTC, Tuesday december 12, 2017 the mid-market price on GDAX for 1 Bitcoin was $17,450.","position":{"start":{"line":37,"column":3,"offset":1523},"end":{"line":37,"column":101,"offset":1621},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1521},"end":{"line":37,"column":103,"offset":1623},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1521},"end":{"line":37,"column":103,"offset":1623},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":38,"column":1,"offset":1624}}}},{"id":"transformer-remark-markdown-html-e171c67c96adb0962de63d6f763a877f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<p>Lots of words have been thrown around Bitcoin recently. Tulip Madness. Silk Road. Ponzi Scheme. While this blog will (rest assured) remain about software development and programming, I had to give my final say (barring what a spew on reddit :) ) SOMEWHERE about bitcoin, and let me promise you, I won’t post about Bitcoin (in relation to politics or economics) every again.</p>\n<p>The simple economics are: there will only every 21 million of them, it was the first of its kind (certainly not the best - many improvements in other coins and blockchain protocols exist). But the fact still stands, bitcoin has the largest AND majority market cap among all the other currencies.</p>\n<p><a href=\"\"></a></p>\n<p>A comic I thought up about Bitcoin :)</p>\n<p>As cash flows from standard gold to Bitcoin, the market cap could approach the <em>trillions</em> range. With that order of magnitude of market cap, 1 Bitcoin would have:</p>\n<p>Market Capitalization | Bitcoin price*\n1 Trillion | ~$53,000\n2 Trillion | ~$105,000\n3 Trillion | ~$158,000\n… |\n7 Trillion (market cap of gold) | ~$368,000</p>\n<p>*(assume around 19 million bitcoins - currently 16.7 as of writing this entry)</p>\n<p>I predict:</p>\n<ul>\n<li>$20,000 by January 1st 2018</li>\n<li>$50,000 by end of Q2 2018</li>\n<li>$100,000 by end of Q4 2018</li>\n</ul>\n<h1>Here’s what has to happen for the price of Bitcoin to crash</h1>\n<ul>\n<li>Actually, if 100% of people who bought became true 100% hodlers, the price would remain constant</li>\n</ul>\n<p>Let it stand as a permanant marker:</p>\n<p><strong>as of 16:08 UTC, Tuesday december 12, 2017 the mid-market price on GDAX for 1 Bitcoin was $17,450.</strong></p>"},{"id":"transformer-remark-markdown-ast-6d4318ba7bf9d277aea119647a21826c-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: An Ethereum Developer's Toolbelt\ndate: \"2017-12-12\"\ndraft: true","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":78},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Ethereum is not that old","position":{"start":{"line":7,"column":3,"offset":82},"end":{"line":7,"column":27,"offset":106},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":80},"end":{"line":7,"column":27,"offset":106},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, ","position":{"start":{"line":9,"column":2,"offset":109},"end":{"line":9,"column":215,"offset":322},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com","children":[{"type":"text","value":"read my Medium article on the subject.","position":{"start":{"line":9,"column":216,"offset":323},"end":{"line":9,"column":254,"offset":361},"indent":[]}}],"position":{"start":{"line":9,"column":215,"offset":322},"end":{"line":9,"column":275,"offset":382},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":108},"end":{"line":9,"column":276,"offset":383},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":108},"end":{"line":9,"column":276,"offset":383},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.","position":{"start":{"line":11,"column":1,"offset":385},"end":{"line":11,"column":264,"offset":648},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":385},"end":{"line":11,"column":264,"offset":648},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Truffle","position":{"start":{"line":13,"column":3,"offset":652},"end":{"line":13,"column":16,"offset":665},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":650},"end":{"line":13,"column":16,"offset":665},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Ethermint","position":{"start":{"line":17,"column":3,"offset":671},"end":{"line":17,"column":18,"offset":686},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":669},"end":{"line":17,"column":18,"offset":686},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Truffle and Ethermint?!?!","position":{"start":{"line":19,"column":3,"offset":690},"end":{"line":19,"column":28,"offset":715},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":688},"end":{"line":19,"column":28,"offset":715},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":1,"offset":716}}}},{"id":"transformer-remark-markdown-html-6d4318ba7bf9d277aea119647a21826c-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<h1>Ethereum is not that old</h1>\n<p><em>This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, <a href=\"https://medium.com\">read my Medium article on the subject.</a></em></p>\n<p>As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.</p>\n<h1>Enter Truffle</h1>\n<h1>Enter Ethermint</h1>\n<h1>Truffle and Ethermint?!?!</h1>"},{"id":"transformer-remark-markdown-ast-0b3ae366c30b5c0ba67cd92aa003da68-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: An Ethereum Developer's Toolbelt\ndate: \"2017-12-12\"\ndraft: true","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":78},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Ethereum is not that old","position":{"start":{"line":7,"column":3,"offset":82},"end":{"line":7,"column":27,"offset":106},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":80},"end":{"line":7,"column":27,"offset":106},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, ","position":{"start":{"line":9,"column":2,"offset":109},"end":{"line":9,"column":215,"offset":322},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@frewin.christopher/the-ethereum-project-a-high-level-review-of-the-projects-progress-status-resources-tools-4e4f88050ffa","children":[{"type":"text","value":"read my Medium article on the subject.","position":{"start":{"line":9,"column":216,"offset":323},"end":{"line":9,"column":254,"offset":361},"indent":[]}}],"position":{"start":{"line":9,"column":215,"offset":322},"end":{"line":9,"column":397,"offset":504},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":108},"end":{"line":9,"column":398,"offset":505},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":108},"end":{"line":9,"column":398,"offset":505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.","position":{"start":{"line":11,"column":1,"offset":507},"end":{"line":11,"column":264,"offset":770},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":507},"end":{"line":11,"column":264,"offset":770},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Truffle","position":{"start":{"line":13,"column":3,"offset":774},"end":{"line":13,"column":16,"offset":787},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":772},"end":{"line":13,"column":16,"offset":787},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Ethermint","position":{"start":{"line":17,"column":3,"offset":793},"end":{"line":17,"column":18,"offset":808},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":791},"end":{"line":17,"column":18,"offset":808},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Truffle and Ethermint?!?!","position":{"start":{"line":19,"column":3,"offset":812},"end":{"line":19,"column":28,"offset":837},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":810},"end":{"line":19,"column":28,"offset":837},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":1,"offset":838}}}},{"id":"transformer-remark-markdown-html-0b3ae366c30b5c0ba67cd92aa003da68-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<h1>Ethereum is not that old</h1>\n<p><em>This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, <a href=\"https://medium.com/@frewin.christopher/the-ethereum-project-a-high-level-review-of-the-projects-progress-status-resources-tools-4e4f88050ffa\">read my Medium article on the subject.</a></em></p>\n<p>As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.</p>\n<h1>Enter Truffle</h1>\n<h1>Enter Ethermint</h1>\n<h1>Truffle and Ethermint?!?!</h1>"},{"id":"transformer-remark-markdown-ast-fde6691ea094fb564b53c63fddb55b1f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: An Ethereum Developer's Toolbelt\ndate: \"2017-12-12\"\ndraft: 'true'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":5,"column":4,"offset":80},"indent":[1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Ethereum is not that old","position":{"start":{"line":7,"column":3,"offset":84},"end":{"line":7,"column":27,"offset":108},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":82},"end":{"line":7,"column":27,"offset":108},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, ","position":{"start":{"line":9,"column":2,"offset":111},"end":{"line":9,"column":215,"offset":324},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@frewin.christopher/the-ethereum-project-a-high-level-review-of-the-projects-progress-status-resources-tools-4e4f88050ffa","children":[{"type":"text","value":"read my Medium article on the subject.","position":{"start":{"line":9,"column":216,"offset":325},"end":{"line":9,"column":254,"offset":363},"indent":[]}}],"position":{"start":{"line":9,"column":215,"offset":324},"end":{"line":9,"column":397,"offset":506},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":110},"end":{"line":9,"column":398,"offset":507},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":110},"end":{"line":9,"column":398,"offset":507},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.","position":{"start":{"line":11,"column":1,"offset":509},"end":{"line":11,"column":264,"offset":772},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":509},"end":{"line":11,"column":264,"offset":772},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Truffle","position":{"start":{"line":13,"column":3,"offset":776},"end":{"line":13,"column":16,"offset":789},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":774},"end":{"line":13,"column":16,"offset":789},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Ethermint","position":{"start":{"line":17,"column":3,"offset":795},"end":{"line":17,"column":18,"offset":810},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":793},"end":{"line":17,"column":18,"offset":810},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Truffle and Ethermint?!?!","position":{"start":{"line":19,"column":3,"offset":814},"end":{"line":19,"column":28,"offset":839},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":812},"end":{"line":19,"column":28,"offset":839},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":1,"offset":840}}}},{"id":"transformer-remark-markdown-html-fde6691ea094fb564b53c63fddb55b1f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<h1>Ethereum is not that old</h1>\n<p><em>This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, <a href=\"https://medium.com/@frewin.christopher/the-ethereum-project-a-high-level-review-of-the-projects-progress-status-resources-tools-4e4f88050ffa\">read my Medium article on the subject.</a></em></p>\n<p>As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.</p>\n<h1>Enter Truffle</h1>\n<h1>Enter Ethermint</h1>\n<h1>Truffle and Ethermint?!?!</h1>"},{"id":"transformer-remark-markdown-ast-aa309c207f0c449d9b3142e2ef7a6b4e-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":{"type":"root","children":[{"type":"yaml","value":"title: An Ethereum Developer's Toolbelt\npoop: Yeah\ndate: \"2017-12-12\"\ndraft: 'true'","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":4,"offset":91},"indent":[1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Ethereum is not that old","position":{"start":{"line":8,"column":3,"offset":95},"end":{"line":8,"column":27,"offset":119},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":93},"end":{"line":8,"column":27,"offset":119},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, ","position":{"start":{"line":10,"column":2,"offset":122},"end":{"line":10,"column":215,"offset":335},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@frewin.christopher/the-ethereum-project-a-high-level-review-of-the-projects-progress-status-resources-tools-4e4f88050ffa","children":[{"type":"text","value":"read my Medium article on the subject.","position":{"start":{"line":10,"column":216,"offset":336},"end":{"line":10,"column":254,"offset":374},"indent":[]}}],"position":{"start":{"line":10,"column":215,"offset":335},"end":{"line":10,"column":397,"offset":517},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":121},"end":{"line":10,"column":398,"offset":518},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":121},"end":{"line":10,"column":398,"offset":518},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.","position":{"start":{"line":12,"column":1,"offset":520},"end":{"line":12,"column":264,"offset":783},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":520},"end":{"line":12,"column":264,"offset":783},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Truffle","position":{"start":{"line":14,"column":3,"offset":787},"end":{"line":14,"column":16,"offset":800},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":785},"end":{"line":14,"column":16,"offset":800},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Enter Ethermint","position":{"start":{"line":18,"column":3,"offset":806},"end":{"line":18,"column":18,"offset":821},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":804},"end":{"line":18,"column":18,"offset":821},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Truffle and Ethermint?!?!","position":{"start":{"line":20,"column":3,"offset":825},"end":{"line":20,"column":28,"offset":850},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":823},"end":{"line":20,"column":28,"offset":850},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":21,"column":1,"offset":851}}}},{"id":"transformer-remark-markdown-html-aa309c207f0c449d9b3142e2ef7a6b4e-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants","value":"<h1>Ethereum is not that old</h1>\n<p><em>This post is for developer who have at least some hands on experience writing DApps. If you are new to blockchain development, or are new to Ethereum and looking for a more technical 2017 overview of the Project, <a href=\"https://medium.com/@frewin.christopher/the-ethereum-project-a-high-level-review-of-the-projects-progress-status-resources-tools-4e4f88050ffa\">read my Medium article on the subject.</a></em></p>\n<p>As such, the tools surrounding decentralized apps (DApps) and blockchain development are being created with blazing speed - it’s like 2014 (I know, so long ago, right?) when es5 came out, as well as react, webpack, and hundreds of other tools were being released.</p>\n<h1>Enter Truffle</h1>\n<h1>Enter Ethermint</h1>\n<h1>Truffle and Ethermint?!?!</h1>"}]}