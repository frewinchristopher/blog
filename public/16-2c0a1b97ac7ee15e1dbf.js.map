{"version":3,"sources":["webpack:///./node_modules/gatsby-link/index.js","webpack:///./node_modules/lodash/_nativeCreate.js","webpack:///./node_modules/lodash/_assocIndexOf.js","webpack:///./node_modules/lodash/_getMapData.js","webpack:///./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_getNative.js","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/lodash/get.js","webpack:///./node_modules/lodash/_baseGet.js","webpack:///./node_modules/lodash/_castPath.js","webpack:///./node_modules/lodash/_isKey.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/lodash/_stringToPath.js","webpack:///./node_modules/lodash/_memoizeCapped.js","webpack:///./node_modules/lodash/memoize.js","webpack:///./node_modules/lodash/_MapCache.js","webpack:///./node_modules/lodash/_mapCacheClear.js","webpack:///./node_modules/lodash/_Hash.js","webpack:///./node_modules/lodash/_hashClear.js","webpack:///./node_modules/lodash/_baseIsNative.js","webpack:///./node_modules/lodash/isFunction.js","webpack:///./node_modules/lodash/_isMasked.js","webpack:///./node_modules/lodash/_coreJsData.js","webpack:///./node_modules/lodash/_toSource.js","webpack:///./node_modules/lodash/_getValue.js","webpack:///./node_modules/lodash/_hashDelete.js","webpack:///./node_modules/lodash/_hashGet.js","webpack:///./node_modules/lodash/_hashHas.js","webpack:///./node_modules/lodash/_hashSet.js","webpack:///./node_modules/lodash/_ListCache.js","webpack:///./node_modules/lodash/_listCacheClear.js","webpack:///./node_modules/lodash/_listCacheDelete.js","webpack:///./node_modules/lodash/eq.js","webpack:///./node_modules/lodash/_listCacheGet.js","webpack:///./node_modules/lodash/_listCacheHas.js","webpack:///./node_modules/lodash/_listCacheSet.js","webpack:///./node_modules/lodash/_Map.js","webpack:///./node_modules/lodash/_mapCacheDelete.js","webpack:///./node_modules/lodash/_isKeyable.js","webpack:///./node_modules/lodash/_mapCacheGet.js","webpack:///./node_modules/lodash/_mapCacheHas.js","webpack:///./node_modules/lodash/_mapCacheSet.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/_arrayMap.js","webpack:///./node_modules/lodash/_toKey.js","webpack:///./node_modules/pts/dist/es2015/Util.js","webpack:///./node_modules/pts/dist/es2015/LinearAlgebra.js","webpack:///./node_modules/pts/dist/es2015/Op.js","webpack:///./node_modules/pts/dist/es2015/Num.js","webpack:///./node_modules/pts/dist/es2015/Pt.js","webpack:///./node_modules/pts/dist/es2015/UI.js","webpack:///./node_modules/pts/dist/es2015/Space.js","webpack:///./node_modules/pts/dist/es2015/Form.js","webpack:///./node_modules/pts/dist/es2015/Typography.js","webpack:///./node_modules/pts/dist/es2015/Canvas.js","webpack:///./node_modules/pts/dist/es2015/Create.js","webpack:///./node_modules/pts/dist/es2015/Color.js","webpack:///./node_modules/pts/dist/es2015/Dom.js","webpack:///./node_modules/pts/dist/es2015/Svg.js","webpack:///./node_modules/pts/dist/es2015/Physics.js","webpack:///./node_modules/pts/dist/es2015/_module.js"],"names":["_interopRequireDefault","__webpack_require__","exports","__esModule","withPrefix","navigateTo","replace","push","navigate","default","_objectWithoutPropertiesLoose2","_extends2","_inheritsLoose2","_assertThisInitialized2","_defineProperty2","_propTypes","_react","_router","_gatsby","path","normalizePath","NavLinkPropTypes","activeClassName","string","activeStyle","object","GatsbyLink","_React$Component","props","_this","call","this","_ref","isCurrent","className","filter","Boolean","join","style","IOSupported","window","IntersectionObserver","state","handleRef","bind","_proto","prototype","componentDidUpdate","prevProps","prevState","to","___loader","enqueue","parsePath","pathname","componentDidMount","ref","el","cb","io","_this2","innerRef","entries","forEach","entry","target","isIntersecting","intersectionRatio","unobserve","disconnect","observe","render","_this3","_this$props","_this$props$getProps","getProps","defaultGetProps","_onClick","onClick","_onMouseEnter","onMouseEnter","rest","prefixedTo","createElement","Link","e","hovering","button","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","preventDefault","Component","propTypes","func","isRequired","bool","_default","options","___navigate","console","warn","___push","___replace","nativeCreate","getNative","Object","module","eq","array","key","length","isKeyable","map","data","__data__","source","excluded","i","sourceKeys","keys","indexOf","_extends","assign","arguments","hasOwnProperty","apply","isArray","Array","baseGetTag","isObjectLike","symbolTag","value","Symbol","freeGlobal","freeSelf","self","root","Function","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","toStringTag","undefined","baseIsNative","getValue","type","$export","aFunction","toObject","fails","$sort","sort","test","P","F","comparefn","baseGet","defaultValue","result","castPath","toKey","index","isKey","stringToPath","toString","isSymbol","reIsDeepProp","reIsPlainProp","global","objectProto","nativeObjectToString","isOwn","tag","unmasked","memoizeCapped","rePropName","reEscapeChar","charCodeAt","match","number","quote","subString","memoize","MAX_MEMOIZE_SIZE","cache","size","clear","MapCache","FUNC_ERROR_TEXT","resolver","TypeError","memoized","args","has","get","set","Cache","mapCacheClear","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","Hash","ListCache","Map","hash","hashClear","hashDelete","hashGet","hashHas","hashSet","isFunction","isMasked","isObject","toSource","reIsHostCtor","funcProto","funcToString","reIsNative","RegExp","asyncTag","funcTag","genTag","proxyTag","uid","coreJsData","maskSrcKey","exec","IE_PROTO","HASH_UNDEFINED","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","assocIndexOf","splice","pop","other","getMapData","baseToString","arrayMap","INFINITY","symbolProto","symbolToString","iteratee","Const","xy","yz","xz","xyz","horizontal","vertical","identical","right","bottom_right","bottom","bottom_left","left","top_left","top","top_right","epsilon","max","Number","MAX_VALUE","min","MIN_VALUE","pi","Math","PI","two_pi","half_pi","quarter_pi","one_degree","rad_to_deg","deg_to_rad","gravity","newton","gaussian","Util_Util","[object Object]","lv","_warnLevel","pos","ArrayBuffer","isView","slice","a","p","message","defaultReturn","warnLevel","Error","range","start","floor","random","pts","stride","loopBack","st","chunks","g","concat","flattenAsGroup","arr","Pt_Group","b","op","len","k","lenB","arrays","z","callback","c","fn","step","temp","LinearAlgebra_Vec","d","Pt_Pt","sqrt","dot","magnitude","m","divide","abs","ceil","round","s","LinearAlgebra_Mat","isNum","$add","transposed","elementwise","ai","alen","$multiply","transpose","make","bi","blen","useLongest","ps","reduce","zipSlice","zip","pt","x","y","cosA","sinA","tanX","tanY","sx","sy","at","scale2DMatrix","rotate2DMatrix","shear2DMatrix","p1","p2","intercept","Op_Line","yi","ang2","atan","slope","cos","sin","_errorLength","obj","param","_errorOutofBound","anchor","angle","toAngle","xi","line","p3","threshold","$subtract","$cross","equals","magnitudeSq","asProjection","proj","$project","perpendicularFromPt","la","lb","pa","pb","y1","px","py","intersectRay2D","Num_Geom","withinBound","ray","lineOrRay","poly","sourceIsRay","intersectLineWithRay2D","intersectLine2D","next","lines1","lines2","isRay","group","lenk","_ip","gridPt","t","subtract","intersectGridWithRay2D","gg","rect","box","boundingBox","fromPtArray","Op_Rectangle","hasIntersectRect2D","intersectLines2D","sides","num","interpolate","cropAsCircle","ls","unit","multiply","fromCenter","sideIdx","graphic","atTail","perpendicular","add","$min","$max","topLeft","widthOrSize","height","fromTopLeft","center","half","within","Op_Circle","fromRect","enclose","maxValue","minValue","p0","corners","rects","merged","flatten","_center","ratio","asRows","mid","Num_Num","lerp","rect1","rect2","resetBoundingBox","r","radius","f","disc","discSqrt","t1","t2","circle","dv","dr2","dr","ar","br","ar2","br2","clone","h","ang","inc","Op_Triangle","toTriangle","fromCircle","Op_Polygon","midpoints","opp","oppositeSide","altitude","bisector","incenter","area","perimeter","total","md","medial","circumcenter","centroid","idx","closePath","sp","split","lines","gs","adjacentSides","mag","segments","det","sorted","dq","bot","hull","originIndex","_near","_item","unitAxis","n","poly1","poly2","projectAxis","ln","lineAt","info","which","dist","normal","edge","vertex","minDist","MAX_SAFE_INTEGER","axis","_axisOverlap","plen","b1","b2","c1","c2","smallest","lp","ins","intersectPolygon2D","polys","boxes","unshift","val","sum","currA","currB","targetA","targetB","normalizeValue","boundValue","radian","minPt","maxPt","average","ptOrIndex","direction","method","boundPt1","boundPt2","bounds","da","db","$cross2D","scale","scs","lenP","rotateAt2DMatrix","$take","transform2D","shearAt2DMatrix","tanx","tan","tany","mat","reflectAt2DMatrix","Float64Array","table","rad","boundAngle","toDegree","UIShape","PtBaseArray","Float32Array","super","getArgs","dimensions","randomize","fill","id","_id","w","anchorFromPt","change","params","fns","_ops","toArray","cross2D","cross","atan2","boundRadian","rotate2D","shear2D","reflect2D","p4","q1","q2","q3","q4","list","from","chunkSize","count","pts_per_segment","clamp","chunk","tc","moveBy","dim","desc","ptFn","forEachPt","Bound","_size","_topLeft","_bottomRight","_inited","init","width","_updateSize","_updateCenter","_updatePosFromTop","_updatePosFromCenter","bottomRight","depth","inited","UIPointerActions","up","down","move","drag","drop","over","out","Space_Space","bound","_time","prev","diff","end","players","playerCount","_animID","_pause","_refresh","_pointer","_isReady","_playing","player","animate","pid","animateID","resize","time","requestAnimationFrame","play","playItems","err","cancelAnimationFrame","toggle","duration","stop","context","_renderFunc","customRendering","isPlaying","outerBound","innerBound","Space_MultiTouchSpace","_pressed","_dragged","_hasMouse","_hasTouch","pointer","evt","_canvas","addEventListener","removeEventListener","_bind","bindCanvas","_mouseDown","_mouseUp","_mouseOver","_mouseOut","_mouseMove","unbindCanvas","_touchMove","ts","item","pageX","pageY","MouseEvent","v","action","changedTouches","touch","_mouseAction","Form_Form","_ready","ready","required","VisualForm","_filled","_stroked","_font","Font","filled","stroked","currentFont","groups","shape","stroke","linejoin","linecap","point","_multiple","face","weight","lineHeight","Typography_Typography","samples","distribution","avg","str","tail","trim","substr","byHeight","nh","defaultSize","Canvas_CanvasSpace","elem","_pixelScale","_autoResize","_bgcolor","_offscreen","_initialResize","_selector","Element","document","querySelector","nodeName","toLowerCase","_container","_createElement","appendChild","parentElement","body","setTimeout","_ctx","getContext","setAttribute","_resizeHandler","dispatchEvent","Event","opt","bgcolor","autoResize","retina","r1","devicePixelRatio","r2","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","offscreen","_offCanvas","_offCtx","auto","translate","playOnce","getBoundingClientRect","fromBoundingRect","pageXOffset","pageYOffset","background","bg","pixelScale","hasOffscreen","offscreenCtx","offscreenCanvas","Canvas_CanvasForm","element","parent","ctx","lastColor","fillStyle","fillRect","clearRect","save","restore","space","_style","strokeStyle","lineWidth","lineJoin","lineCap","_space","font","off","clearOffscreen","offset","drawImage","sizeOrFont","family","_estimateTextWidth","fontWidthEstimate","estimate","textWidthEstimator","measureText","truncate","getTextWidth","textAlign","_paint","beginPath","arc","startAngle","endAngle","cc","halfsize","x1","x2","y2","moveTo","lineTo","square","polygon","img","orig","original","image","txt","maxWidth","fillText","text","verticalAlign","overrideBaseline","textBaseline","_textTruncate","_textAlign","crop","lstep","nextLine","sub","buffer","newln","dt","lastIndexOf","lsize","lbox","lpad","alignment","baseline","Create_Create","subpoints","columns","rows","orientation","$divide","dx","dy","seed","np","Create_Noise","initNoise","Create_Delaunay","grad3","permTable","perm","_n","j","n00","n01","n10","n11","_fade","tx","_mesh","triangleOnly","indices","_superTriangle","opened","_circum","closed","tris","edges","circum","triangle","_dedupe","o","_cache","vs","neighborPts","cs","sortEdges","dmax","tri","_triangle","circumcircle","Color_Color","_mode","_isNorm","hex","alpha","substring","hexVal","parseInt","toMode","mode","ranges","rgb","rgba","convert","fname","toUpperCase","l","u","normalized","toNorm","mapToRange","normalize","format","_hex","normalizedInput","normalizedOutput","$normalize","hsl","q","sc","hsb","XYZtoLAB","RGBtoXYZ","lab","XYZtoRGB","LABtoXYZ","LABtoLCH","RGBtoLAB","lch","LABtoRGB","LCHtoLAB","XYZtoLUV","luv","LUVtoXYZ","pow","D65","cy","nnn","refU","refV","L","cubeY","toRadian","Dom_DOMSpace","_css","appendTo","refresh","styles","innerHTML","backgroundColor","update","HTMLSpace","Dom_HTMLForm","name","autoClass","querySelectorAll","scopeID","parentNode","removeChild","remove","removeAll","groupID","groupCount","currentID","currentClass","border-color","color","border-width","border-radius","border-style","position","fontSize","fontFamily","styleTo","group_id","nextID","updateScope","domID","setAttr","htmlElement","getID","class","rectStyle","_checkSize","textContent","Svg_SVGSpace","svgElement","Svg_SVGForm","viewBox","xmlns","version","createElementNS","stroke-width","stroke-linejoin","stroke-linecap","cx","largeArc","sweep","_poly","points","fromArray","pointer-events","Physics_World","friction","_lastTime","_gravity","_friction","_damping","_particles","_bodies","_names","_bound","fromGroup","damping","bodyCount","particleCount","ms","_updateParticles","_updateBodies","_drawParticles","_drawBodies","Physics_Body","stiff","precise","m1","mass","m2","mm","delta","distSq","changed","previous","prevDt","addForce","verlet","integrate","boundConstraint","collide","klen","bk","processBody","mlen","processParticle","processEdges","Physics_Particle","_mass","_radius","_force","_prev","_lock","force","_body","lock","_lockPt","lastDt","lt","damp","dp","np1","np2","f1","f2","dm1","dm2","_cs","_stiff","_locks","autoLink","autoMass","linkAll","index1","index2","link","nd","n2","edgeConstraint","hit","hasIntersectPolygon","cv","eg","lambda","m0","mr0","mr1","hasIntersectCircle","__webpack_exports__"],"mappings":"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","file":"16-2c0a1b97ac7ee15e1dbf.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.withPrefix = withPrefix;\nexports.navigateTo = exports.replace = exports.push = exports.navigate = exports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _router = require(\"@reach/router\");\n\nvar _gatsby = require(\"gatsby\");\n\n/*global __PATH_PREFIX__ */\nfunction withPrefix(path) {\n  return normalizePath(__PATH_PREFIX__ + \"/\" + path);\n}\n\nfunction normalizePath(path) {\n  return path.replace(/\\/+/g, \"/\");\n}\n\nvar NavLinkPropTypes = {\n  activeClassName: _propTypes.default.string,\n  activeStyle: _propTypes.default.object // Set up IntersectionObserver\n\n};\n\nvar handleIntersection = function handleIntersection(el, cb) {\n  var io = new window.IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (el === entry.target) {\n        // Check if element is within viewport, remove listener, destroy observer, and run link callback.\n        // MSEdge doesn't currently support isIntersecting, so also test for  an intersectionRatio > 0\n        if (entry.isIntersecting || entry.intersectionRatio > 0) {\n          io.unobserve(el);\n          io.disconnect();\n          cb();\n        }\n      }\n    });\n  }); // Add element to the observer\n\n  io.observe(el);\n};\n\nvar GatsbyLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(GatsbyLink, _React$Component);\n\n  function GatsbyLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this) || this; // Default to no support for IntersectionObserver\n\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"defaultGetProps\", function (_ref) {\n      var isCurrent = _ref.isCurrent;\n\n      if (isCurrent) {\n        return {\n          className: [_this.props.className, _this.props.activeClassName].filter(Boolean).join(\" \"),\n          style: (0, _extends2.default)({}, _this.props.style, _this.props.activeStyle)\n        };\n      }\n\n      return null;\n    });\n    var IOSupported = false;\n\n    if (typeof window !== \"undefined\" && window.IntersectionObserver) {\n      IOSupported = true;\n    }\n\n    _this.state = {\n      IOSupported: IOSupported\n    };\n    _this.handleRef = _this.handleRef.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n\n  var _proto = GatsbyLink.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    // Preserve non IO functionality if no support\n    if (this.props.to !== prevProps.to && !this.state.IOSupported) {\n      ___loader.enqueue((0, _gatsby.parsePath)(this.props.to).pathname);\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Preserve non IO functionality if no support\n    if (!this.state.IOSupported) {\n      ___loader.enqueue((0, _gatsby.parsePath)(this.props.to).pathname);\n    }\n  };\n\n  _proto.handleRef = function handleRef(ref) {\n    var _this2 = this;\n\n    this.props.innerRef && this.props.innerRef(ref);\n\n    if (this.state.IOSupported && ref) {\n      // If IO supported and element reference found, setup Observer functionality\n      handleIntersection(ref, function () {\n        ___loader.enqueue((0, _gatsby.parsePath)(_this2.props.to).pathname);\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props = this.props,\n        to = _this$props.to,\n        _this$props$getProps = _this$props.getProps,\n        getProps = _this$props$getProps === void 0 ? this.defaultGetProps : _this$props$getProps,\n        _onClick = _this$props.onClick,\n        _onMouseEnter = _this$props.onMouseEnter,\n        $activeClassName = _this$props.activeClassName,\n        $activeStyle = _this$props.activeStyle,\n        $ref = _this$props.ref,\n        $innerRef = _this$props.innerRef,\n        state = _this$props.state,\n        replace = _this$props.replace,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"to\", \"getProps\", \"onClick\", \"onMouseEnter\", \"activeClassName\", \"activeStyle\", \"ref\", \"innerRef\", \"state\", \"replace\"]);\n    var prefixedTo = withPrefix(to);\n    return _react.default.createElement(_router.Link, (0, _extends2.default)({\n      to: prefixedTo,\n      state: state,\n      getProps: getProps,\n      innerRef: this.handleRef,\n      onMouseEnter: function onMouseEnter(e) {\n        // eslint-disable-line\n        _onMouseEnter && _onMouseEnter(e);\n\n        ___loader.hovering((0, _gatsby.parsePath)(to).pathname);\n      },\n      onClick: function onClick(e) {\n        // eslint-disable-line\n        _onClick && _onClick(e);\n\n        if (e.button === 0 && // ignore right clicks\n        !_this3.props.target && // let browser handle \"target=_blank\"\n        !e.defaultPrevented && // onClick prevented default\n        !e.metaKey && // ignore clicks with modifier keys...\n        !e.altKey && !e.ctrlKey && !e.shiftKey) {\n          e.preventDefault(); // Make sure the necessary scripts and data are\n          // loaded before continuing.\n\n          navigate(to, {\n            state: state,\n            replace: replace\n          });\n        }\n\n        return true;\n      }\n    }, rest));\n  };\n\n  return GatsbyLink;\n}(_react.default.Component);\n\nGatsbyLink.propTypes = (0, _extends2.default)({}, NavLinkPropTypes, {\n  innerRef: _propTypes.default.func,\n  onClick: _propTypes.default.func,\n  to: _propTypes.default.string.isRequired,\n  replace: _propTypes.default.bool\n});\nvar _default = GatsbyLink;\nexports.default = _default;\n\nvar navigate = function navigate(to, options) {\n  window.___navigate(withPrefix(to), options);\n};\n\nexports.navigate = navigate;\n\nvar push = function push(to) {\n  console.warn(\"The \\\"push\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n\n  window.___push(withPrefix(to));\n};\n\nexports.push = push;\n\nvar replace = function replace(to) {\n  console.warn(\"The \\\"replace\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n\n  window.___replace(withPrefix(to));\n}; // TODO: Remove navigateTo for Gatsby v3\n\n\nexports.replace = replace;\n\nvar navigateTo = function navigateTo(to) {\n  console.warn(\"The \\\"navigateTo\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n  return push(to);\n};\n\nexports.navigateTo = navigateTo;","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","import { Group } from \"./Pt\";\nexport const Const = {\n    xy: \"xy\",\n    yz: \"yz\",\n    xz: \"xz\",\n    xyz: \"xyz\",\n    horizontal: 0,\n    vertical: 1,\n    identical: 0,\n    right: 4,\n    bottom_right: 5,\n    bottom: 6,\n    bottom_left: 7,\n    left: 8,\n    top_left: 1,\n    top: 2,\n    top_right: 3,\n    epsilon: 0.0001,\n    max: Number.MAX_VALUE,\n    min: Number.MIN_VALUE,\n    pi: Math.PI,\n    two_pi: 6.283185307179586,\n    half_pi: 1.5707963267948966,\n    quarter_pi: 0.7853981633974483,\n    one_degree: 0.017453292519943295,\n    rad_to_deg: 57.29577951308232,\n    deg_to_rad: 0.017453292519943295,\n    gravity: 9.81,\n    newton: 0.10197,\n    gaussian: 0.3989422804014327\n};\nexport class Util {\n    static warnLevel(lv) {\n        if (lv) {\n            Util._warnLevel = lv;\n        }\n        return Util._warnLevel;\n    }\n    static getArgs(args) {\n        if (args.length < 1)\n            return [];\n        let pos = [];\n        let isArray = Array.isArray(args[0]) || ArrayBuffer.isView(args[0]);\n        if (typeof args[0] === 'number') {\n            pos = Array.prototype.slice.call(args);\n        }\n        else if (typeof args[0] === 'object' && !isArray) {\n            let a = [\"x\", \"y\", \"z\", \"w\"];\n            let p = args[0];\n            for (let i = 0; i < a.length; i++) {\n                if ((p.length && i >= p.length) || !(a[i] in p))\n                    break;\n                pos.push(p[a[i]]);\n            }\n        }\n        else if (isArray) {\n            pos = [].slice.call(args[0]);\n        }\n        return pos;\n    }\n    static warn(message = \"error\", defaultReturn = undefined) {\n        if (Util.warnLevel() == \"error\") {\n            throw new Error(message);\n        }\n        else if (Util.warnLevel() == \"warn\") {\n            console.warn(message);\n        }\n        return defaultReturn;\n    }\n    static randomInt(range, start = 0) {\n        return Math.floor(Math.random() * range) + start;\n    }\n    static split(pts, size, stride, loopBack = false) {\n        let st = stride || size;\n        let chunks = [];\n        for (let i = 0; i < pts.length; i++) {\n            if (i * st + size > pts.length) {\n                if (loopBack) {\n                    let g = pts.slice(i * st);\n                    g = g.concat(pts.slice(0, (i * st + size) % size));\n                    chunks.push(g);\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                chunks.push(pts.slice(i * st, i * st + size));\n            }\n        }\n        return chunks;\n    }\n    static flatten(pts, flattenAsGroup = true) {\n        let arr = (flattenAsGroup) ? new Group() : new Array();\n        return arr.concat.apply(arr, pts);\n    }\n    static combine(a, b, op) {\n        let result = [];\n        for (let i = 0, len = a.length; i < len; i++) {\n            for (let k = 0, lenB = b.length; k < lenB; k++) {\n                result.push(op(a[i], b[k]));\n            }\n        }\n        return result;\n    }\n    static zip(arrays) {\n        let z = [];\n        for (let i = 0, len = arrays[0].length; i < len; i++) {\n            let p = [];\n            for (let k = 0; k < arrays.length; k++) {\n                p.push(arrays[k][i]);\n            }\n            z.push(p);\n        }\n        return z;\n    }\n    static stepper(max, min = 0, stride = 1, callback) {\n        let c = min;\n        return function () {\n            c += stride;\n            if (c >= max) {\n                c = min + (c - max);\n            }\n            if (callback)\n                callback(c);\n            return c;\n        };\n    }\n    static forRange(fn, range, start = 0, step = 1) {\n        let temp = [];\n        for (let i = start, len = range; i < len; i += step) {\n            temp[i] = fn(i);\n        }\n        return temp;\n    }\n}\nUtil._warnLevel = \"mute\";\n//# sourceMappingURL=Util.js.map","import { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport class Vec {\n    static add(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b[i] || 0;\n        }\n        return a;\n    }\n    static subtract(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b[i] || 0;\n        }\n        return a;\n    }\n    static multiply(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise multiply since the array lengths don't match: ${a.toString()} multiply-with ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b[i];\n        }\n        return a;\n    }\n    static divide(a, b) {\n        if (typeof b == \"number\") {\n            if (b === 0)\n                throw new Error(\"Cannot divide by zero\");\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise divide since the array lengths don't match. ${a.toString()} divide-by ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b[i];\n        }\n        return a;\n    }\n    static dot(a, b) {\n        if (a.length != b.length)\n            throw new Error(\"Array lengths don't match\");\n        let d = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            d += a[i] * b[i];\n        }\n        return d;\n    }\n    static cross2D(a, b) {\n        return a[0] * b[1] - a[1] * b[0];\n    }\n    static cross(a, b) {\n        return new Pt((a[1] * b[2] - a[2] * b[1]), (a[2] * b[0] - a[0] * b[2]), (a[0] * b[1] - a[1] * b[0]));\n    }\n    static magnitude(a) {\n        return Math.sqrt(Vec.dot(a, a));\n    }\n    static unit(a, magnitude = undefined) {\n        let m = (magnitude === undefined) ? Vec.magnitude(a) : magnitude;\n        if (m === 0)\n            throw new Error(\"Cannot calculate unit vector because magnitude is 0\");\n        return Vec.divide(a, m);\n    }\n    static abs(a) {\n        return Vec.map(a, Math.abs);\n    }\n    static floor(a) {\n        return Vec.map(a, Math.floor);\n    }\n    static ceil(a) {\n        return Vec.map(a, Math.ceil);\n    }\n    static round(a) {\n        return Vec.map(a, Math.round);\n    }\n    static max(a) {\n        let m = Number.MIN_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.max(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static min(a) {\n        let m = Number.MAX_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.min(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static sum(a) {\n        let s = 0;\n        for (let i = 0, len = a.length; i < len; i++)\n            s += a[i];\n        return s;\n    }\n    static map(a, fn) {\n        for (let i = 0, len = a.length; i < len; i++) {\n            a[i] = fn(a[i], i, a);\n        }\n        return a;\n    }\n}\nexport class Mat {\n    static add(a, b) {\n        if (typeof b != \"number\") {\n            if (a[0].length != b[0].length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n            if (a.length != b.length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n        }\n        let g = new Group();\n        let isNum = typeof b == \"number\";\n        for (let i = 0, len = a.length; i < len; i++) {\n            g.push(a[i].$add((isNum) ? b : b[i]));\n        }\n        return g;\n    }\n    static multiply(a, b, transposed = false, elementwise = false) {\n        let g = new Group();\n        if (typeof b != \"number\") {\n            if (elementwise) {\n                if (a.length != b.length)\n                    throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    g.push(a[ai].$multiply(b[ai]));\n                }\n            }\n            else {\n                if (!transposed && a[0].length != b.length)\n                    throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n                if (transposed && a[0].length != b[0].length)\n                    throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n                if (!transposed)\n                    b = Mat.transpose(b);\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    let p = Pt.make(b.length, 0);\n                    for (let bi = 0, blen = b.length; bi < blen; bi++) {\n                        p[bi] = Vec.dot(a[ai], b[bi]);\n                    }\n                    g.push(p);\n                }\n            }\n        }\n        else {\n            for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                g.push(a[ai].$multiply(b));\n            }\n        }\n        return g;\n    }\n    static zipSlice(g, index, defaultValue = false) {\n        let z = [];\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (g[i].length - 1 < index && defaultValue === false)\n                throw `Index ${index} is out of bounds`;\n            z.push(g[i][index] || defaultValue);\n        }\n        return new Pt(z);\n    }\n    static zip(g, defaultValue = false, useLongest = false) {\n        let ps = new Group();\n        let len = (useLongest) ? g.reduce((a, b) => Math.max(a, b.length), 0) : g[0].length;\n        for (let i = 0; i < len; i++) {\n            ps.push(Mat.zipSlice(g, i, defaultValue));\n        }\n        return ps;\n    }\n    static transpose(g, defaultValue = false, useLongest = false) {\n        return Mat.zip(g, defaultValue, useLongest);\n    }\n    static transform2D(pt, m) {\n        let x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n        let y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n        return new Pt(x, y);\n    }\n    static scale2DMatrix(x, y) {\n        return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n    }\n    static rotate2DMatrix(cosA, sinA) {\n        return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n    }\n    static shear2DMatrix(tanX, tanY) {\n        return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n    }\n    static translate2DMatrix(x, y) {\n        return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n    }\n    static scaleAt2DMatrix(sx, sy, at) {\n        let m = Mat.scale2DMatrix(sx, sy);\n        m[2][0] = -at[0] * sx + at[0];\n        m[2][1] = -at[1] * sy + at[1];\n        return m;\n    }\n    static rotateAt2DMatrix(cosA, sinA, at) {\n        let m = Mat.rotate2DMatrix(cosA, sinA);\n        m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n        m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n        return m;\n    }\n    static shearAt2DMatrix(tanX, tanY, at) {\n        let m = Mat.shear2DMatrix(tanX, tanY);\n        m[2][0] = -at[1] * tanY;\n        m[2][1] = -at[0] * tanX;\n        return m;\n    }\n    static reflectAt2DMatrix(p1, p2) {\n        let intercept = Line.intercept(p1, p2);\n        if (intercept == undefined) {\n            return [\n                new Pt([-1, 0, 0]),\n                new Pt([0, 1, 0]),\n                new Pt([p1[0] + p2[0], 0, 1])\n            ];\n        }\n        else {\n            let yi = intercept.yi;\n            let ang2 = Math.atan(intercept.slope) * 2;\n            let cosA = Math.cos(ang2);\n            let sinA = Math.sin(ang2);\n            return [\n                new Pt([cosA, sinA, 0]),\n                new Pt([sinA, -cosA, 0]),\n                new Pt([-yi * sinA, yi + yi * cosA, 1])\n            ];\n        }\n    }\n}\n//# sourceMappingURL=LinearAlgebra.js.map","import { Util } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Pt, Group } from \"./Pt\";\nimport { Mat } from \"./LinearAlgebra\";\nlet _errorLength = (obj, param = \"expected\") => Util.warn(\"Group's length is less than \" + param, obj);\nlet _errorOutofBound = (obj, param = \"\") => Util.warn(`Index ${param} is out of bound in Group`, obj);\nexport class Line {\n    static fromAngle(anchor, angle, magnitude) {\n        let g = new Group(new Pt(anchor), new Pt(anchor));\n        g[1].toAngle(angle, magnitude, true);\n        return g;\n    }\n    static slope(p1, p2) {\n        return (p2[0] - p1[0] === 0) ? undefined : (p2[1] - p1[1]) / (p2[0] - p1[0]);\n    }\n    static intercept(p1, p2) {\n        if (p2[0] - p1[0] === 0) {\n            return undefined;\n        }\n        else {\n            let m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\n            let c = p1[1] - m * p1[0];\n            return { slope: m, yi: c, xi: (m === 0) ? undefined : -c / m };\n        }\n    }\n    static sideOfPt2D(line, pt) {\n        return (line[1][0] - line[0][0]) * (pt[1] - line[0][1]) - (pt[0] - line[0][0]) * (line[1][1] - line[0][1]);\n    }\n    static collinear(p1, p2, p3, threshold = 0.01) {\n        let a = new Pt(0, 0, 0).to(p1).$subtract(p2);\n        let b = new Pt(0, 0, 0).to(p1).$subtract(p3);\n        return a.$cross(b).divide(1000).equals(new Pt(0, 0, 0), threshold);\n    }\n    static magnitude(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitude() : 0;\n    }\n    static magnitudeSq(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitudeSq() : 0;\n    }\n    static perpendicularFromPt(line, pt, asProjection = false) {\n        if (line[0].equals(line[1]))\n            return undefined;\n        let a = line[0].$subtract(line[1]);\n        let b = line[1].$subtract(pt);\n        let proj = b.$subtract(a.$project(b));\n        return (asProjection) ? proj : proj.$add(pt);\n    }\n    static distanceFromPt(line, pt) {\n        return Line.perpendicularFromPt(line, pt, true).magnitude();\n    }\n    static intersectRay2D(la, lb) {\n        let a = Line.intercept(la[0], la[1]);\n        let b = Line.intercept(lb[0], lb[1]);\n        let pa = la[0];\n        let pb = lb[0];\n        if (a == undefined) {\n            if (b == undefined)\n                return undefined;\n            let y1 = -b.slope * (pb[0] - pa[0]) + pb[1];\n            return new Pt(pa[0], y1);\n        }\n        else {\n            if (b == undefined) {\n                let y1 = -a.slope * (pa[0] - pb[0]) + pa[1];\n                return new Pt(pb[0], y1);\n            }\n            else if (b.slope != a.slope) {\n                let px = (a.slope * pa[0] - b.slope * pb[0] + pb[1] - pa[1]) / (a.slope - b.slope);\n                let py = a.slope * (px - pa[0]) + pa[1];\n                return new Pt(px, py);\n            }\n            else {\n                if (a.yi == b.yi) {\n                    return new Pt(pa[0], pa[1]);\n                }\n                else {\n                    return undefined;\n                }\n            }\n        }\n    }\n    static intersectLine2D(la, lb) {\n        let pt = Line.intersectRay2D(la, lb);\n        return (pt && Geom.withinBound(pt, la[0], la[1]) && Geom.withinBound(pt, lb[0], lb[1])) ? pt : undefined;\n    }\n    static intersectLineWithRay2D(line, ray) {\n        let pt = Line.intersectRay2D(line, ray);\n        return (pt && Geom.withinBound(pt, line[0], line[1])) ? pt : undefined;\n    }\n    static intersectPolygon2D(lineOrRay, poly, sourceIsRay = false) {\n        let fn = sourceIsRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        let pts = new Group();\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let next = (i === len - 1) ? 0 : i + 1;\n            let d = fn([poly[i], poly[next]], lineOrRay);\n            if (d)\n                pts.push(d);\n        }\n        return (pts.length > 0) ? pts : undefined;\n    }\n    static intersectLines2D(lines1, lines2, isRay = false) {\n        let group = new Group();\n        let fn = isRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        for (let i = 0, len = lines1.length; i < len; i++) {\n            for (let k = 0, lenk = lines2.length; k < lenk; k++) {\n                let _ip = fn(lines1[i], lines2[k]);\n                if (_ip)\n                    group.push(_ip);\n            }\n        }\n        return group;\n    }\n    static intersectGridWithRay2D(ray, gridPt) {\n        let t = Line.intercept(new Pt(ray[0]).subtract(gridPt), new Pt(ray[1]).subtract(gridPt));\n        let g = new Group();\n        if (t && t.xi)\n            g.push(new Pt(gridPt[0] + t.xi, gridPt[1]));\n        if (t && t.yi)\n            g.push(new Pt(gridPt[0], gridPt[1] + t.yi));\n        return g;\n    }\n    static intersectGridWithLine2D(line, gridPt) {\n        let g = Line.intersectGridWithRay2D(line, gridPt);\n        let gg = new Group();\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (Geom.withinBound(g[i], line[0], line[1]))\n                gg.push(g[i]);\n        }\n        return gg;\n    }\n    static intersectRect2D(line, rect) {\n        let box = Geom.boundingBox(Group.fromPtArray(line));\n        if (!Rectangle.hasIntersectRect2D(box, rect))\n            return new Group();\n        return Line.intersectLines2D([line], Rectangle.sides(rect));\n    }\n    static subpoints(line, num) {\n        let pts = new Group();\n        for (let i = 1; i <= num; i++) {\n            pts.push(Geom.interpolate(line[0], line[1], i / (num + 1)));\n        }\n        return pts;\n    }\n    static crop(line, size, index = 0, cropAsCircle = true) {\n        let tdx = (index === 0) ? 1 : 0;\n        let ls = line[tdx].$subtract(line[index]);\n        if (ls[0] === 0 || size[0] === 0)\n            return line[index];\n        if (cropAsCircle) {\n            let d = ls.unit().multiply(size[1]);\n            return line[index].$add(d);\n        }\n        else {\n            let rect = Rectangle.fromCenter(line[index], size);\n            let sides = Rectangle.sides(rect);\n            let sideIdx = 0;\n            if (Math.abs(ls[1] / ls[0]) > Math.abs(size[1] / size[0])) {\n                sideIdx = (ls[1] < 0) ? 0 : 2;\n            }\n            else {\n                sideIdx = (ls[0] < 0) ? 3 : 1;\n            }\n            return Line.intersectRay2D(sides[sideIdx], line);\n        }\n    }\n    static marker(line, size, graphic = (\"arrow\" || \"line\"), atTail = true) {\n        let h = atTail ? 0 : 1;\n        let t = atTail ? 1 : 0;\n        let unit = line[h].$subtract(line[t]);\n        if (unit.magnitudeSq() === 0)\n            return new Group();\n        unit.unit();\n        let ps = Geom.perpendicular(unit).multiply(size[0]).add(line[t]);\n        if (graphic == \"arrow\") {\n            ps.add(unit.$multiply(size[1]));\n            return new Group(line[t], ps[0], ps[1]);\n        }\n        else {\n            return new Group(ps[0], ps[1]);\n        }\n    }\n    static toRect(line) {\n        return new Group(line[0].$min(line[1]), line[0].$max(line[1]));\n    }\n}\nexport class Rectangle {\n    static from(topLeft, widthOrSize, height) {\n        return Rectangle.fromTopLeft(topLeft, widthOrSize, height);\n    }\n    static fromTopLeft(topLeft, widthOrSize, height) {\n        let size = (typeof widthOrSize == \"number\") ? [widthOrSize, (height || widthOrSize)] : widthOrSize;\n        return new Group(new Pt(topLeft), new Pt(topLeft).add(size));\n    }\n    static fromCenter(center, widthOrSize, height) {\n        let half = (typeof widthOrSize == \"number\") ? [widthOrSize / 2, (height || widthOrSize) / 2] : new Pt(widthOrSize).divide(2);\n        return new Group(new Pt(center).subtract(half), new Pt(center).add(half));\n    }\n    static toCircle(pts, within = true) {\n        return Circle.fromRect(pts, within);\n    }\n    static toSquare(pts, enclose = false) {\n        let s = Rectangle.size(pts);\n        let m = (enclose) ? s.maxValue().value : s.minValue().value;\n        return Rectangle.fromCenter(Rectangle.center(pts), m, m);\n    }\n    static size(pts) {\n        return pts[0].$max(pts[1]).subtract(pts[0].$min(pts[1]));\n    }\n    static center(pts) {\n        let min = pts[0].$min(pts[1]);\n        let max = pts[0].$max(pts[1]);\n        return min.add(max.$subtract(min).divide(2));\n    }\n    static corners(rect) {\n        let p0 = rect[0].$min(rect[1]);\n        let p2 = rect[0].$max(rect[1]);\n        return new Group(p0, new Pt(p2.x, p0.y), p2, new Pt(p0.x, p2.y));\n    }\n    static sides(rect) {\n        let [p0, p1, p2, p3] = Rectangle.corners(rect);\n        return [\n            new Group(p0, p1), new Group(p1, p2),\n            new Group(p2, p3), new Group(p3, p0)\n        ];\n    }\n    static boundingBox(rects) {\n        let merged = Util.flatten(rects, false);\n        let min = Pt.make(2, Number.MAX_VALUE);\n        let max = Pt.make(2, Number.MIN_VALUE);\n        for (let i = 0, len = merged.length; i < len; i++) {\n            for (let k = 0; k < 2; k++) {\n                min[k] = Math.min(min[k], merged[i][k]);\n                max[k] = Math.max(max[k], merged[i][k]);\n            }\n        }\n        return new Group(min, max);\n    }\n    static polygon(rect) {\n        return Rectangle.corners(rect);\n    }\n    static quadrants(rect, center) {\n        let corners = Rectangle.corners(rect);\n        let _center = (center != undefined) ? new Pt(center) : Rectangle.center(rect);\n        return corners.map((c) => new Group(c, _center).boundingBox());\n    }\n    static halves(rect, ratio = 0.5, asRows = false) {\n        let min = rect[0].$min(rect[1]);\n        let max = rect[0].$max(rect[1]);\n        let mid = (asRows) ? Num.lerp(min[1], max[1], ratio) : Num.lerp(min[0], max[0], ratio);\n        return (asRows)\n            ? [new Group(min, new Pt(max[0], mid)), new Group(new Pt(min[0], mid), max)]\n            : [new Group(min, new Pt(mid, max[1])), new Group(new Pt(mid, min[1]), max)];\n    }\n    static withinBound(rect, pt) {\n        return Geom.withinBound(pt, rect[0], rect[1]);\n    }\n    static hasIntersectRect2D(rect1, rect2, resetBoundingBox = false) {\n        if (resetBoundingBox) {\n            rect1 = Geom.boundingBox(rect1);\n            rect2 = Geom.boundingBox(rect2);\n        }\n        if (rect1[0][0] > rect2[1][0] || rect2[0][0] > rect1[1][0])\n            return false;\n        if (rect1[0][1] > rect2[1][1] || rect2[0][1] > rect1[1][1])\n            return false;\n        return true;\n    }\n    static intersectRect2D(rect1, rect2) {\n        if (!Rectangle.hasIntersectRect2D(rect1, rect2))\n            return new Group();\n        return Line.intersectLines2D(Rectangle.sides(rect1), Rectangle.sides(rect2));\n    }\n}\nexport class Circle {\n    static fromRect(pts, enclose = false) {\n        let r = 0;\n        let min = r = Rectangle.size(pts).minValue().value / 2;\n        if (enclose) {\n            let max = Rectangle.size(pts).maxValue().value / 2;\n            r = Math.sqrt(min * min + max * max);\n        }\n        else {\n            r = min;\n        }\n        return new Group(Rectangle.center(pts), new Pt(r, r));\n    }\n    static fromCenter(pt, radius) {\n        return new Group(new Pt(pt), new Pt(radius, radius));\n    }\n    static withinBound(pts, pt, threshold = 0) {\n        let d = pts[0].$subtract(pt);\n        return d.dot(d) + threshold < pts[1].x * pts[1].x;\n    }\n    static intersectRay2D(pts, ray) {\n        let d = ray[0].$subtract(ray[1]);\n        let f = pts[0].$subtract(ray[0]);\n        let a = d.dot(d);\n        let b = f.dot(d);\n        let c = f.dot(f) - pts[1].x * pts[1].x;\n        let p = b / a;\n        let q = c / a;\n        let disc = p * p - q;\n        if (disc < 0) {\n            return new Group();\n        }\n        else {\n            let discSqrt = Math.sqrt(disc);\n            let t1 = -p + discSqrt;\n            let p1 = ray[0].$subtract(d.$multiply(t1));\n            if (disc === 0)\n                return new Group(p1);\n            let t2 = -p - discSqrt;\n            let p2 = ray[0].$subtract(d.$multiply(t2));\n            return new Group(p1, p2);\n        }\n    }\n    static intersectLine2D(pts, line) {\n        let ps = Circle.intersectRay2D(pts, line);\n        let g = new Group();\n        if (ps.length > 0) {\n            for (let i = 0, len = ps.length; i < len; i++) {\n                if (Rectangle.withinBound(line, ps[i]))\n                    g.push(ps[i]);\n            }\n        }\n        return g;\n    }\n    static intersectCircle2D(pts, circle) {\n        let dv = circle[0].$subtract(pts[0]);\n        let dr2 = dv.magnitudeSq();\n        let dr = Math.sqrt(dr2);\n        let ar = pts[1].x;\n        let br = circle[1].x;\n        let ar2 = ar * ar;\n        let br2 = br * br;\n        if (dr > ar + br) {\n            return new Group();\n        }\n        else if (dr < Math.abs(ar - br)) {\n            return new Group(pts[0].clone());\n        }\n        else {\n            let a = (ar2 - br2 + dr2) / (2 * dr);\n            let h = Math.sqrt(ar2 - a * a);\n            let p = dv.$multiply(a / dr).add(pts[0]);\n            return new Group(new Pt(p.x + h * dv.y / dr, p.y - h * dv.x / dr), new Pt(p.x - h * dv.y / dr, p.y + h * dv.x / dr));\n        }\n    }\n    static intersectRect2D(pts, rect) {\n        let sides = Rectangle.sides(rect);\n        let g = [];\n        for (let i = 0, len = sides.length; i < len; i++) {\n            let ps = Circle.intersectLine2D(pts, sides[i]);\n            if (ps.length > 0)\n                g.push(ps);\n        }\n        return Util.flatten(g);\n    }\n    static toRect(pts, within = false) {\n        let r = pts[1][0];\n        if (within) {\n            let half = Math.sqrt(r * r) / 2;\n            return new Group(pts[0].$subtract(half), pts[0].$add(half));\n        }\n        else {\n            return new Group(pts[0].$subtract(r), pts[0].$add(r));\n        }\n    }\n    static toTriangle(pts, within = true) {\n        if (within) {\n            let ang = -Math.PI / 2;\n            let inc = Math.PI * 2 / 3;\n            let g = new Group();\n            for (let i = 0; i < 3; i++) {\n                g.push(pts[0].clone().toAngle(ang, pts[1][0], true));\n                ang += inc;\n            }\n            return g;\n        }\n        else {\n            return Triangle.fromCenter(pts[0], pts[1][0]);\n        }\n    }\n}\nexport class Triangle {\n    static fromRect(rect) {\n        let top = rect[0].$add(rect[1]).divide(2);\n        top.y = rect[0][1];\n        let left = rect[1].clone();\n        left.x = rect[0][0];\n        return new Group(top, rect[1].clone(), left);\n    }\n    static fromCircle(circle) {\n        return Circle.toTriangle(circle, true);\n    }\n    static fromCenter(pt, size) {\n        return Triangle.fromCircle(Circle.fromCenter(pt, size));\n    }\n    static medial(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        return Polygon.midpoints(pts, true);\n    }\n    static oppositeSide(pts, index) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (index === 0) {\n            return Group.fromPtArray([pts[1], pts[2]]);\n        }\n        else if (index === 1) {\n            return Group.fromPtArray([pts[0], pts[2]]);\n        }\n        else {\n            return Group.fromPtArray([pts[0], pts[1]]);\n        }\n    }\n    static altitude(pts, index) {\n        let opp = Triangle.oppositeSide(pts, index);\n        if (opp.length > 1) {\n            return new Group(pts[index], Line.perpendicularFromPt(opp, pts[index]));\n        }\n        else {\n            return new Group();\n        }\n    }\n    static orthocenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Triangle.altitude(pts, 0);\n        let b = Triangle.altitude(pts, 1);\n        return Line.intersectRay2D(a, b);\n    }\n    static incenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Polygon.bisector(pts, 0).add(pts[0]);\n        let b = Polygon.bisector(pts, 1).add(pts[1]);\n        return Line.intersectRay2D(new Group(pts[0], a), new Group(pts[1], b));\n    }\n    static incircle(pts, center) {\n        let c = (center) ? center : Triangle.incenter(pts);\n        let area = Polygon.area(pts);\n        let perim = Polygon.perimeter(pts, true);\n        let r = 2 * area / perim.total;\n        return Circle.fromCenter(c, r);\n    }\n    static circumcenter(pts) {\n        let md = Triangle.medial(pts);\n        let a = [md[0], Geom.perpendicular(pts[0].$subtract(md[0])).p1.$add(md[0])];\n        let b = [md[1], Geom.perpendicular(pts[1].$subtract(md[1])).p1.$add(md[1])];\n        return Line.intersectRay2D(a, b);\n    }\n    static circumcircle(pts, center) {\n        let c = (center) ? center : Triangle.circumcenter(pts);\n        let r = pts[0].$subtract(c).magnitude();\n        return Circle.fromCenter(c, r);\n    }\n}\nexport class Polygon {\n    static centroid(pts) {\n        return Geom.centroid(pts);\n    }\n    static rectangle(center, widthOrSize, height) {\n        return Rectangle.corners(Rectangle.fromCenter(center, widthOrSize, height));\n    }\n    static fromCenter(center, radius, sides) {\n        let g = new Group();\n        for (let i = 0; i < sides; i++) {\n            let ang = Math.PI * 2 * i / sides;\n            g.push(new Pt(Math.cos(ang) * radius, Math.sin(ang) * radius).add(center));\n        }\n        return g;\n    }\n    static lineAt(pts, idx) {\n        if (idx < 0 || idx >= pts.length)\n            throw new Error(\"index out of the Polygon's range\");\n        return new Group(pts[idx], (idx === pts.length - 1) ? pts[0] : pts[idx + 1]);\n    }\n    static lines(pts, closePath = true) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sp = Util.split(pts, 2, 1);\n        if (closePath)\n            sp.push(new Group(pts[pts.length - 1], pts[0]));\n        return sp.map((g) => g);\n    }\n    static midpoints(pts, closePath = false, t = 0.5) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sides = Polygon.lines(pts, closePath);\n        let mids = sides.map((s) => Geom.interpolate(s[0], s[1], t));\n        return mids;\n    }\n    static adjacentSides(pts, index, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        if (index < 0 || index >= pts.length)\n            return _errorOutofBound(new Group(), index);\n        let gs = [];\n        let left = index - 1;\n        if (closePath && left < 0)\n            left = pts.length - 1;\n        if (left >= 0)\n            gs.push(new Group(pts[index], pts[left]));\n        let right = index + 1;\n        if (closePath && right > pts.length - 1)\n            right = 0;\n        if (right <= pts.length - 1)\n            gs.push(new Group(pts[index], pts[right]));\n        return gs;\n    }\n    static bisector(pts, index) {\n        let sides = Polygon.adjacentSides(pts, index, true);\n        if (sides.length >= 2) {\n            let a = sides[0][1].$subtract(sides[0][0]).unit();\n            let b = sides[1][1].$subtract(sides[1][0]).unit();\n            return a.add(b).divide(2);\n        }\n        else {\n            return undefined;\n        }\n    }\n    static perimeter(pts, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let lines = Polygon.lines(pts, closePath);\n        let mag = 0;\n        let p = Pt.make(lines.length, 0);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            let m = Line.magnitude(lines[i]);\n            mag += m;\n            p[i] = m;\n        }\n        return {\n            total: mag,\n            segments: p\n        };\n    }\n    static area(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        let det = (a, b) => a[0] * b[1] - a[1] * b[0];\n        let area = 0;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i < pts.length - 1) {\n                area += det(pts[i], pts[i + 1]);\n            }\n            else {\n                area += det(pts[i], pts[0]);\n            }\n        }\n        return Math.abs(area / 2);\n    }\n    static convexHull(pts, sorted = false) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (!sorted) {\n            pts = pts.slice();\n            pts.sort((a, b) => a[0] - b[0]);\n        }\n        let left = (a, b, c) => {\n            return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]) > 0;\n        };\n        let dq = [];\n        let bot = pts.length - 2;\n        let top = bot + 3;\n        dq[bot] = pts[2];\n        dq[top] = pts[2];\n        if (left(pts[0], pts[1], pts[2])) {\n            dq[bot + 1] = pts[0];\n            dq[bot + 2] = pts[1];\n        }\n        else {\n            dq[bot + 1] = pts[1];\n            dq[bot + 2] = pts[0];\n        }\n        for (let i = 3, len = pts.length; i < len; i++) {\n            let pt = pts[i];\n            if (left(dq[bot], dq[bot + 1], pt) && left(dq[top - 1], dq[top], pt)) {\n                continue;\n            }\n            while (!left(dq[bot], dq[bot + 1], pt)) {\n                bot += 1;\n            }\n            bot -= 1;\n            dq[bot] = pt;\n            while (!left(dq[top - 1], dq[top], pt)) {\n                top -= 1;\n            }\n            top += 1;\n            dq[top] = pt;\n        }\n        let hull = new Group();\n        for (let h = 0; h < (top - bot); h++) {\n            hull.push(dq[bot + h]);\n        }\n        return hull;\n    }\n    static network(pts, originIndex = 0) {\n        let g = [];\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i != originIndex)\n                g.push(new Group(pts[originIndex], pts[i]));\n        }\n        return g;\n    }\n    static nearestPt(pts, pt) {\n        let _near = Number.MAX_VALUE;\n        let _item = -1;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let d = pts[i].$subtract(pt).magnitudeSq();\n            if (d < _near) {\n                _near = d;\n                _item = i;\n            }\n        }\n        return _item;\n    }\n    static projectAxis(poly, unitAxis) {\n        let dot = unitAxis.dot(poly[0]);\n        let d = new Pt(dot, dot);\n        for (let n = 1, len = poly.length; n < len; n++) {\n            dot = unitAxis.dot(poly[n]);\n            d = new Pt(Math.min(dot, d[0]), Math.max(dot, d[1]));\n        }\n        return d;\n    }\n    static _axisOverlap(poly1, poly2, unitAxis) {\n        let pa = Polygon.projectAxis(poly1, unitAxis);\n        let pb = Polygon.projectAxis(poly2, unitAxis);\n        return (pa[0] < pb[0]) ? pb[0] - pa[1] : pa[0] - pb[1];\n    }\n    static hasIntersectPoint(poly, pt) {\n        let c = false;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let ln = Polygon.lineAt(poly, i);\n            if (((ln[0][1] > pt[1]) != (ln[1][1] > pt[1])) &&\n                (pt[0] < (ln[1][0] - ln[0][0]) * (pt[1] - ln[0][1]) / (ln[1][1] - ln[0][1]) + ln[0][0])) {\n                c = !c;\n            }\n        }\n        return c;\n    }\n    static hasIntersectCircle(poly, circle) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: null,\n            edge: null,\n            vertex: null,\n        };\n        let c = circle[0];\n        let r = circle[1][0];\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let edge = Polygon.lineAt(poly, i);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let poly2 = new Group(c.$add(axis.$multiply(r)), c.$subtract(axis.$multiply(r)));\n            let dist = Polygon._axisOverlap(poly, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                let check = Rectangle.withinBound(edge, Line.perpendicularFromPt(edge, c)) || Circle.intersectLine2D(circle, edge).length > 0;\n                if (check) {\n                    info.edge = edge;\n                    info.normal = axis;\n                    minDist = Math.abs(dist);\n                    info.which = i;\n                }\n            }\n        }\n        if (!info.edge)\n            return null;\n        let dir = c.$subtract(Polygon.centroid(poly)).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        info.dist = minDist;\n        info.vertex = c;\n        return info;\n    }\n    static hasIntersectPolygon(poly1, poly2) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: new Pt(),\n            edge: new Group(),\n            vertex: new Pt()\n        };\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, plen = (poly1.length + poly2.length); i < plen; i++) {\n            let edge = (i < poly1.length) ? Polygon.lineAt(poly1, i) : Polygon.lineAt(poly2, i - poly1.length);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let dist = Polygon._axisOverlap(poly1, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                info.edge = edge;\n                info.normal = axis;\n                minDist = Math.abs(dist);\n                info.which = (i < poly1.length) ? 0 : 1;\n            }\n        }\n        info.dist = minDist;\n        let b1 = (info.which === 0) ? poly2 : poly1;\n        let b2 = (info.which === 0) ? poly1 : poly2;\n        let c1 = Polygon.centroid(b1);\n        let c2 = Polygon.centroid(b2);\n        let dir = c1.$subtract(c2).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        let smallest = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = b1.length; i < len; i++) {\n            let d = info.normal.dot(b1[i].$subtract(c2));\n            if (d < smallest) {\n                smallest = d;\n                info.vertex = b1[i];\n            }\n        }\n        return info;\n    }\n    static intersectPolygon2D(poly1, poly2) {\n        let lp = Polygon.lines(poly1);\n        let g = [];\n        for (let i = 0, len = lp.length; i < len; i++) {\n            let ins = Line.intersectPolygon2D(lp[i], poly2, false);\n            if (ins)\n                g.push(ins);\n        }\n        return Util.flatten(g, true);\n    }\n    static toRects(polys) {\n        let boxes = polys.map((g) => Geom.boundingBox(g));\n        let merged = Util.flatten(boxes, false);\n        boxes.unshift(Geom.boundingBox(merged));\n        return boxes;\n    }\n}\nexport class Curve {\n    static getSteps(steps) {\n        let ts = new Group();\n        for (let i = 0; i <= steps; i++) {\n            let t = i / steps;\n            ts.push(new Pt(t * t * t, t * t, t, 1));\n        }\n        return ts;\n    }\n    static controlPoints(pts, index = 0, copyStart = false) {\n        if (index > pts.length - 1)\n            return new Group();\n        let _index = (i) => (i < pts.length - 1) ? i : pts.length - 1;\n        let p0 = pts[index];\n        index = (copyStart) ? index : index + 1;\n        return new Group(p0, pts[_index(index++)], pts[_index(index++)], pts[_index(index++)]);\n    }\n    static _calcPt(ctrls, params) {\n        let x = ctrls.reduce((a, c, i) => a + c.x * params[i], 0);\n        let y = ctrls.reduce((a, c, i) => a + c.y * params[i], 0);\n        if (ctrls[0].length > 2) {\n            let z = ctrls.reduce((a, c, i) => a + c.z * params[i], 0);\n            return new Pt(x, y, z);\n        }\n        return new Pt(x, y);\n    }\n    static catmullRom(pts, steps = 10) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.catmullRomStep(ts[i], c));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.catmullRomStep(ts[i], cp));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static catmullRomStep(step, ctrls) {\n        let m = new Group(new Pt(-0.5, 1, -0.5, 0), new Pt(1.5, -2.5, 0, 1), new Pt(-1.5, 2, 0.5, 0), new Pt(0.5, -0.5, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static cardinal(pts, steps = 10, tension = 0.5) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.cardinalStep(ts[i], c, tension));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.cardinalStep(ts[i], cp, tension));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static cardinalStep(step, ctrls, tension = 0.5) {\n        let m = new Group(new Pt(-1, 2, -1, 0), new Pt(-1, 1, 0, 0), new Pt(1, -2, 1, 0), new Pt(1, -1, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n    static bezier(pts, steps = 10) {\n        if (pts.length < 4)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.bezierStep(ts[i], c));\n                }\n                k += 3;\n            }\n        }\n        return ps;\n    }\n    static bezierStep(step, ctrls) {\n        let m = new Group(new Pt(-1, 3, -3, 1), new Pt(3, -6, 3, 0), new Pt(-3, 3, 0, 0), new Pt(1, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bspline(pts, steps = 10, tension = 1) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                if (tension !== 1) {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineTensionStep(ts[i], c, tension));\n                    }\n                }\n                else {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineStep(ts[i], c));\n                    }\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static bsplineStep(step, ctrls) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(0.5, -1, 0, 0.6666666666666666), new Pt(-0.5, 0.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bsplineTensionStep(step, ctrls, tension = 1) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(-1.5, 2, 0, -0.3333333333333333), new Pt(1.5, -2.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n}\n//# sourceMappingURL=Op.js.map","import { Const } from \"./Util\";\nimport { Curve } from \"./Op\";\nimport { Pt, Group } from \"./Pt\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Num {\n    static equals(a, b, threshold = 0.00001) {\n        return Math.abs(a - b) < threshold;\n    }\n    static lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n    static clamp(val, min, max) {\n        return Math.max(min, Math.min(max, val));\n    }\n    static boundValue(val, min, max) {\n        let len = Math.abs(max - min);\n        let a = val % len;\n        if (a > max)\n            a -= len;\n        else if (a < min)\n            a += len;\n        return a;\n    }\n    static within(p, a, b) {\n        return p >= Math.min(a, b) && p <= Math.max(a, b);\n    }\n    static randomRange(a, b = 0) {\n        let r = (a > b) ? (a - b) : (b - a);\n        return a + Math.random() * r;\n    }\n    static normalizeValue(n, a, b) {\n        let min = Math.min(a, b);\n        let max = Math.max(a, b);\n        return (n - min) / (max - min);\n    }\n    static sum(pts) {\n        let c = new Pt(pts[0]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            Vec.add(c, pts[i]);\n        }\n        return c;\n    }\n    static average(pts) {\n        return Num.sum(pts).divide(pts.length);\n    }\n    static cycle(t) {\n        return (Math.sin(Math.PI * 2 * t) + 1) / 2;\n    }\n    static mapToRange(n, currA, currB, targetA, targetB) {\n        if (currA == currB)\n            throw new Error(\"[currMin, currMax] must define a range that is not zero\");\n        let min = Math.min(targetA, targetB);\n        let max = Math.max(targetA, targetB);\n        return Num.normalizeValue(n, currA, currB) * (max - min) + min;\n    }\n}\nexport class Geom {\n    static boundAngle(angle) {\n        return Num.boundValue(angle, 0, 360);\n    }\n    static boundRadian(radian) {\n        return Num.boundValue(radian, 0, Const.two_pi);\n    }\n    static toRadian(angle) {\n        return angle * Const.deg_to_rad;\n    }\n    static toDegree(radian) {\n        return radian * Const.rad_to_deg;\n    }\n    static boundingBox(pts) {\n        let minPt = pts.reduce((a, p) => a.$min(p));\n        let maxPt = pts.reduce((a, p) => a.$max(p));\n        return new Group(minPt, maxPt);\n    }\n    static centroid(pts) {\n        return Num.average(pts);\n    }\n    static anchor(pts, ptOrIndex = 0, direction = \"to\") {\n        let method = (direction == \"to\") ? \"subtract\" : \"add\";\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (typeof ptOrIndex == \"number\") {\n                if (ptOrIndex !== i)\n                    pts[i][method](pts[ptOrIndex]);\n            }\n            else {\n                pts[i][method](ptOrIndex);\n            }\n        }\n    }\n    static interpolate(a, b, t = 0.5) {\n        let len = Math.min(a.length, b.length);\n        let d = Pt.make(len);\n        for (let i = 0; i < len; i++) {\n            d[i] = a[i] * (1 - t) + b[i] * t;\n        }\n        return d;\n    }\n    static perpendicular(pt, axis = Const.xy) {\n        let y = axis[1];\n        let x = axis[0];\n        let p = new Pt(pt);\n        let pa = new Pt(p);\n        pa[x] = -p[y];\n        pa[y] = p[x];\n        let pb = new Pt(p);\n        pb[x] = p[y];\n        pb[y] = -p[x];\n        return new Group(pa, pb);\n    }\n    static isPerpendicular(p1, p2) {\n        return new Pt(p1).dot(p2) === 0;\n    }\n    static withinBound(pt, boundPt1, boundPt2) {\n        for (let i = 0, len = Math.min(pt.length, boundPt1.length, boundPt2.length); i < len; i++) {\n            if (!Num.within(pt[i], boundPt1[i], boundPt2[i]))\n                return false;\n        }\n        return true;\n    }\n    static sortEdges(pts) {\n        let bounds = Geom.boundingBox(pts);\n        let center = bounds[1].add(bounds[0]).divide(2);\n        let fn = (a, b) => {\n            if (a.length < 2 || b.length < 2)\n                throw new Error(\"Pt dimension cannot be less than 2\");\n            let da = a.$subtract(center);\n            let db = b.$subtract(center);\n            if (da[0] >= 0 && db[0] < 0)\n                return 1;\n            if (da[0] < 0 && db[0] >= 0)\n                return -1;\n            if (da[0] == 0 && db[0] == 0) {\n                if (da[1] >= 0 || db[1] >= 0)\n                    return (da[1] > db[1]) ? 1 : -1;\n                return (db[1] > da[1]) ? 1 : -1;\n            }\n            let det = da.$cross2D(db);\n            if (det < 0)\n                return 1;\n            if (det > 0)\n                return -1;\n            return (da[0] * da[0] + da[1] * da[1] > db[0] * db[0] + db[1] * db[1]) ? 1 : -1;\n        };\n        return pts.sort(fn);\n    }\n    static scale(ps, scale, anchor) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let scs = (typeof scale == \"number\") ? Pt.make(pts[0].length, scale) : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = pts[i];\n            for (let k = 0, lenP = p.length; k < lenP; k++) {\n                p[k] = (anchor && anchor[k]) ? anchor[k] + (p[k] - anchor[k]) * scs[k] : p[k] * scs[k];\n            }\n        }\n        return Geom;\n    }\n    static rotate2D(ps, angle, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let fn = (anchor) ? Mat.rotateAt2DMatrix : Mat.rotate2DMatrix;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(cos, sin, anchor)));\n        }\n        return Geom;\n    }\n    static shear2D(ps, scale, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let s = (typeof scale == \"number\") ? [scale, scale] : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let fn = (anchor) ? Mat.shearAt2DMatrix : Mat.shear2DMatrix;\n        let tanx = Math.tan(s[0]);\n        let tany = Math.tan(s[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(tanx, tany, anchor)));\n        }\n        return Geom;\n    }\n    static reflect2D(ps, line, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let mat = Mat.reflectAt2DMatrix(line[0], line[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, mat));\n        }\n        return Geom;\n    }\n    static cosTable() {\n        let cos = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            cos[i] = Math.cos(i * Math.PI / 180);\n        let find = (rad) => cos[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: cos, cos: find };\n    }\n    static sinTable() {\n        let sin = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            sin[i] = Math.sin(i * Math.PI / 180);\n        let find = (rad) => sin[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: sin, sin: find };\n    }\n}\nexport class Shaping {\n    static linear(t, c = 1) {\n        return c * t;\n    }\n    static quadraticIn(t, c = 1) {\n        return c * t * t;\n    }\n    static quadraticOut(t, c = 1) {\n        return -c * t * (t - 2);\n    }\n    static quadraticInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * t * t * 4 : -c / 2 * ((dt - 1) * (dt - 3) - 1);\n    }\n    static cubicIn(t, c = 1) {\n        return c * t * t * t;\n    }\n    static cubicOut(t, c = 1) {\n        let dt = t - 1;\n        return c * (dt * dt * dt + 1);\n    }\n    static cubicInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * dt * dt * dt : c / 2 * ((dt - 2) * (dt - 2) * (dt - 2) + 2);\n    }\n    static exponentialIn(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, 1 / p);\n    }\n    static exponentialOut(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, p);\n    }\n    static sineIn(t, c = 1) {\n        return -c * Math.cos(t * Const.half_pi) + c;\n    }\n    static sineOut(t, c = 1) {\n        return c * Math.sin(t * Const.half_pi);\n    }\n    static sineInOut(t, c = 1) {\n        return -c / 2 * (Math.cos(Math.PI * t) - 1);\n    }\n    static cosineApprox(t, c = 1) {\n        let t2 = t * t;\n        let t4 = t2 * t2;\n        let t6 = t4 * t2;\n        return c * (4 * t6 / 9 - 17 * t4 / 9 + 22 * t2 / 9);\n    }\n    static circularIn(t, c = 1) {\n        return -c * (Math.sqrt(1 - t * t) - 1);\n    }\n    static circularOut(t, c = 1) {\n        let dt = t - 1;\n        return c * Math.sqrt(1 - dt * dt);\n    }\n    static circularInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? -c / 2 * (Math.sqrt(1 - dt * dt) - 1) : c / 2 * (Math.sqrt(1 - (dt - 2) * (dt - 2)) + 1);\n    }\n    static elasticIn(t, c = 1, p = 0.7) {\n        let dt = t - 1;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (-Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p));\n    }\n    static elasticOut(t, c = 1, p = 0.7) {\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (Math.pow(2, -10 * t) * Math.sin((t - s) * Const.two_pi / p)) + c;\n    }\n    static elasticInOut(t, c = 1, p = 0.6) {\n        let dt = t * 2;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        if (t < 0.5) {\n            dt -= 1;\n            return c * (-0.5 * (Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p)));\n        }\n        else {\n            dt -= 1;\n            return c * (0.5 * (Math.pow(2, -10 * dt) * Math.sin((dt - s) * Const.two_pi / p))) + c;\n        }\n    }\n    static bounceIn(t, c = 1) {\n        return c - Shaping.bounceOut((1 - t), c);\n    }\n    static bounceOut(t, c = 1) {\n        if (t < (1 / 2.75)) {\n            return c * (7.5625 * t * t);\n        }\n        else if (t < (2 / 2.75)) {\n            t -= 1.5 / 2.75;\n            return c * (7.5625 * t * t + 0.75);\n        }\n        else if (t < (2.5 / 2.75)) {\n            t -= 2.25 / 2.75;\n            return c * (7.5625 * t * t + 0.9375);\n        }\n        else {\n            t -= 2.625 / 2.75;\n            return c * (7.5625 * t * t + 0.984375);\n        }\n    }\n    static bounceInOut(t, c = 1) {\n        return (t < 0.5) ? Shaping.bounceIn(t * 2, c) / 2 : Shaping.bounceOut(t * 2 - 1, c) / 2 + c / 2;\n    }\n    static sigmoid(t, c = 1, p = 10) {\n        let d = p * (t - 0.5);\n        return c / (1 + Math.exp(-d));\n    }\n    static logSigmoid(t, c = 1, p = 0.7) {\n        p = Math.max(Const.epsilon, Math.min(1 - Const.epsilon, p));\n        p = 1 / (1 - p);\n        let A = 1 / (1 + Math.exp(((t - 0.5) * p * -2)));\n        let B = 1 / (1 + Math.exp(p));\n        let C = 1 / (1 + Math.exp(-p));\n        return c * (A - B) / (C - B);\n    }\n    static seat(t, c = 1, p = 0.5) {\n        if ((t < 0.5)) {\n            return c * (Math.pow(2 * t, 1 - p)) / 2;\n        }\n        else {\n            return c * (1 - (Math.pow(2 * (1 - t), 1 - p)) / 2);\n        }\n    }\n    static quadraticBezier(t, c = 1, p = [0.05, 0.95]) {\n        let a = (typeof p != \"number\") ? p[0] : p;\n        let b = (typeof p != \"number\") ? p[1] : 0.5;\n        let om2a = 1 - 2 * a;\n        if (om2a === 0) {\n            om2a = Const.epsilon;\n        }\n        let d = (Math.sqrt(a * a + om2a * t) - a) / om2a;\n        return c * ((1 - 2 * b) * (d * d) + (2 * b) * d);\n    }\n    static cubicBezier(t, c = 1, p1 = [0.1, 0.7], p2 = [0.9, 0.2]) {\n        let curve = new Group(new Pt(0, 0), new Pt(p1), new Pt(p2), new Pt(1, 1));\n        return c * Curve.bezierStep(new Pt(t * t * t, t * t, t, 1), Curve.controlPoints(curve)).y;\n    }\n    static quadraticTarget(t, c = 1, p1 = [0.2, 0.35]) {\n        let a = Math.min(1 - Const.epsilon, Math.max(Const.epsilon, p1[0]));\n        let b = Math.min(1, Math.max(0, p1[1]));\n        let A = (1 - b) / (1 - a) - (b / a);\n        let B = (A * (a * a) - b) / a;\n        let y = A * (t * t) - B * t;\n        return c * Math.min(1, Math.max(0, y));\n    }\n    static cliff(t, c = 1, p = 0.5) {\n        return (t > p) ? c : 0;\n    }\n    static step(fn, steps, t, c, ...args) {\n        let s = 1 / steps;\n        let tt = Math.floor(t / s) * s;\n        return fn(tt, c, ...args);\n    }\n}\nexport class Range {\n    constructor(g) {\n        this._dims = 0;\n        this._source = Group.fromPtArray(g);\n        this.calc();\n    }\n    get max() { return this._max.clone(); }\n    get min() { return this._min.clone(); }\n    get magnitude() { return this._mag.clone(); }\n    calc() {\n        if (!this._source)\n            return;\n        let dims = this._source[0].length;\n        this._dims = dims;\n        let max = new Pt(dims);\n        let min = new Pt(dims);\n        let mag = new Pt(dims);\n        for (let i = 0; i < dims; i++) {\n            max[i] = Const.min;\n            min[i] = Const.max;\n            mag[i] = 0;\n            let s = this._source.zipSlice(i);\n            for (let k = 0, len = s.length; k < len; k++) {\n                max[i] = Math.max(max[i], s[k]);\n                min[i] = Math.min(min[i], s[k]);\n                mag[i] = max[i] - min[i];\n            }\n        }\n        this._max = max;\n        this._min = min;\n        this._mag = mag;\n        return this;\n    }\n    mapTo(min, max, exclude) {\n        let target = new Group();\n        for (let i = 0, len = this._source.length; i < len; i++) {\n            let g = this._source[i];\n            let n = new Pt(this._dims);\n            for (let k = 0; k < this._dims; k++) {\n                n[k] = (exclude && exclude[k]) ? g[k] : Num.mapToRange(g[k], this._min[k], this._max[k], min, max);\n            }\n            target.push(n);\n        }\n        return target;\n    }\n    append(g, update = true) {\n        if (g[0].length !== this._dims)\n            throw new Error(`Dimensions don't match. ${this._dims} dimensions in Range and ${g[0].length} provided in parameter. `);\n        this._source = this._source.concat(g);\n        if (update)\n            this.calc();\n        return this;\n    }\n    ticks(count) {\n        let g = new Group();\n        for (let i = 0; i <= count; i++) {\n            let p = new Pt(this._dims);\n            for (let k = 0, len = this._max.length; k < len; k++) {\n                p[k] = Num.lerp(this._min[k], this._max[k], i / count);\n            }\n            g.push(p);\n        }\n        return g;\n    }\n}\n//# sourceMappingURL=Num.js.map","import { Util, Const } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport var PtBaseArray = Float32Array;\nexport class Pt extends PtBaseArray {\n    constructor(...args) {\n        if (args.length === 1 && typeof args[0] == \"number\") {\n            super(args[0]);\n        }\n        else {\n            super((args.length > 0) ? Util.getArgs(args) : [0, 0]);\n        }\n    }\n    static make(dimensions, defaultValue = 0, randomize = false) {\n        let p = new PtBaseArray(dimensions);\n        if (defaultValue)\n            p.fill(defaultValue);\n        if (randomize) {\n            for (let i = 0, len = p.length; i < len; i++) {\n                p[i] = p[i] * Math.random();\n            }\n        }\n        return new Pt(p);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get x() { return this[0]; }\n    set x(n) { this[0] = n; }\n    get y() { return this[1]; }\n    set y(n) { this[1] = n; }\n    get z() { return this[2]; }\n    set z(n) { this[2] = n; }\n    get w() { return this[3]; }\n    set w(n) { this[3] = n; }\n    clone() {\n        return new Pt(this);\n    }\n    equals(p, threshold = 0.000001) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            if (Math.abs(this[i] - p[i]) > threshold)\n                return false;\n        }\n        return true;\n    }\n    to(...args) {\n        let p = Util.getArgs(args);\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            this[i] = p[i];\n        }\n        return this;\n    }\n    $to(...args) {\n        return this.clone().to(...args);\n    }\n    toAngle(radian, magnitude, anchorFromPt = false) {\n        let m = (magnitude != undefined) ? magnitude : this.magnitude();\n        let change = [Math.cos(radian) * m, Math.sin(radian) * m];\n        return (anchorFromPt) ? this.add(change) : this.to(change);\n    }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    $take(axis) {\n        let p = [];\n        for (let i = 0, len = axis.length; i < len; i++) {\n            p.push(this[axis[i]] || 0);\n        }\n        return new Pt(p);\n    }\n    $concat(...args) {\n        return new Pt(this.toArray().concat(Util.getArgs(args)));\n    }\n    add(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.add(this, args[0]) : Vec.add(this, Util.getArgs(args));\n        return this;\n    }\n    $add(...args) { return this.clone().add(...args); }\n    subtract(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.subtract(this, args[0]) : Vec.subtract(this, Util.getArgs(args));\n        return this;\n    }\n    $subtract(...args) { return this.clone().subtract(...args); }\n    multiply(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.multiply(this, args[0]) : Vec.multiply(this, Util.getArgs(args));\n        return this;\n    }\n    $multiply(...args) { return this.clone().multiply(...args); }\n    divide(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.divide(this, args[0]) : Vec.divide(this, Util.getArgs(args));\n        return this;\n    }\n    $divide(...args) { return this.clone().divide(...args); }\n    magnitudeSq() { return Vec.dot(this, this); }\n    magnitude() { return Vec.magnitude(this); }\n    unit(magnitude = undefined) {\n        Vec.unit(this, magnitude);\n        return this;\n    }\n    $unit(magnitude = undefined) { return this.clone().unit(magnitude); }\n    dot(...args) { return Vec.dot(this, Util.getArgs(args)); }\n    $cross2D(...args) { return Vec.cross2D(this, Util.getArgs(args)); }\n    $cross(...args) { return Vec.cross(this, Util.getArgs(args)); }\n    $project(...args) {\n        return this.$multiply(this.dot(...args) / this.magnitudeSq());\n    }\n    projectScalar(...args) {\n        return this.dot(...args) / this.magnitude();\n    }\n    abs() {\n        Vec.abs(this);\n        return this;\n    }\n    $abs() {\n        return this.clone().abs();\n    }\n    floor() {\n        Vec.floor(this);\n        return this;\n    }\n    $floor() {\n        return this.clone().floor();\n    }\n    ceil() {\n        Vec.ceil(this);\n        return this;\n    }\n    $ceil() {\n        return this.clone().ceil();\n    }\n    round() {\n        Vec.round(this);\n        return this;\n    }\n    $round() {\n        return this.clone().round();\n    }\n    minValue() {\n        return Vec.min(this);\n    }\n    maxValue() {\n        return Vec.max(this);\n    }\n    $min(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.min(this[i], p[i]);\n        }\n        return m;\n    }\n    $max(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.max(this[i], p[i]);\n        }\n        return m;\n    }\n    angle(axis = Const.xy) {\n        return Math.atan2(this[axis[1]], this[axis[0]]);\n    }\n    angleBetween(p, axis = Const.xy) {\n        return Geom.boundRadian(this.angle(axis)) - Geom.boundRadian(p.angle(axis));\n    }\n    scale(scale, anchor) {\n        Geom.scale(this, scale, anchor || Pt.make(this.length, 0));\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        Geom.rotate2D(this, angle, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        Geom.shear2D(this, scale, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    reflect2D(line, axis) {\n        Geom.reflect2D(this, line, axis);\n        return this;\n    }\n    toString() {\n        return `Pt(${this.join(\", \")})`;\n    }\n    toArray() {\n        return [].slice.call(this);\n    }\n}\nexport class Group extends Array {\n    constructor(...args) {\n        super(...args);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get p1() { return this[0]; }\n    get p2() { return this[1]; }\n    get p3() { return this[2]; }\n    get p4() { return this[3]; }\n    get q1() { return this[this.length - 1]; }\n    get q2() { return this[this.length - 2]; }\n    get q3() { return this[this.length - 3]; }\n    get q4() { return this[this.length - 4]; }\n    clone() {\n        let group = new Group();\n        for (let i = 0, len = this.length; i < len; i++) {\n            group.push(this[i].clone());\n        }\n        return group;\n    }\n    static fromArray(list) {\n        let g = new Group();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = (list[i] instanceof Pt) ? list[i] : new Pt(list[i]);\n            g.push(p);\n        }\n        return g;\n    }\n    static fromPtArray(list) {\n        return Group.from(list);\n    }\n    split(chunkSize, stride, loopBack = false) {\n        let sp = Util.split(this, chunkSize, stride, loopBack);\n        return sp;\n    }\n    insert(pts, index = 0) {\n        Group.prototype.splice.apply(this, [index, 0, ...pts]);\n        return this;\n    }\n    remove(index = 0, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        return Group.prototype.splice.apply(this, param);\n    }\n    segments(pts_per_segment = 2, stride = 1, loopBack = false) {\n        return this.split(pts_per_segment, stride, loopBack);\n    }\n    lines() { return this.segments(2, 1); }\n    centroid() {\n        return Geom.centroid(this);\n    }\n    boundingBox() {\n        return Geom.boundingBox(this);\n    }\n    anchorTo(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"to\"); }\n    anchorFrom(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"from\"); }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    interpolate(t) {\n        t = Num.clamp(t, 0, 1);\n        let chunk = this.length - 1;\n        let tc = 1 / (this.length - 1);\n        let idx = Math.floor(t / tc);\n        return Geom.interpolate(this[idx], this[Math.min(this.length - 1, idx + 1)], (t - idx * tc) * chunk);\n    }\n    moveBy(...args) {\n        return this.add(...args);\n    }\n    moveTo(...args) {\n        let d = new Pt(Util.getArgs(args)).subtract(this[0]);\n        this.moveBy(d);\n        return this;\n    }\n    scale(scale, anchor) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.scale(this[i], scale, anchor || this[0]);\n        }\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.rotate2D(this[i], angle, anchor || this[0], axis);\n        }\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.shear2D(this[i], scale, anchor || this[0], axis);\n        }\n        return this;\n    }\n    reflect2D(line, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.reflect2D(this[i], line, axis);\n        }\n        return this;\n    }\n    sortByDimension(dim, desc = false) {\n        return this.sort((a, b) => (desc) ? b[dim] - a[dim] : a[dim] - b[dim]);\n    }\n    forEachPt(ptFn, ...args) {\n        if (!this[0][ptFn]) {\n            Util.warn(`${ptFn} is not a function of Pt`);\n            return this;\n        }\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i] = this[i][ptFn](...args);\n        }\n        return this;\n    }\n    add(...args) {\n        return this.forEachPt(\"add\", ...args);\n    }\n    subtract(...args) {\n        return this.forEachPt(\"subtract\", ...args);\n    }\n    multiply(...args) {\n        return this.forEachPt(\"multiply\", ...args);\n    }\n    divide(...args) {\n        return this.forEachPt(\"divide\", ...args);\n    }\n    $matrixAdd(g) {\n        return Mat.add(this, g);\n    }\n    $matrixMultiply(g, transposed = false, elementwise = false) {\n        return Mat.multiply(this, g, transposed, elementwise);\n    }\n    zipSlice(index, defaultValue = false) {\n        return Mat.zipSlice(this, index, defaultValue);\n    }\n    $zip(defaultValue = undefined, useLongest = false) {\n        return Mat.zip(this, defaultValue, useLongest);\n    }\n    toString() {\n        return \"Group[ \" + this.reduce((p, c) => p + c.toString() + \" \", \"\") + \" ]\";\n    }\n}\nexport class Bound extends Group {\n    constructor(...args) {\n        super(...args);\n        this._center = new Pt();\n        this._size = new Pt();\n        this._topLeft = new Pt();\n        this._bottomRight = new Pt();\n        this._inited = false;\n        this.init();\n    }\n    static fromBoundingRect(rect) {\n        let b = new Bound(new Pt(rect.left || 0, rect.top || 0), new Pt(rect.right || 0, rect.bottom || 0));\n        if (rect.width && rect.height)\n            b.size = new Pt(rect.width, rect.height);\n        return b;\n    }\n    static fromGroup(g) {\n        if (g.length < 2)\n            throw new Error(\"Cannot create a Bound from a group that has less than 2 Pt\");\n        return new Bound(g[0], g[g.length - 1]);\n    }\n    init() {\n        if (this.p1) {\n            this._size = this.p1.clone();\n            this._inited = true;\n        }\n        if (this.p1 && this.p2) {\n            let a = this.p1;\n            let b = this.p2;\n            this.topLeft = a.$min(b);\n            this._bottomRight = a.$max(b);\n            this._updateSize();\n            this._inited = true;\n        }\n    }\n    clone() {\n        return new Bound(this._topLeft.clone(), this._bottomRight.clone());\n    }\n    _updateSize() {\n        this._size = this._bottomRight.$subtract(this._topLeft).abs();\n        this._updateCenter();\n    }\n    _updateCenter() {\n        this._center = this._size.$multiply(0.5).add(this._topLeft);\n    }\n    _updatePosFromTop() {\n        this._bottomRight = this._topLeft.$add(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromBottom() {\n        this._topLeft = this._bottomRight.$subtract(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromCenter() {\n        let half = this._size.$multiply(0.5);\n        this._topLeft = this._center.$subtract(half);\n        this._bottomRight = this._center.$add(half);\n    }\n    get size() { return new Pt(this._size); }\n    set size(p) {\n        this._size = new Pt(p);\n        this._updatePosFromTop();\n    }\n    get center() { return new Pt(this._center); }\n    set center(p) {\n        this._center = new Pt(p);\n        this._updatePosFromCenter();\n    }\n    get topLeft() { return new Pt(this._topLeft); }\n    set topLeft(p) {\n        this._topLeft = new Pt(p);\n        this[0] = this._topLeft;\n        this._updateSize();\n    }\n    get bottomRight() { return new Pt(this._bottomRight); }\n    set bottomRight(p) {\n        this._bottomRight = new Pt(p);\n        this[1] = this._bottomRight;\n        this._updateSize();\n    }\n    get width() { return (this._size.length > 0) ? this._size.x : 0; }\n    set width(w) {\n        this._size.x = w;\n        this._updatePosFromTop();\n    }\n    get height() { return (this._size.length > 1) ? this._size.y : 0; }\n    set height(h) {\n        this._size.y = h;\n        this._updatePosFromTop();\n    }\n    get depth() { return (this._size.length > 2) ? this._size.z : 0; }\n    set depth(d) {\n        this._size.z = d;\n        this._updatePosFromTop();\n    }\n    get x() { return this.topLeft.x; }\n    get y() { return this.topLeft.y; }\n    get z() { return this.topLeft.z; }\n    get inited() { return this._inited; }\n    update() {\n        this._topLeft = this[0];\n        this._bottomRight = this[1];\n        this._updateSize();\n        return this;\n    }\n}\n//# sourceMappingURL=Pt.js.map","import { Rectangle, Circle } from \"./Op\";\nexport var UIShape;\n(function (UIShape) {\n    UIShape[UIShape[\"Rectangle\"] = 0] = \"Rectangle\";\n    UIShape[UIShape[\"Circle\"] = 1] = \"Circle\";\n    UIShape[UIShape[\"Polygon\"] = 2] = \"Polygon\";\n    UIShape[UIShape[\"Polyline\"] = 3] = \"Polyline\";\n    UIShape[UIShape[\"Line\"] = 4] = \"Line\";\n})(UIShape || (UIShape = {}));\nexport const UIPointerActions = {\n    up: \"up\", down: \"down\", move: \"move\", drag: \"drag\", drop: \"drop\", over: \"over\", out: \"out\"\n};\nexport class UI {\n    constructor(group, shape, states, id) {\n        this.group = group;\n        this.shape = shape;\n        this._id = id;\n        this._states = states;\n        this._actions = {};\n    }\n    get id() { return this._id; }\n    set id(d) { this._id = d; }\n    state(key) {\n        return this._states[key] || false;\n    }\n    on(key, fn) {\n        this._actions[key] = fn;\n        return this;\n    }\n    off(key) {\n        delete this._actions[key];\n        return this;\n    }\n    listen(key, p) {\n        if (this._actions[key] !== undefined) {\n            if (this._trigger(p)) {\n                this._actions[key](p, this, key);\n                return true;\n            }\n        }\n        return false;\n    }\n    render(fn) {\n        fn(this.group, this._states);\n    }\n    _trigger(p) {\n        let fn = null;\n        if (this.shape === UIShape.Rectangle) {\n            fn = Rectangle.withinBound;\n        }\n        else if (this.shape === UIShape.Circle) {\n            fn = Circle.withinBound;\n        }\n        else if (this.shape === UIShape.Polygon) {\n            fn = Rectangle.withinBound;\n        }\n        else {\n            return false;\n        }\n        return fn(this.group, p);\n    }\n}\nexport class UIButton extends UI {\n    constructor(group, shape, states, id) {\n        super(group, shape, states, id);\n        this._clicks = 0;\n    }\n    get clicks() { return this._clicks; }\n    onClick(fn) {\n        this._clicks++;\n        this.on(UIPointerActions.up, fn);\n    }\n    onHover(over, out) {\n        this.on(UIPointerActions.over, over);\n        this.on(UIPointerActions.out, out);\n    }\n}\n//# sourceMappingURL=UI.js.map","import { Pt, Bound } from \"./Pt\";\nimport { UIPointerActions as UIA } from \"./UI\";\nexport class Space {\n    constructor() {\n        this.id = \"space\";\n        this.bound = new Bound();\n        this._time = { prev: 0, diff: 0, end: -1 };\n        this.players = {};\n        this.playerCount = 0;\n        this._animID = -1;\n        this._pause = false;\n        this._refresh = undefined;\n        this._pointer = new Pt();\n        this._isReady = false;\n        this._playing = false;\n    }\n    refresh(b) {\n        this._refresh = b;\n        return this;\n    }\n    add(p) {\n        let player = (typeof p == \"function\") ? { animate: p } : p;\n        let k = this.playerCount++;\n        let pid = this.id + k;\n        this.players[pid] = player;\n        player.animateID = pid;\n        if (player.resize && this.bound.inited)\n            player.resize(this.bound);\n        if (this._refresh === undefined)\n            this._refresh = true;\n        return this;\n    }\n    remove(player) {\n        delete this.players[player.animateID];\n        return this;\n    }\n    removeAll() {\n        this.players = {};\n        return this;\n    }\n    play(time = 0) {\n        this._animID = requestAnimationFrame(this.play.bind(this));\n        if (this._pause)\n            return this;\n        this._time.diff = time - this._time.prev;\n        this._time.prev = time;\n        try {\n            this.playItems(time);\n        }\n        catch (err) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n            throw err;\n        }\n        return this;\n    }\n    replay() {\n        this._time.end = -1;\n        this.play();\n    }\n    playItems(time) {\n        this._playing = true;\n        if (this._refresh)\n            this.clear();\n        if (this._isReady) {\n            for (let k in this.players) {\n                if (this.players[k].animate)\n                    this.players[k].animate(time, this._time.diff, this);\n            }\n        }\n        if (this._time.end >= 0 && time > this._time.end) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n        }\n    }\n    pause(toggle = false) {\n        this._pause = (toggle) ? !this._pause : true;\n        return this;\n    }\n    resume() {\n        this._pause = false;\n        return this;\n    }\n    stop(t = 0) {\n        this._time.end = t;\n        return this;\n    }\n    playOnce(duration = 5000) {\n        this.play();\n        this.stop(duration);\n        return this;\n    }\n    render(context) {\n        if (this._renderFunc)\n            this._renderFunc(context, this);\n        return this;\n    }\n    set customRendering(f) { this._renderFunc = f; }\n    get customRendering() { return this._renderFunc; }\n    get isPlaying() { return this._playing; }\n    get outerBound() { return this.bound.clone(); }\n    get innerBound() { return new Bound(Pt.make(this.size.length, 0), this.size.clone()); }\n    get size() { return this.bound.size.clone(); }\n    get center() { return this.size.divide(2); }\n    get width() { return this.bound.width; }\n    get height() { return this.bound.height; }\n}\nexport class MultiTouchSpace extends Space {\n    constructor() {\n        super(...arguments);\n        this._pressed = false;\n        this._dragged = false;\n        this._hasMouse = false;\n        this._hasTouch = false;\n    }\n    get pointer() {\n        let p = this._pointer.clone();\n        p.id = this._pointer.id;\n        return p;\n    }\n    bindCanvas(evt, callback) {\n        this._canvas.addEventListener(evt, callback);\n    }\n    unbindCanvas(evt, callback) {\n        this._canvas.removeEventListener(evt, callback);\n    }\n    bindMouse(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.bindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.bindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.bindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.bindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = true;\n        }\n        else {\n            this.unbindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.unbindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.unbindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = false;\n        }\n        return this;\n    }\n    bindTouch(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.bindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.bindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.bindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = true;\n        }\n        else {\n            this.unbindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.unbindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = false;\n        }\n        return this;\n    }\n    touchesToPoints(evt, which = \"touches\") {\n        if (!evt || !evt[which])\n            return [];\n        let ts = [];\n        for (var i = 0; i < evt[which].length; i++) {\n            let t = evt[which].item(i);\n            ts.push(new Pt(t.pageX - this.bound.topLeft.x, t.pageY - this.bound.topLeft.y));\n        }\n        return ts;\n    }\n    _mouseAction(type, evt) {\n        let px = 0, py = 0;\n        if (evt instanceof MouseEvent) {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    px = evt.pageX - this.outerBound.x;\n                    py = evt.pageY - this.outerBound.y;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        else {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    let c = evt.changedTouches && evt.changedTouches.length > 0;\n                    let touch = evt.changedTouches.item(0);\n                    px = (c) ? touch.pageX - this.outerBound.x : 0;\n                    py = (c) ? touch.pageY - this.outerBound.y : 0;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        if (type) {\n            this._pointer.to(px, py);\n            this._pointer.id = type;\n        }\n    }\n    _mouseDown(evt) {\n        this._mouseAction(UIA.down, evt);\n        this._pressed = true;\n        return false;\n    }\n    _mouseUp(evt) {\n        this._mouseAction(UIA.up, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.down, evt);\n        this._pressed = false;\n        this._dragged = false;\n        return false;\n    }\n    _mouseMove(evt) {\n        this._mouseAction(UIA.move, evt);\n        if (this._pressed) {\n            this._dragged = true;\n            this._mouseAction(UIA.drag, evt);\n        }\n        return false;\n    }\n    _mouseOver(evt) {\n        this._mouseAction(UIA.over, evt);\n        return false;\n    }\n    _mouseOut(evt) {\n        this._mouseAction(UIA.out, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.drop, evt);\n        this._dragged = false;\n        return false;\n    }\n    _touchMove(evt) {\n        this._mouseMove(evt);\n        evt.preventDefault();\n        return false;\n    }\n}\n//# sourceMappingURL=Space.js.map","import { Util } from \"./Util\";\nexport class Form {\n    constructor() {\n        this._ready = false;\n    }\n    get ready() { return this._ready; }\n    static _checkSize(pts, required = 2) {\n        if (pts.length < required) {\n            Util.warn(\"Requires 2 or more Pts in this Group.\");\n            return false;\n        }\n        return true;\n    }\n}\nexport class VisualForm extends Form {\n    constructor() {\n        super(...arguments);\n        this._filled = true;\n        this._stroked = true;\n        this._font = new Font(14, \"sans-serif\");\n    }\n    get filled() { return this._filled; }\n    set filled(b) { this._filled = b; }\n    get stroked() { return this._stroked; }\n    set stroked(b) { this._stroked = b; }\n    get currentFont() { return this._font; }\n    _multiple(groups, shape, ...rest) {\n        if (!groups)\n            return this;\n        for (let i = 0, len = groups.length; i < len; i++) {\n            this[shape](groups[i], ...rest);\n        }\n        return this;\n    }\n    fill(c) {\n        return this;\n    }\n    fillOnly(c) {\n        this.stroke(false);\n        return this.fill(c);\n    }\n    stroke(c, width, linejoin, linecap) {\n        return this;\n    }\n    strokeOnly(c, width, linejoin, linecap) {\n        this.fill(false);\n        return this.stroke(c, width, linejoin, linecap);\n    }\n    points(pts, radius, shape) {\n        if (!pts)\n            return;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            this.point(pts[i], radius, shape);\n        }\n        return this;\n    }\n    circles(groups) {\n        return this._multiple(groups, \"circle\");\n    }\n    squares(groups) {\n        return this._multiple(groups, \"square\");\n    }\n    lines(groups) {\n        return this._multiple(groups, \"line\");\n    }\n    polygons(groups) {\n        return this._multiple(groups, \"polygon\");\n    }\n    rects(groups) {\n        return this._multiple(groups, \"rect\");\n    }\n}\nexport class Font {\n    constructor(size = 12, face = \"sans-serif\", weight = \"\", style = \"\", lineHeight = 1.5) {\n        this.size = size;\n        this.face = face;\n        this.style = style;\n        this.weight = weight;\n        this.lineHeight = lineHeight;\n    }\n    get value() { return `${this.style} ${this.weight} ${this.size}px/${this.lineHeight} ${this.face}`; }\n    toString() { return this.value; }\n}\n//# sourceMappingURL=Form.js.map","import { Pt } from \"./Pt\";\nexport class Typography {\n    static textWidthEstimator(fn, samples = [\"M\", \"n\", \".\"], distribution = [0.06, 0.8, 0.14]) {\n        let m = samples.map(fn);\n        let avg = new Pt(distribution).dot(m);\n        return (str) => str.length * avg;\n    }\n    static truncate(fn, str, width, tail = \"\") {\n        let trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n        if (trim < str.length) {\n            trim = Math.max(0, trim - tail.length);\n            return [str.substr(0, trim) + tail, trim];\n        }\n        else {\n            return [str, str.length];\n        }\n    }\n    static fontSizeToBox(box, ratio = 1, byHeight = true) {\n        let i = byHeight ? 1 : 0;\n        let h = (box[1][i] - box[0][i]);\n        let f = ratio * h;\n        return function (b) {\n            let nh = (b[1][i] - b[0][i]) / h;\n            return f * nh;\n        };\n    }\n    static fontSizeToThreshold(threshold, direction = 0) {\n        return function (defaultSize, val) {\n            let d = defaultSize * val / threshold;\n            if (direction < 0)\n                return Math.min(d, defaultSize);\n            if (direction > 0)\n                return Math.max(d, defaultSize);\n            return d;\n        };\n    }\n}\n//# sourceMappingURL=Typography.js.map","import { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Pt, Group, Bound } from \"./Pt\";\nimport { Const } from \"./Util\";\nimport { Typography as Typo } from \"./Typography\";\nimport { Rectangle } from './Op';\nexport class CanvasSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this._pixelScale = 1;\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._offscreen = false;\n        this._initialResize = false;\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pt\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            let id = elem;\n            id = (elem[0] === \"#\" || elem[0] === \".\") ? elem : \"#\" + elem;\n            _selector = document.querySelector(id);\n            _existed = true;\n            this.id = id.substr(1);\n        }\n        if (!_selector) {\n            this._container = this._createElement(\"div\", this.id + \"_container\");\n            this._canvas = this._createElement(\"canvas\", this.id);\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else if (_selector.nodeName.toLowerCase() != \"canvas\") {\n            this._container = _selector;\n            this._canvas = this._createElement(\"canvas\", this.id + \"_canvas\");\n            this._container.appendChild(this._canvas);\n            this._initialResize = true;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n            this._autoResize = false;\n        }\n        setTimeout(this._ready.bind(this, callback), 100);\n        this._ctx = this._canvas.getContext('2d');\n    }\n    _createElement(elem = \"div\", id) {\n        let d = document.createElement(elem);\n        d.setAttribute(\"id\", id);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this._initialResize = false;\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor)\n            this._bgcolor = opt.bgcolor;\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        if (opt.retina !== false) {\n            let r1 = window.devicePixelRatio || 1;\n            let r2 = this._ctx.webkitBackingStorePixelRatio || this._ctx.mozBackingStorePixelRatio || this._ctx.msBackingStorePixelRatio || this._ctx.oBackingStorePixelRatio || this._ctx.backingStorePixelRatio || 1;\n            this._pixelScale = Math.max(1, r1 / r2);\n        }\n        if (opt.offscreen) {\n            this._offscreen = true;\n            this._offCanvas = this._createElement(\"canvas\", this.id + \"_offscreen\");\n            this._offCtx = this._offCanvas.getContext('2d');\n        }\n        else {\n            this._offscreen = false;\n        }\n        return this;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this._canvas.width = this.bound.size.x * this._pixelScale;\n        this._canvas.height = this.bound.size.y * this._pixelScale;\n        this._canvas.style.width = Math.floor(this.bound.size.x) + \"px\";\n        this._canvas.style.height = Math.floor(this.bound.size.y) + \"px\";\n        if (this._offscreen) {\n            this._offCanvas.width = this.bound.size.x * this._pixelScale;\n            this._offCanvas.height = this.bound.size.y * this._pixelScale;\n        }\n        if (this._pixelScale != 1) {\n            this._ctx.scale(this._pixelScale, this._pixelScale);\n            this._ctx.translate(0.5, 0.5);\n            if (this._offscreen) {\n                this._offCtx.scale(this._pixelScale, this._pixelScale);\n                this._offCtx.translate(0.5, 0.5);\n            }\n        }\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        this.render(this._ctx);\n        if (evt && !this.isPlaying)\n            this.playOnce(0);\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = (this._autoResize || this._initialResize) ? this._container.getBoundingClientRect() : this._canvas.getBoundingClientRect();\n        if (b) {\n            let box = Bound.fromBoundingRect(b);\n            box.center = box.center.add(window.pageXOffset, window.pageYOffset);\n            this.resize(box, evt);\n        }\n    }\n    set background(bg) { this._bgcolor = bg; }\n    get background() { return this._bgcolor; }\n    get pixelScale() {\n        return this._pixelScale;\n    }\n    get hasOffscreen() {\n        return this._offscreen;\n    }\n    get offscreenCtx() { return this._offCtx; }\n    get offscreenCanvas() { return this._offCanvas; }\n    getForm() { return new CanvasForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() {\n        return this._isReady;\n    }\n    get ctx() { return this._ctx; }\n    clear(bg) {\n        if (bg)\n            this._bgcolor = bg;\n        let lastColor = this._ctx.fillStyle;\n        if (this._bgcolor && this._bgcolor != \"transparent\") {\n            this._ctx.fillStyle = this._bgcolor;\n            this._ctx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        else {\n            this._ctx.clearRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        this._ctx.fillStyle = lastColor;\n        return this;\n    }\n    clearOffscreen(bg) {\n        if (this._offscreen) {\n            if (bg) {\n                this._offCtx.fillStyle = bg;\n                this._offCtx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n            }\n            else {\n                this._offCtx.clearRect(-1, -1, this._offCanvas.width + 1, this._offCanvas.height + 1);\n            }\n        }\n        return this;\n    }\n    playItems(time) {\n        if (this._isReady) {\n            this._ctx.save();\n            if (this._offscreen)\n                this._offCtx.save();\n            super.playItems(time);\n            this._ctx.restore();\n            if (this._offscreen)\n                this._offCtx.restore();\n            this.render(this._ctx);\n        }\n    }\n}\nexport class CanvasForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._style = {\n            fillStyle: \"#f03\", strokeStyle: \"#fff\",\n            lineWidth: 1, lineJoin: \"bevel\", lineCap: \"butt\",\n        };\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx = this._space.ctx;\n                this._ctx.fillStyle = this._style.fillStyle;\n                this._ctx.strokeStyle = this._style.strokeStyle;\n                this._ctx.lineJoin = \"bevel\";\n                this._ctx.font = this._font.value;\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    useOffscreen(off = true, clear = false) {\n        if (clear)\n            this._space.clearOffscreen((typeof clear == \"string\") ? clear : null);\n        this._ctx = (this._space.hasOffscreen && off) ? this._space.offscreenCtx : this._space.ctx;\n        return this;\n    }\n    renderOffscreen(offset = [0, 0]) {\n        if (this._space.hasOffscreen) {\n            this._space.ctx.drawImage(this._space.offscreenCanvas, offset[0], offset[1], this._space.width, this._space.height);\n        }\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.filled = c;\n        }\n        else {\n            this.filled = true;\n            this._style.fillStyle = c;\n            this._ctx.fillStyle = c;\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.stroked = c;\n        }\n        else {\n            this.stroked = true;\n            this._style.strokeStyle = c;\n            this._ctx.strokeStyle = c;\n            if (width) {\n                this._ctx.lineWidth = width;\n                this._style.lineWidth = width;\n            }\n            if (linejoin) {\n                this._ctx.lineJoin = linejoin;\n                this._style.lineJoin = linejoin;\n            }\n            if (linecap) {\n                this._ctx.lineCap = linecap;\n                this._style.lineCap = linecap;\n            }\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        if (this._estimateTextWidth)\n            this.fontWidthEstimate(true);\n        return this;\n    }\n    fontWidthEstimate(estimate = true) {\n        this._estimateTextWidth = (estimate) ? Typo.textWidthEstimator(((c) => this._ctx.measureText(c).width)) : undefined;\n        return this;\n    }\n    getTextWidth(c) {\n        return (!this._estimateTextWidth) ? this._ctx.measureText(c + \" .\").width : this._estimateTextWidth(c);\n    }\n    _textTruncate(str, width, tail = \"\") {\n        return Typo.truncate(this.getTextWidth.bind(this), str, width, tail);\n    }\n    _textAlign(box, vertical, offset, center) {\n        if (!center)\n            center = Rectangle.center(box);\n        var px = box[0][0];\n        if (this._ctx.textAlign == \"end\" || this._ctx.textAlign == \"right\") {\n            px = box[1][0];\n        }\n        else if (this._ctx.textAlign == \"center\" || this._ctx.textAlign == \"middle\") {\n            px = center[0];\n        }\n        var py = center[1];\n        if (vertical == \"top\" || vertical == \"start\") {\n            py = box[0][1];\n        }\n        else if (vertical == \"end\" || vertical == \"bottom\") {\n            py = box[1][1];\n        }\n        return (offset) ? new Pt(px + offset[0], py + offset[1]) : new Pt(px, py);\n    }\n    reset() {\n        for (let k in this._style) {\n            if (this._style.hasOwnProperty(k)) {\n                this._ctx[k] = this._style[k];\n            }\n        }\n        this._font = new Font();\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    _paint() {\n        if (this._filled)\n            this._ctx.fill();\n        if (this._stroked)\n            this._ctx.stroke();\n    }\n    point(p, radius = 5, shape = \"square\") {\n        if (!p)\n            return;\n        if (!CanvasForm[shape])\n            throw new Error(`${shape} is not a static function of CanvasForm`);\n        CanvasForm[shape](this._ctx, p, radius);\n        this._paint();\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, 0, Const.two_pi, false);\n        ctx.closePath();\n    }\n    circle(pts) {\n        CanvasForm.circle(this._ctx, pts[0], pts[1][0]);\n        this._paint();\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, startAngle, endAngle, cc);\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        CanvasForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        this._paint();\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        if (!pt)\n            return;\n        let x1 = pt[0] - halfsize;\n        let y1 = pt[1] - halfsize;\n        let x2 = pt[0] + halfsize;\n        let y2 = pt[1] + halfsize;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x1, y2);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x2, y1);\n        ctx.closePath();\n    }\n    square(pt, halfsize) {\n        CanvasForm.square(this._ctx, pt, halfsize);\n        this._paint();\n        return this;\n    }\n    static line(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n    }\n    line(pts) {\n        CanvasForm.line(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static polygon(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n        ctx.closePath();\n    }\n    polygon(pts) {\n        CanvasForm.polygon(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        ctx.lineTo(pts[0][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[0][1]);\n        ctx.closePath();\n    }\n    rect(pts) {\n        CanvasForm.rect(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static image(ctx, img, target = new Pt(), orig) {\n        if (typeof target[0] === \"number\") {\n            ctx.drawImage(img, target[0], target[1]);\n        }\n        else {\n            let t = target;\n            if (orig) {\n                ctx.drawImage(img, orig[0][0], orig[0][1], orig[1][0] - orig[0][0], orig[1][1] - orig[0][1], t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n            else {\n                ctx.drawImage(img, t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n        }\n    }\n    image(img, target, original) {\n        CanvasForm.image(this._ctx, img, target, original);\n        return this;\n    }\n    static text(ctx, pt, txt, maxWidth) {\n        if (!pt)\n            return;\n        ctx.fillText(txt, pt[0], pt[1], maxWidth);\n    }\n    text(pt, txt, maxWidth) {\n        CanvasForm.text(this._ctx, pt, txt, maxWidth);\n        return this;\n    }\n    textBox(box, txt, verticalAlign = \"middle\", tail = \"\", overrideBaseline = true) {\n        if (overrideBaseline)\n            this._ctx.textBaseline = verticalAlign;\n        let size = Rectangle.size(box);\n        let t = this._textTruncate(txt, size[0], tail);\n        this.text(this._textAlign(box, verticalAlign), t[0]);\n        return this;\n    }\n    paragraphBox(box, txt, lineHeight = 1.2, verticalAlign = \"top\", crop = true) {\n        let size = Rectangle.size(box);\n        this._ctx.textBaseline = \"top\";\n        let lstep = this._font.size * lineHeight;\n        let nextLine = (sub, buffer = [], cc = 0) => {\n            if (!sub)\n                return buffer;\n            if (crop && cc * lstep > size[1] - lstep * 2)\n                return buffer;\n            if (cc > 10000)\n                throw new Error(\"max recursion reached (10000)\");\n            let t = this._textTruncate(sub, size[0], \"\");\n            let newln = t[0].indexOf(\"\\n\");\n            if (newln >= 0) {\n                buffer.push(t[0].substr(0, newln));\n                return nextLine(sub.substr(newln + 1), buffer, cc + 1);\n            }\n            let dt = t[0].lastIndexOf(\" \") + 1;\n            if (dt <= 0 || t[1] === sub.length)\n                dt = undefined;\n            let line = t[0].substr(0, dt);\n            buffer.push(line);\n            return (t[1] <= 0 || t[1] === sub.length) ? buffer : nextLine(sub.substr((dt || t[1])), buffer, cc + 1);\n        };\n        let lines = nextLine(txt);\n        let lsize = lines.length * lstep;\n        let lbox = box;\n        if (verticalAlign == \"middle\" || verticalAlign == \"center\") {\n            let lpad = (size[1] - lsize) / 2;\n            if (crop)\n                lpad = Math.max(0, lpad);\n            lbox = new Group(box[0].$add(0, lpad), box[1].$subtract(0, lpad));\n        }\n        else if (verticalAlign == \"bottom\") {\n            lbox = new Group(box[0].$add(0, size[1] - lsize), box[1]);\n        }\n        else {\n            lbox = new Group(box[0], box[0].$add(size[0], lsize));\n        }\n        let center = Rectangle.center(lbox);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            this.text(this._textAlign(lbox, \"top\", [0, i * lstep], center), lines[i]);\n        }\n        return this;\n    }\n    alignText(alignment = \"left\", baseline = \"alphabetic\") {\n        if (baseline == \"center\")\n            baseline = \"middle\";\n        if (baseline == \"baseline\")\n            baseline = \"alphabetic\";\n        this._ctx.textAlign = alignment;\n        this._ctx.textBaseline = baseline;\n        return this;\n    }\n    log(txt) {\n        let w = this._ctx.measureText(txt).width + 20;\n        this.stroke(false).fill(\"rgba(0,0,0,.4)\").rect([[0, 0], [w, 20]]);\n        this.fill(\"#fff\").text([10, 14], txt);\n        return this;\n    }\n}\n//# sourceMappingURL=Canvas.js.map","import { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport class Create {\n    static distributeRandom(bound, count, dimensions = 2) {\n        let pts = new Group();\n        for (let i = 0; i < count; i++) {\n            let p = [bound.x + Math.random() * bound.width];\n            if (dimensions > 1)\n                p.push(bound.y + Math.random() * bound.height);\n            if (dimensions > 2)\n                p.push(bound.z + Math.random() * bound.depth);\n            pts.push(new Pt(p));\n        }\n        return pts;\n    }\n    static distributeLinear(line, count) {\n        let ln = Line.subpoints(line, count - 2);\n        ln.unshift(line[0]);\n        ln.push(line[line.length - 1]);\n        return ln;\n    }\n    static gridPts(bound, columns, rows, orientation = [0.5, 0.5]) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).$divide(columns, rows);\n        let offset = unit.$multiply(orientation);\n        let g = new Group();\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n            }\n        }\n        return g;\n    }\n    static gridCells(bound, columns, rows) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).divide(columns, rows);\n        let g = [];\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n            }\n        }\n        return g;\n    }\n    static radialPts(center, radius, count) {\n        let g = new Group();\n        let a = Const.two_pi / count;\n        for (let i = 0; i < count; i++) {\n            g.push(new Pt(center).toAngle(a * i - Const.half_pi, radius, true));\n        }\n        return g;\n    }\n    static noisePts(pts, dx = 0.01, dy = 0.01, rows = 0, columns = 0) {\n        let seed = Math.random();\n        let g = new Group();\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let np = new Noise(pts[i]);\n            let r = (rows && rows > 0) ? Math.floor(i / rows) : i;\n            let c = (columns && columns > 0) ? i % columns : i;\n            np.initNoise(dx * c, dy * r);\n            np.seed(seed);\n            g.push(np);\n        }\n        return g;\n    }\n    static delaunay(pts) {\n        return Delaunay.from(pts);\n    }\n}\nconst grad3 = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n];\nconst permTable = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\nexport class Noise extends Pt {\n    constructor(...args) {\n        super(...args);\n        this.perm = [];\n        this._n = new Pt(0.01, 0.01);\n        this.perm = permTable.concat(permTable);\n    }\n    initNoise(...args) {\n        this._n = new Pt(...args);\n    }\n    step(x = 0, y = 0) {\n        this._n.add(x, y);\n    }\n    seed(s) {\n        if (s > 0 && s < 1)\n            s *= 65536;\n        s = Math.floor(s);\n        if (s < 256)\n            s |= s << 8;\n        for (let i = 0; i < 255; i++) {\n            let v = (i & 1) ? permTable[i] ^ (s & 255) : permTable[i] ^ ((s >> 8) & 255);\n            this.perm[i] = this.perm[i + 256] = v;\n        }\n    }\n    noise2D() {\n        let i = Math.max(0, Math.floor(this._n[0])) % 255;\n        let j = Math.max(0, Math.floor(this._n[1])) % 255;\n        let x = (this._n[0] % 255) - i;\n        let y = (this._n[1] % 255) - j;\n        let n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n        let n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n        let n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n        let n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n        let _fade = (f) => f * f * f * (f * (f * 6 - 15) + 10);\n        let tx = _fade(x);\n        return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n    }\n}\nexport class Delaunay extends Group {\n    constructor() {\n        super(...arguments);\n        this._mesh = [];\n    }\n    delaunay(triangleOnly = true) {\n        if (this.length < 3)\n            return [];\n        this._mesh = [];\n        let n = this.length;\n        let indices = [];\n        for (let i = 0; i < n; i++)\n            indices[i] = i;\n        indices.sort((i, j) => this[j][0] - this[i][0]);\n        let pts = this.slice();\n        let st = this._superTriangle();\n        pts = pts.concat(st);\n        let opened = [this._circum(n, n + 1, n + 2, st)];\n        let closed = [];\n        let tris = [];\n        for (let i = 0, len = indices.length; i < len; i++) {\n            let c = indices[i];\n            let edges = [];\n            let j = opened.length;\n            if (!this._mesh[c])\n                this._mesh[c] = {};\n            while (j--) {\n                let circum = opened[j];\n                let radius = circum.circle[1][0];\n                let d = pts[c].$subtract(circum.circle[0]);\n                if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n                    closed.push(circum);\n                    tris.push(circum.triangle);\n                    opened.splice(j, 1);\n                    continue;\n                }\n                if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n                    continue;\n                }\n                edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n                opened.splice(j, 1);\n            }\n            Delaunay._dedupe(edges);\n            j = edges.length;\n            while (j > 1) {\n                opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n            }\n        }\n        for (let i = 0, len = opened.length; i < len; i++) {\n            let o = opened[i];\n            if (o.i < n && o.j < n && o.k < n) {\n                closed.push(o);\n                tris.push(o.triangle);\n                this._cache(o);\n            }\n        }\n        return (triangleOnly) ? tris : closed;\n    }\n    voronoi() {\n        let vs = [];\n        let n = this._mesh;\n        for (let i = 0, len = n.length; i < len; i++) {\n            vs.push(this.neighborPts(i, true));\n        }\n        return vs;\n    }\n    mesh() {\n        return this._mesh;\n    }\n    neighborPts(i, sort = false) {\n        let cs = new Group();\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k].circle[0]);\n        }\n        return (sort) ? Geom.sortEdges(cs) : cs;\n    }\n    neighbors(i) {\n        let cs = [];\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k]);\n        }\n        return cs;\n    }\n    _cache(o) {\n        this._mesh[o.i][`${Math.min(o.j, o.k)}-${Math.max(o.j, o.k)}`] = o;\n        this._mesh[o.j][`${Math.min(o.i, o.k)}-${Math.max(o.i, o.k)}`] = o;\n        this._mesh[o.k][`${Math.min(o.i, o.j)}-${Math.max(o.i, o.j)}`] = o;\n    }\n    _superTriangle() {\n        let minPt = this[0];\n        let maxPt = this[0];\n        for (let i = 1, len = this.length; i < len; i++) {\n            minPt = minPt.$min(this[i]);\n            maxPt = maxPt.$max(this[i]);\n        }\n        let d = maxPt.$subtract(minPt);\n        let mid = minPt.$add(maxPt).divide(2);\n        let dmax = Math.max(d[0], d[1]);\n        return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n    }\n    _triangle(i, j, k, pts = this) {\n        return new Group(pts[i], pts[j], pts[k]);\n    }\n    _circum(i, j, k, tri, pts = this) {\n        let t = tri || this._triangle(i, j, k, pts);\n        return {\n            i: i,\n            j: j,\n            k: k,\n            triangle: t,\n            circle: Triangle.circumcircle(t)\n        };\n    }\n    static _dedupe(edges) {\n        let j = edges.length;\n        while (j > 1) {\n            let b = edges[--j];\n            let a = edges[--j];\n            let i = j;\n            while (i > 1) {\n                let n = edges[--i];\n                let m = edges[--i];\n                if ((a == m && b == n) || (a == n && b == m)) {\n                    edges.splice(j, 2);\n                    edges.splice(i, 2);\n                    break;\n                }\n            }\n        }\n        return edges;\n    }\n}\n//# sourceMappingURL=Create.js.map","import { Pt, Group } from \"./Pt\";\nimport { Util } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nexport class Color extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mode = \"rgb\";\n        this._isNorm = false;\n    }\n    static from(...args) {\n        let p = [1, 1, 1, 1];\n        let c = Util.getArgs(args);\n        for (let i = 0, len = p.length; i < len; i++) {\n            if (i < c.length)\n                p[i] = c[i];\n        }\n        return new Color(p);\n    }\n    static fromHex(hex) {\n        if (hex[0] == \"#\")\n            hex = hex.substr(1);\n        if (hex.length <= 3) {\n            let fn = (i) => hex[i] || \"F\";\n            hex = `${fn(0)}${fn(0)}${fn(1)}${fn(1)}${fn(2)}${fn(2)}`;\n        }\n        let alpha = 1;\n        if (hex.length === 8) {\n            alpha = hex.substr(6) && 0xFF / 255;\n            hex = hex.substring(0, 6);\n        }\n        let hexVal = parseInt(hex, 16);\n        return new Color(hexVal >> 16, hexVal >> 8 & 0xFF, hexVal & 0xFF, alpha);\n    }\n    static rgb(...args) { return Color.from(...args).toMode(\"rgb\"); }\n    static hsl(...args) { return Color.from(...args).toMode(\"hsl\"); }\n    static hsb(...args) { return Color.from(...args).toMode(\"hsb\"); }\n    static lab(...args) { return Color.from(...args).toMode(\"lab\"); }\n    static lch(...args) { return Color.from(...args).toMode(\"lch\"); }\n    static luv(...args) { return Color.from(...args).toMode(\"luv\"); }\n    static xyz(...args) { return Color.from(...args).toMode(\"xyz\"); }\n    static maxValues(mode) { return Color.ranges[mode].zipSlice(1).$take([0, 1, 2]); }\n    get hex() { return this.toString(\"hex\"); }\n    get rgb() { return this.toString(\"rgb\"); }\n    get rgba() { return this.toString(\"rgba\"); }\n    clone() {\n        let c = new Color(this);\n        c.toMode(this._mode);\n        return c;\n    }\n    toMode(mode, convert = false) {\n        if (convert) {\n            let fname = this._mode.toUpperCase() + \"to\" + mode.toUpperCase();\n            if (Color[fname]) {\n                this.to(Color[fname](this, this._isNorm, this._isNorm));\n            }\n            else {\n                throw new Error(\"Cannot convert color with \" + fname);\n            }\n        }\n        this._mode = mode;\n        return this;\n    }\n    get mode() { return this._mode; }\n    get r() { return this[0]; }\n    set r(n) { this[0] = n; }\n    get g() { return this[1]; }\n    set g(n) { this[1] = n; }\n    get b() { return this[2]; }\n    set b(n) { this[2] = n; }\n    get h() { return (this._mode == \"lch\") ? this[2] : this[0]; }\n    set h(n) {\n        let i = (this._mode == \"lch\") ? 2 : 0;\n        this[i] = n;\n    }\n    get s() { return this[1]; }\n    set s(n) { this[1] = n; }\n    get l() { return (this._mode == \"hsl\") ? this[2] : this[0]; }\n    set l(n) {\n        let i = (this._mode == \"hsl\") ? 2 : 0;\n        this[i] = n;\n    }\n    get a() { return this[1]; }\n    set a(n) { this[1] = n; }\n    get c() { return this[1]; }\n    set c(n) { this[1] = n; }\n    get u() { return this[1]; }\n    set u(n) { this[1] = n; }\n    get v() { return this[2]; }\n    set v(n) { this[2] = n; }\n    get alpha() { return (this.length > 3) ? this[3] : 1; }\n    get normalized() { return this._isNorm; }\n    set normalized(b) { this._isNorm = b; }\n    normalize(toNorm = true) {\n        if (this._isNorm == toNorm)\n            return this;\n        let ranges = Color.ranges[this._mode];\n        for (let i = 0; i < 3; i++) {\n            this[i] = (!toNorm)\n                ? Num.mapToRange(this[i], 0, 1, ranges[i][0], ranges[i][1])\n                : Num.mapToRange(this[i], ranges[i][0], ranges[i][1], 0, 1);\n        }\n        this._isNorm = toNorm;\n        return this;\n    }\n    $normalize(toNorm = true) { return this.clone().normalize(toNorm); }\n    toString(format = \"mode\") {\n        if (format == \"hex\") {\n            let _hex = (n) => {\n                let s = Math.floor(n).toString(16);\n                return (s.length < 2) ? '0' + s : s;\n            };\n            return `#${_hex(this[0])}${_hex(this[1])}${_hex(this[2])}`;\n        }\n        else if (format == \"rgba\") {\n            return `rgba(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])},${this.alpha}`;\n        }\n        else if (format == \"rgb\") {\n            return `rgb(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])}`;\n        }\n        else {\n            return `${this._mode}(${this[0]},${this[1]},${this[2]},${this.alpha})`;\n        }\n    }\n    static RGBtoHSL(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = h;\n        let l = h;\n        if (max == min) {\n            h = 0;\n            s = 0;\n        }\n        else {\n            let d = max - min;\n            s = (l > 0.5) ? d / (2 - max - min) : d / (max + min);\n            h = 0;\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsl(((normalizedOutput) ? h / 60 : h * 60), s, l, rgb.alpha);\n    }\n    static HSLtoRGB(hsl, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, l] = hsl;\n        if (!normalizedInput)\n            h = h / 360;\n        if (s == 0)\n            return Color.rgb(l * 255, l * 255, l * 255, hsl.alpha);\n        let q = (l <= 0.5) ? l * (1 + s) : l + s - (l * s);\n        let p = 2 * l - q;\n        let convert = (t) => {\n            t = (t < 0) ? t + 1 : (t > 1) ? t - 1 : t;\n            if (t * 6 < 1) {\n                return p + (q - p) * t * 6;\n            }\n            else if (t * 2 < 1) {\n                return q;\n            }\n            else if (t * 3 < 2) {\n                return p + (q - p) * ((2 / 3) - t) * 6;\n            }\n            else {\n                return p;\n            }\n        };\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * convert((h + 1 / 3)), sc * convert(h), sc * convert((h - 1 / 3)), hsl.alpha);\n    }\n    static RGBtoHSB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let d = max - min;\n        let h = 0;\n        let s = (max === 0) ? 0 : d / max;\n        let v = max;\n        if (max != min) {\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsb(((normalizedOutput) ? h / 60 : h * 60), s, v, rgb.alpha);\n    }\n    static HSBtoRGB(hsb, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, v] = hsb;\n        if (!normalizedInput)\n            h = h / 360;\n        let i = Math.floor(h * 6);\n        let f = h * 6 - i;\n        let p = v * (1 - s);\n        let q = v * (1 - f * s);\n        let t = v * (1 - (1 - f) * s);\n        let pick = [\n            [v, t, p], [q, v, p], [p, v, t],\n            [p, q, v], [t, p, v], [v, p, q]\n        ];\n        let c = pick[i % 6];\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * c[0], sc * c[1], sc * c[2], hsb.alpha);\n    }\n    static RGBtoLAB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLAB(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LABtoRGB(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        return Color.XYZtoRGB(Color.LABtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoLCH(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.LABtoLCH(Color.RGBtoLAB(c), false, normalizedOutput);\n    }\n    static LCHtoRGB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        return Color.LABtoRGB(Color.LCHtoLAB(c), false, normalizedOutput);\n    }\n    static RGBtoLUV(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLUV(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LUVtoRGB(luv, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? luv.$normalize(false) : luv;\n        return Color.XYZtoRGB(Color.LUVtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoXYZ(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (!normalizedInput) ? rgb.$normalize() : rgb.clone();\n        for (let i = 0; i < 3; i++) {\n            c[i] = (c[i] > 0.04045) ? Math.pow((c[i] + 0.055) / 1.055, 2.4) : c[i] / 12.92;\n            if (!normalizedOutput)\n                c[i] = c[i] * 100;\n        }\n        let cc = Color.xyz(c[0] * 0.4124564 + c[1] * 0.3575761 + c[2] * 0.1804375, c[0] * 0.2126729 + c[1] * 0.7151522 + c[2] * 0.0721750, c[0] * 0.0193339 + c[1] * 0.1191920 + c[2] * 0.9503041, rgb.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoRGB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (!normalizedInput) ? xyz.$normalize() : xyz;\n        let rgb = [\n            x * 3.2404542 + y * -1.5371385 + z * -0.4985314,\n            x * -0.9692660 + y * 1.8760108 + z * 0.0415560,\n            x * 0.0556434 + y * -0.2040259 + z * 1.0572252\n        ];\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = (rgb[i] < 0) ? 0 : (rgb[i] > 0.0031308) ? (1.055 * Math.pow(rgb[i], 1 / 2.4) - 0.055) : (12.92 * rgb[i]);\n            rgb[i] = Math.max(0, Math.min(1, rgb[i]));\n            if (!normalizedOutput)\n                rgb[i] = Math.round(rgb[i] * 255);\n        }\n        let cc = Color.rgb(rgb[0], rgb[1], rgb[2], xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLAB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? xyz.$normalize(false) : xyz.clone();\n        c.divide(Color.D65);\n        let fn = (n) => (n > 0.008856) ? Math.pow(n, 1 / 3) : (7.787 * n) + 16 / 116;\n        let cy = fn(c[1]);\n        let cc = Color.lab((116 * cy) - 16, 500 * (fn(c[0]) - cy), 200 * (cy - fn(c[2])), xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static LABtoXYZ(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let y = (c[0] + 16) / 116;\n        let x = (c[1] / 500) + y;\n        let z = y - c[2] / 200;\n        let fn = (n) => {\n            let nnn = n * n * n;\n            return (nnn > 0.008856) ? nnn : (n - 16 / 116) / 7.787;\n        };\n        let d = Color.D65;\n        let cc = Color.xyz(Math.max(0, d[0] * fn(x)), Math.max(0, d[1] * fn(y)), Math.max(0, d[2] * fn(z)), lab.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLUV(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (normalizedInput) ? xyz.$normalize(false) : xyz;\n        let u = (4 * x) / (x + (15 * y) + (3 * z));\n        let v = (9 * y) / (x + (15 * y) + (3 * z));\n        y = y / 100;\n        y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y + 16 / 116);\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let L = (116 * y) - 16;\n        return Color.luv(L, 13 * L * (u - refU), 13 * L * (v - refV), xyz.alpha);\n    }\n    static LUVtoXYZ(luv, normalizedInput = false, normalizedOutput = false) {\n        let [l, u, v] = (normalizedInput) ? luv.$normalize(false) : luv;\n        let y = (l + 16) / 116;\n        let cubeY = y * y * y;\n        y = (cubeY > 0.008856) ? cubeY : (y - 16 / 116) / 7.787;\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        u = u / (13 * l) + refU;\n        v = v / (13 * l) + refV;\n        y = y * 100;\n        let x = -1 * (9 * y * u) / ((u - 4) * v - u * v);\n        let z = (9 * y - (15 * v * y) - (v * x)) / (3 * v);\n        return Color.xyz(x, y, z, luv.alpha);\n    }\n    static LABtoLCH(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let h = Geom.toDegree(Geom.boundRadian(Math.atan2(c[2], c[1])));\n        return Color.lch(c[0], Math.sqrt(c[1] * c[1] + c[2] * c[2]), h, lab.alpha);\n    }\n    static LCHtoLAB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        let rad = Geom.toRadian(c[2]);\n        return Color.lab(c[0], Math.cos(rad) * c[1], Math.sin(rad) * c[1], lch.alpha);\n    }\n}\nColor.D65 = new Pt(95.047, 100, 108.883, 1);\nColor.ranges = {\n    rgb: new Group(new Pt(0, 255), new Pt(0, 255), new Pt(0, 255)),\n    hsl: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    hsb: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    lab: new Group(new Pt(0, 100), new Pt(-128, 127), new Pt(-128, 127)),\n    lch: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 360)),\n    luv: new Group(new Pt(0, 100), new Pt(-134, 220), new Pt(-140, 122)),\n    xyz: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 100))\n};\n//# sourceMappingURL=Color.js.map","import { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Util } from './Util';\nimport { Pt, Bound } from './Pt';\nexport class DOMSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this.id = \"domspace\";\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._css = {};\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pts\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            _selector = document.querySelector(elem);\n            _existed = true;\n            this.id = elem.substr(1);\n        }\n        if (!_selector) {\n            this._container = DOMSpace.createElement(\"div\", \"pts_container\");\n            this._canvas = DOMSpace.createElement(\"div\", \"pts_element\");\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n        }\n        setTimeout(this._ready.bind(this, callback), 50);\n    }\n    static createElement(elem = \"div\", id, appendTo) {\n        let d = document.createElement(elem);\n        if (id)\n            d.setAttribute(\"id\", id);\n        if (appendTo && appendTo.appendChild)\n            appendTo.appendChild(d);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this.refresh(false);\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor) {\n            this._bgcolor = opt.bgcolor;\n        }\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        return this;\n    }\n    getForm() {\n        return null;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            delete this._css['width'];\n            delete this._css['height'];\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = Bound.fromBoundingRect(this._container.getBoundingClientRect());\n        if (this._autoResize) {\n            this.styles({ width: \"100%\", height: \"100%\" }, true);\n        }\n        else {\n            this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        }\n        this.resize(b, evt);\n    }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() { return this._isReady; }\n    clear(bg) {\n        if (bg)\n            this.background = bg;\n        this._canvas.innerHTML = \"\";\n        return this;\n    }\n    set background(bg) {\n        this._bgcolor = bg;\n        this._container.style.backgroundColor = this._bgcolor;\n    }\n    get background() { return this._bgcolor; }\n    style(key, val, update = false) {\n        this._css[key] = val;\n        if (update)\n            this._canvas.style[key] = val;\n        return this;\n    }\n    styles(styles, update = false) {\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k))\n                this.style(k, styles[k], update);\n        }\n        return this;\n    }\n    static setAttr(elem, data) {\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                elem.setAttribute(k, data[k]);\n            }\n        }\n        return elem;\n    }\n    static getInlineStyles(data) {\n        let str = \"\";\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                if (data[k])\n                    str += `${k}: ${data[k]}; `;\n            }\n        }\n        return str;\n    }\n}\nexport class HTMLSpace extends DOMSpace {\n    getForm() {\n        return new HTMLForm(this);\n    }\n    static htmlElement(parent, name, id, autoClass = true) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElement(name);\n            elem.setAttribute(\"id\", id);\n            if (autoClass)\n                elem.setAttribute(\"class\", id.substring(0, id.indexOf(\"-\")));\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + HTMLForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class HTMLForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"background\": \"#f03\",\n                \"border-color\": \"#fff\",\n                \"color\": \"#000\",\n                \"border-width\": \"1px\",\n                \"border-radius\": \"0\",\n                \"border-style\": \"solid\",\n                \"position\": \"absolute\",\n                \"top\": 0,\n                \"left\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_dom_\" + (HTMLForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v, unit = '') {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = `${v}${unit}`;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n            if (!c)\n                this.styleTo(\"background\", \"transparent\");\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"background\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n            if (!c)\n                this.styleTo(\"border-width\", 0);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"border-color\", c);\n            this.styleTo(\"border-width\", (width || 1) + \"px\");\n        }\n        return this;\n    }\n    fillText(c) {\n        this.styleTo(\"color\", c);\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"background\": \"#f03\", \"border-color\": \"#fff\",\n            \"border-width\": \"1px\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(HTMLForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${HTMLForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"background: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"border: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('background') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('border-width') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return HTMLSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static rectStyle(ctx, pt, size) {\n        ctx.style[\"left\"] = pt[0] + \"px\";\n        ctx.style[\"top\"] = pt[1] + \"px\";\n        ctx.style[\"width\"] = size[0] + \"px\";\n        ctx.style[\"height\"] = size[1] + \"px\";\n        return ctx;\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return HTMLForm.circle(ctx, pt, radius);\n        }\n        else {\n            return HTMLForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        if (shape == \"circle\")\n            this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-circle ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(radius), new Pt(radius * 2, radius * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-square ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(halfsize), new Pt(halfsize * 2, halfsize * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        HTMLForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-rect ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, pts[0], pts[1]);\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"0\");\n        HTMLForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, {\n            position: 'absolute',\n            class: `pts-form pts-text ${ctx.currentClass}`,\n            left: pt[0],\n            top: pt[1],\n        });\n        elem.textContent = txt;\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        HTMLForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        Util.warn(\"arc is not implemented in HTMLForm\");\n        return this;\n    }\n    line(pts) {\n        Util.warn(\"line is not implemented in HTMLForm\");\n        return this;\n    }\n    polygon(pts) {\n        Util.warn(\"polygon is not implemented in HTMLForm\");\n        return this;\n    }\n}\nHTMLForm.groupID = 0;\nHTMLForm.domID = 0;\n//# sourceMappingURL=Dom.js.map","import { VisualForm, Font } from \"./Form\";\nimport { Geom } from './Num';\nimport { Const } from './Util';\nimport { Pt, Group } from './Pt';\nimport { Rectangle } from \"./Op\";\nimport { DOMSpace } from \"./Dom\";\nexport class SVGSpace extends DOMSpace {\n    constructor(elem, callback) {\n        super(elem, callback);\n        this.id = \"svgspace\";\n        this._bgcolor = \"#999\";\n        if (this._canvas.nodeName.toLowerCase() != \"svg\") {\n            let s = SVGSpace.svgElement(this._canvas, \"svg\", `${this.id}_svg`);\n            this._container = this._canvas;\n            this._canvas = s;\n        }\n    }\n    getForm() { return new SVGForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    resize(b, evt) {\n        super.resize(b, evt);\n        SVGSpace.setAttr(this.element, {\n            \"viewBox\": `0 0 ${this.bound.width} ${this.bound.height}`,\n            \"width\": `${this.bound.width}`,\n            \"height\": `${this.bound.height}`,\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"version\": \"1.1\"\n        });\n        return this;\n    }\n    static svgElement(parent, name, id) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n            elem.setAttribute(\"id\", id);\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + SVGForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class SVGForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"fill\": \"#f03\",\n                \"stroke\": \"#fff\",\n                \"stroke-width\": 1,\n                \"stroke-linejoin\": \"bevel\",\n                \"stroke-linecap\": \"sqaure\"\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_svg_\" + (SVGForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v) {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = v;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"fill\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"stroke\", c);\n            if (width)\n                this.styleTo(\"stroke-width\", width);\n            if (linejoin)\n                this.styleTo(\"stroke-linejoin\", linejoin);\n            if (linecap)\n                this.styleTo(\"stroke-linecap\", linecap);\n        }\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"fill\": \"#f03\", \"stroke\": \"#fff\",\n            \"stroke-width\": 1,\n            \"stroke-linejoin\": \"bevel\",\n            \"stroke-linecap\": \"sqaure\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(SVGForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${SVGForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"fill: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"stroke: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('fill') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('stroke') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return DOMSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return SVGForm.circle(ctx, pt, radius);\n        }\n        else {\n            return SVGForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        SVGForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = SVGSpace.svgElement(ctx.group, \"circle\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            cx: pt[0],\n            cy: pt[1],\n            r: radius,\n            'class': `pts-svgform pts-circle ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        SVGForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        let elem = SVGSpace.svgElement(ctx.group, \"path\", SVGForm.getID(ctx));\n        const start = new Pt(pt).toAngle(startAngle, radius, true);\n        const end = new Pt(pt).toAngle(endAngle, radius, true);\n        const diff = Geom.boundAngle(endAngle) - Geom.boundAngle(startAngle);\n        let largeArc = (diff > Const.pi) ? true : false;\n        if (cc)\n            largeArc = !largeArc;\n        const sweep = (cc) ? \"0\" : \"1\";\n        const d = `M ${start[0]} ${start[1]} A ${radius} ${radius} 0 ${largeArc ? \"1\" : \"0\"} ${sweep} ${end[0]} ${end[1]}`;\n        DOMSpace.setAttr(elem, {\n            d: d,\n            'class': `pts-svgform pts-arc ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        this.nextID();\n        SVGForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x: pt[0] - halfsize,\n            y: pt[1] - halfsize,\n            width: halfsize * 2,\n            height: halfsize * 2,\n            'class': `pts-svgform pts-square ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        SVGForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static line(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        if (pts.length > 2)\n            return SVGForm._poly(ctx, pts, false);\n        let elem = SVGSpace.svgElement(ctx.group, \"line\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x1: pts[0][0],\n            y1: pts[0][1],\n            x2: pts[1][0],\n            y2: pts[1][1],\n            'class': `pts-svgform pts-line ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    line(pts) {\n        this.nextID();\n        SVGForm.line(this._ctx, pts);\n        return this;\n    }\n    static _poly(ctx, pts, closePath = true) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, ((closePath) ? \"polygon\" : \"polyline\"), SVGForm.getID(ctx));\n        let points = pts.reduce((a, p) => a + `${p[0]},${p[1]} `, \"\");\n        DOMSpace.setAttr(elem, {\n            points: points,\n            'class': `pts-svgform pts-polygon ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    static polygon(ctx, pts) {\n        return SVGForm._poly(ctx, pts, true);\n    }\n    polygon(pts) {\n        this.nextID();\n        SVGForm.polygon(this._ctx, pts);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        let bound = Group.fromArray(pts).boundingBox();\n        let size = Rectangle.size(bound);\n        DOMSpace.setAttr(elem, {\n            x: bound[0][0],\n            y: bound[0][1],\n            width: size[0],\n            height: size[1],\n            'class': `pts-svgform pts-rect ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        SVGForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = SVGSpace.svgElement(ctx.group, \"text\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            \"pointer-events\": \"none\",\n            x: pt[0],\n            y: pt[1],\n            dx: 0, dy: 0,\n            'class': `pts-svgform pts-text ${ctx.currentClass}`,\n        });\n        elem.textContent = txt;\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        SVGForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n}\nSVGForm.groupID = 0;\nSVGForm.domID = 0;\n//# sourceMappingURL=Svg.js.map","import { Pt, Group, Bound } from \"./Pt\";\nimport { Polygon, Circle } from \"./Op\";\nexport class World {\n    constructor(bound, friction = 1, gravity = 0) {\n        this._lastTime = null;\n        this._gravity = new Pt();\n        this._friction = 1;\n        this._damping = 0.75;\n        this._particles = [];\n        this._bodies = [];\n        this._names = { p: {}, b: {} };\n        this._bound = Bound.fromGroup(bound);\n        this._friction = friction;\n        this._gravity = (typeof gravity === \"number\") ? new Pt(0, gravity) : new Pt(gravity);\n        return this;\n    }\n    get gravity() { return this._gravity; }\n    set gravity(g) { this._gravity = g; }\n    get friction() { return this._friction; }\n    set friction(f) { this._friction = f; }\n    get damping() { return this._damping; }\n    set damping(f) { this._damping = f; }\n    get bodyCount() { return this._bodies.length; }\n    get particleCount() { return this._particles.length; }\n    body(id) { return this._bodies[(typeof id === \"string\") ? this._names.b[id] : id]; }\n    particle(id) { return this._particles[(typeof id === \"string\") ? this._names.p[id] : id]; }\n    update(ms) {\n        let dt = ms / 1000;\n        this._updateParticles(dt);\n        this._updateBodies(dt);\n    }\n    drawParticles(fn) {\n        this._drawParticles = fn;\n    }\n    drawBodies(fn) {\n        this._drawBodies = fn;\n    }\n    add(p, name) {\n        if (p instanceof Body) {\n            this._bodies.push(p);\n            if (name)\n                this._names.b[name] = this._bodies.length - 1;\n        }\n        else {\n            this._particles.push(p);\n            if (name)\n                this._names.p[name] = this._particles.length - 1;\n        }\n        return this;\n    }\n    remove(which, index, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        if (which == \"body\") {\n            this._bodies.splice(param[0], param[1]);\n        }\n        else {\n            this._particles.splice(param[0], param[1]);\n        }\n        return this;\n    }\n    static edgeConstraint(p1, p2, dist, stiff = 1, precise = false) {\n        const m1 = 1 / (p1.mass || 1);\n        const m2 = 1 / (p2.mass || 1);\n        const mm = m1 + m2;\n        let delta = p2.$subtract(p1);\n        let distSq = dist * dist;\n        let d = (precise) ? (dist / delta.magnitude() - 1) : (distSq / (delta.dot(delta) + distSq) - 0.5);\n        let f = delta.$multiply(d * stiff);\n        p1.subtract(f.$multiply(m1 / mm));\n        p2.add(f.$multiply(m2 / mm));\n        return p1;\n    }\n    static boundConstraint(p, rect, damping = 0.75) {\n        let bound = rect.boundingBox();\n        let np = p.$min(bound[1].subtract(p.radius)).$max(bound[0].add(p.radius));\n        if (np[0] === bound[0][0] || np[0] === bound[1][0]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(-c[0], c[1]));\n        }\n        else if (np[1] === bound[0][1] || np[1] === bound[1][1]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(c[0], -c[1]));\n        }\n        p.to(np);\n    }\n    integrate(p, dt, prevDt) {\n        p.addForce(this._gravity);\n        p.verlet(dt, this._friction, prevDt);\n        return p;\n    }\n    _updateParticles(dt) {\n        for (let i = 0, len = this._particles.length; i < len; i++) {\n            let p = this._particles[i];\n            this.integrate(p, dt, this._lastTime);\n            World.boundConstraint(p, this._bound, this._damping);\n            for (let k = i + 1; k < len; k++) {\n                if (i !== k) {\n                    let p2 = this._particles[k];\n                    p.collide(p2, this._damping);\n                }\n            }\n            if (this._drawParticles)\n                this._drawParticles(p, i);\n        }\n        this._lastTime = dt;\n    }\n    _updateBodies(dt) {\n        for (let i = 0, len = this._bodies.length; i < len; i++) {\n            let b = this._bodies[i];\n            for (let k = 0, klen = b.length; k < klen; k++) {\n                let bk = b[k];\n                World.boundConstraint(bk, this._bound, this._damping);\n                this.integrate(bk, dt, this._lastTime);\n            }\n            for (let k = i + 1; k < len; k++) {\n                b.processBody(this._bodies[k]);\n            }\n            for (let m = 0, mlen = this._particles.length; m < mlen; m++) {\n                b.processParticle(this._particles[m]);\n            }\n            b.processEdges();\n            if (this._drawBodies)\n                this._drawBodies(b, i);\n        }\n    }\n}\nexport class Particle extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mass = 1;\n        this._radius = 0;\n        this._force = new Pt();\n        this._prev = new Pt();\n        this._lock = false;\n        this._prev = this.clone();\n    }\n    get mass() { return this._mass; }\n    set mass(m) { this._mass = m; }\n    get radius() { return this._radius; }\n    set radius(f) { this._radius = f; }\n    get previous() { return this._prev; }\n    set previous(p) { this._prev = p; }\n    get force() { return this._force; }\n    set force(g) { this._force = g; }\n    get body() { return this._body; }\n    set body(b) { this._body = b; }\n    get lock() { return this._lock; }\n    set lock(b) {\n        this._lock = b;\n        this._lockPt = new Pt(this);\n    }\n    get changed() { return this.$subtract(this._prev); }\n    set position(p) {\n        this.previous.to(this);\n        if (this._lock)\n            this._lockPt = p;\n        this.to(p);\n    }\n    size(r) {\n        this._mass = r;\n        this._radius = r;\n        return this;\n    }\n    addForce(...args) {\n        this._force.add(...args);\n        return this._force;\n    }\n    verlet(dt, friction, lastDt) {\n        if (this._lock) {\n            this.to(this._lockPt);\n        }\n        else {\n            let lt = (lastDt) ? lastDt : dt;\n            let a = this._force.multiply(dt * (dt + lt) / 2);\n            let v = this.changed.multiply(friction * dt / lt).add(a);\n            this._prev = this.clone();\n            this.add(v);\n            this._force = new Pt();\n        }\n        return this;\n    }\n    hit(...args) {\n        this._prev.subtract(new Pt(...args).$divide(Math.sqrt(this._mass)));\n        return this;\n    }\n    collide(p2, damp = 1) {\n        let p1 = this;\n        let dp = p1.$subtract(p2);\n        let distSq = dp.magnitudeSq();\n        let dr = p1.radius + p2.radius;\n        if (distSq < dr * dr) {\n            let c1 = p1.changed;\n            let c2 = p2.changed;\n            let dist = Math.sqrt(distSq);\n            let d = dp.$multiply(((dist - dr) / dist) / 2);\n            let np1 = p1.$subtract(d);\n            let np2 = p2.$add(d);\n            p1.to(np1);\n            p2.to(np2);\n            let f1 = damp * dp.dot(c1) / distSq;\n            let f2 = damp * dp.dot(c2) / distSq;\n            let dm1 = p1.mass / (p1.mass + p2.mass);\n            let dm2 = p2.mass / (p1.mass + p2.mass);\n            c1.add(new Pt(f2 * dp[0] - f1 * dp[0], f2 * dp[1] - f1 * dp[1]).$multiply(dm2));\n            c2.add(new Pt(f1 * dp[0] - f2 * dp[0], f1 * dp[1] - f2 * dp[1]).$multiply(dm1));\n            p1.previous = p1.$subtract(c1);\n            p2.previous = p2.$subtract(c2);\n        }\n    }\n    toString() {\n        return `Particle: ${this[0]} ${this[1]} | previous ${this._prev[0]} ${this._prev[1]} | mass ${this._mass}`;\n    }\n}\nexport class Body extends Group {\n    constructor() {\n        super();\n        this._cs = [];\n        this._stiff = 1;\n        this._locks = {};\n        this._mass = 1;\n    }\n    static fromGroup(list, stiff = 1, autoLink = true, autoMass = true) {\n        let b = new Body().init(list);\n        if (autoLink)\n            b.linkAll(stiff);\n        if (autoMass)\n            b.autoMass();\n        return b;\n    }\n    init(list, stiff = 1) {\n        let c = new Pt();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = new Particle(list[i]);\n            p.body = this;\n            c.add(list[i]);\n            this.push(p);\n        }\n        this._stiff = stiff;\n        return this;\n    }\n    get mass() { return this._mass; }\n    set mass(m) {\n        this._mass = m;\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i].mass = this._mass;\n        }\n    }\n    autoMass() {\n        this.mass = Math.sqrt(Polygon.area(this)) / 10;\n        return this;\n    }\n    link(index1, index2, stiff) {\n        if (index1 < 0 || index1 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        if (index2 < 0 || index2 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        let d = this[index1].$subtract(this[index2]).magnitude();\n        this._cs.push([index1, index2, d, stiff || this._stiff]);\n        return this;\n    }\n    linkAll(stiff) {\n        let half = this.length / 2;\n        for (let i = 0, len = this.length; i < len; i++) {\n            let n = (i >= len - 1) ? 0 : i + 1;\n            this.link(i, n, stiff);\n            if (len > 4) {\n                let nd = (Math.floor(half / 2)) + 1;\n                let n2 = (i >= len - nd) ? i % len : i + nd;\n                this.link(i, n2, stiff);\n            }\n            if (i <= half - 1) {\n                this.link(i, Math.min(this.length - 1, i + Math.floor(half)));\n            }\n        }\n    }\n    linksToLines() {\n        let gs = [];\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let ln = this._cs[i];\n            gs.push(new Group(this[ln[0]], this[ln[1]]));\n        }\n        return gs;\n    }\n    processEdges() {\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let [m, n, d, s] = this._cs[i];\n            World.edgeConstraint(this[m], this[n], d, s);\n        }\n    }\n    processBody(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectPolygon(b1, b2);\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.body.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            hit.vertex.add(cv.$multiply(mr1));\n        }\n    }\n    processParticle(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectCircle(b1, Circle.fromCenter(b, b.radius));\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.mass || b2.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            let c1 = b.changed.add(cv.$multiply(mr1));\n            b.previous = b.$subtract(c1);\n        }\n    }\n}\n//# sourceMappingURL=Physics.js.map","export * from \"./Canvas\";\nexport * from \"./Create\";\nexport * from \"./Form\";\nexport * from \"./LinearAlgebra\";\nexport * from \"./Num\";\nexport * from \"./Op\";\nexport * from \"./Pt\";\nexport * from \"./Space\";\nexport * from \"./Color\";\nexport * from \"./Util\";\nexport * from \"./Dom\";\nexport * from \"./Svg\";\nexport * from \"./Typography\";\nexport * from \"./Physics\";\n//# sourceMappingURL=_module.js.map"],"sourceRoot":""}