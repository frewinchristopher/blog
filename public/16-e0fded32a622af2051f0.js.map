{"version":3,"sources":["webpack:///./node_modules/gatsby-link/index.js","webpack:///./node_modules/lodash/_nativeCreate.js","webpack:///./node_modules/lodash/_assocIndexOf.js","webpack:///./node_modules/lodash/_getMapData.js","webpack:///./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./node_modules/react-image-webp/dist/index.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_getNative.js","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/lodash/get.js","webpack:///./node_modules/lodash/_baseGet.js","webpack:///./node_modules/lodash/_castPath.js","webpack:///./node_modules/lodash/_isKey.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/lodash/_stringToPath.js","webpack:///./node_modules/lodash/_memoizeCapped.js","webpack:///./node_modules/lodash/memoize.js","webpack:///./node_modules/lodash/_MapCache.js","webpack:///./node_modules/lodash/_mapCacheClear.js","webpack:///./node_modules/lodash/_Hash.js","webpack:///./node_modules/lodash/_hashClear.js","webpack:///./node_modules/lodash/_baseIsNative.js","webpack:///./node_modules/lodash/isFunction.js","webpack:///./node_modules/lodash/_isMasked.js","webpack:///./node_modules/lodash/_coreJsData.js","webpack:///./node_modules/lodash/_toSource.js","webpack:///./node_modules/lodash/_getValue.js","webpack:///./node_modules/lodash/_hashDelete.js","webpack:///./node_modules/lodash/_hashGet.js","webpack:///./node_modules/lodash/_hashHas.js","webpack:///./node_modules/lodash/_hashSet.js","webpack:///./node_modules/lodash/_ListCache.js","webpack:///./node_modules/lodash/_listCacheClear.js","webpack:///./node_modules/lodash/_listCacheDelete.js","webpack:///./node_modules/lodash/eq.js","webpack:///./node_modules/lodash/_listCacheGet.js","webpack:///./node_modules/lodash/_listCacheHas.js","webpack:///./node_modules/lodash/_listCacheSet.js","webpack:///./node_modules/lodash/_Map.js","webpack:///./node_modules/lodash/_mapCacheDelete.js","webpack:///./node_modules/lodash/_isKeyable.js","webpack:///./node_modules/lodash/_mapCacheGet.js","webpack:///./node_modules/lodash/_mapCacheHas.js","webpack:///./node_modules/lodash/_mapCacheSet.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/_arrayMap.js","webpack:///./node_modules/lodash/_toKey.js","webpack:///./node_modules/pts/dist/es2015/Util.js","webpack:///./node_modules/pts/dist/es2015/LinearAlgebra.js","webpack:///./node_modules/pts/dist/es2015/Op.js","webpack:///./node_modules/pts/dist/es2015/Num.js","webpack:///./node_modules/pts/dist/es2015/Pt.js","webpack:///./node_modules/pts/dist/es2015/UI.js","webpack:///./node_modules/pts/dist/es2015/Space.js","webpack:///./node_modules/pts/dist/es2015/Form.js","webpack:///./node_modules/pts/dist/es2015/Typography.js","webpack:///./node_modules/pts/dist/es2015/Canvas.js","webpack:///./node_modules/pts/dist/es2015/Create.js","webpack:///./node_modules/pts/dist/es2015/Color.js","webpack:///./node_modules/pts/dist/es2015/Dom.js","webpack:///./node_modules/pts/dist/es2015/Svg.js","webpack:///./node_modules/pts/dist/es2015/Physics.js","webpack:///./node_modules/pts/dist/es2015/_module.js"],"names":["_interopRequireDefault","__webpack_require__","exports","__esModule","withPrefix","navigateTo","replace","push","navigate","default","_objectWithoutPropertiesLoose2","_extends2","_inheritsLoose2","_assertThisInitialized2","_defineProperty2","_propTypes","_react","_router","_gatsby","path","normalizePath","NavLinkPropTypes","activeClassName","string","activeStyle","object","GatsbyLink","_React$Component","props","_this","call","this","_ref","isCurrent","className","filter","Boolean","join","style","IOSupported","window","IntersectionObserver","state","handleRef","bind","_proto","prototype","componentDidUpdate","prevProps","prevState","to","___loader","enqueue","parsePath","pathname","componentDidMount","ref","el","cb","io","_this2","innerRef","entries","forEach","entry","target","isIntersecting","intersectionRatio","unobserve","disconnect","observe","render","_this3","_this$props","_this$props$getProps","getProps","defaultGetProps","_onClick","onClick","_onMouseEnter","onMouseEnter","rest","prefixedTo","createElement","Link","e","hovering","button","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","preventDefault","Component","propTypes","func","isRequired","bool","_default","options","___navigate","console","warn","___push","___replace","nativeCreate","getNative","Object","module","eq","array","key","length","isKeyable","map","data","__data__","source","excluded","i","sourceKeys","keys","indexOf","_extends","assign","arguments","hasOwnProperty","apply","defineProperty","value","a","_typeof","Symbol","iterator","constructor","_createClass","b","c","d","enumerable","configurable","writable","_react2","Image","TypeError","_classCallCheck","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","create","setPrototypeOf","_inherits","document","getContext","toDataURL","src","webp","alt","title","f","g","canUseWebP","isArray","Array","baseGetTag","isObjectLike","symbolTag","freeGlobal","freeSelf","self","root","Function","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","toStringTag","undefined","baseIsNative","getValue","type","$export","aFunction","toObject","fails","$sort","sort","test","P","F","comparefn","baseGet","defaultValue","result","castPath","toKey","index","isKey","stringToPath","toString","isSymbol","reIsDeepProp","reIsPlainProp","global","objectProto","nativeObjectToString","isOwn","tag","unmasked","memoizeCapped","rePropName","reEscapeChar","charCodeAt","match","number","quote","subString","memoize","MAX_MEMOIZE_SIZE","cache","size","clear","MapCache","FUNC_ERROR_TEXT","resolver","memoized","args","has","get","set","Cache","mapCacheClear","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","Hash","ListCache","Map","hash","hashClear","hashDelete","hashGet","hashHas","hashSet","isFunction","isMasked","isObject","toSource","reIsHostCtor","funcProto","funcToString","reIsNative","RegExp","asyncTag","funcTag","genTag","proxyTag","uid","coreJsData","maskSrcKey","exec","IE_PROTO","HASH_UNDEFINED","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","assocIndexOf","splice","pop","other","getMapData","baseToString","arrayMap","INFINITY","symbolProto","symbolToString","iteratee","Const","xy","yz","xz","xyz","horizontal","vertical","identical","right","bottom_right","bottom","bottom_left","left","top_left","top","top_right","epsilon","max","Number","MAX_VALUE","min","MIN_VALUE","pi","Math","PI","two_pi","half_pi","quarter_pi","one_degree","rad_to_deg","deg_to_rad","gravity","newton","gaussian","Util_Util","[object Object]","lv","_warnLevel","pos","ArrayBuffer","isView","slice","p","message","defaultReturn","warnLevel","Error","range","start","floor","random","pts","stride","loopBack","st","chunks","concat","flattenAsGroup","arr","Pt_Group","op","len","k","lenB","arrays","z","callback","fn","step","temp","LinearAlgebra_Vec","Pt_Pt","sqrt","dot","magnitude","m","divide","abs","ceil","round","s","LinearAlgebra_Mat","isNum","$add","transposed","elementwise","ai","alen","$multiply","transpose","make","bi","blen","useLongest","ps","reduce","zipSlice","zip","pt","x","y","cosA","sinA","tanX","tanY","sx","sy","at","scale2DMatrix","rotate2DMatrix","shear2DMatrix","p1","p2","intercept","Op_Line","yi","ang2","atan","slope","cos","sin","_errorLength","obj","param","_errorOutofBound","anchor","angle","toAngle","xi","line","p3","threshold","$subtract","$cross","equals","magnitudeSq","asProjection","proj","$project","perpendicularFromPt","la","lb","pa","pb","y1","px","py","intersectRay2D","Num_Geom","withinBound","ray","lineOrRay","poly","sourceIsRay","intersectLineWithRay2D","intersectLine2D","next","lines1","lines2","isRay","group","lenk","_ip","gridPt","t","subtract","intersectGridWithRay2D","gg","rect","box","boundingBox","fromPtArray","Op_Rectangle","hasIntersectRect2D","intersectLines2D","sides","num","interpolate","cropAsCircle","ls","unit","multiply","fromCenter","sideIdx","graphic","atTail","perpendicular","add","$min","$max","topLeft","widthOrSize","height","fromTopLeft","center","half","within","Op_Circle","fromRect","enclose","maxValue","minValue","p0","corners","rects","merged","flatten","_center","ratio","asRows","mid","Num_Num","lerp","rect1","rect2","resetBoundingBox","r","radius","disc","discSqrt","t1","t2","circle","dv","dr2","dr","ar","br","ar2","br2","clone","h","ang","inc","Op_Triangle","toTriangle","fromCircle","Op_Polygon","midpoints","opp","oppositeSide","altitude","bisector","incenter","area","perimeter","total","md","medial","circumcenter","centroid","idx","closePath","sp","split","lines","gs","adjacentSides","mag","segments","det","sorted","dq","bot","hull","originIndex","_near","_item","unitAxis","n","poly1","poly2","projectAxis","ln","lineAt","info","which","dist","normal","edge","vertex","minDist","MAX_SAFE_INTEGER","axis","_axisOverlap","plen","b1","b2","c1","c2","smallest","lp","ins","intersectPolygon2D","polys","boxes","unshift","val","sum","currA","currB","targetA","targetB","normalizeValue","boundValue","radian","minPt","maxPt","average","ptOrIndex","direction","method","boundPt1","boundPt2","bounds","da","db","$cross2D","scale","scs","lenP","rotateAt2DMatrix","$take","transform2D","shearAt2DMatrix","tanx","tan","tany","mat","reflectAt2DMatrix","Float64Array","table","rad","boundAngle","toDegree","UIShape","PtBaseArray","Float32Array","super","getArgs","dimensions","randomize","fill","id","_id","w","anchorFromPt","change","params","fns","_ops","toArray","cross2D","cross","atan2","boundRadian","rotate2D","shear2D","reflect2D","p4","q1","q2","q3","q4","list","from","chunkSize","count","pts_per_segment","clamp","chunk","tc","moveBy","dim","desc","ptFn","forEachPt","Bound","_size","_topLeft","_bottomRight","_inited","init","width","_updateSize","_updateCenter","_updatePosFromTop","_updatePosFromCenter","bottomRight","depth","inited","UIPointerActions","up","down","move","drag","drop","over","out","Space_Space","bound","_time","prev","diff","end","players","playerCount","_animID","_pause","_refresh","_pointer","_isReady","_playing","player","animate","pid","animateID","resize","time","requestAnimationFrame","play","playItems","err","cancelAnimationFrame","toggle","duration","stop","context","_renderFunc","customRendering","isPlaying","outerBound","innerBound","Space_MultiTouchSpace","_pressed","_dragged","_hasMouse","_hasTouch","pointer","evt","_canvas","addEventListener","removeEventListener","_bind","bindCanvas","_mouseDown","_mouseUp","_mouseOver","_mouseOut","_mouseMove","unbindCanvas","_touchMove","ts","item","pageX","pageY","MouseEvent","v","action","changedTouches","touch","_mouseAction","Form_Form","_ready","ready","required","VisualForm","_filled","_stroked","_font","Font","filled","stroked","currentFont","groups","shape","stroke","linejoin","linecap","point","_multiple","face","weight","lineHeight","Typography_Typography","samples","distribution","avg","str","tail","trim","substr","byHeight","nh","defaultSize","Canvas_CanvasSpace","elem","_pixelScale","_autoResize","_bgcolor","_offscreen","_initialResize","_selector","Element","querySelector","nodeName","toLowerCase","_container","_createElement","appendChild","parentElement","body","setTimeout","_ctx","setAttribute","_resizeHandler","dispatchEvent","Event","opt","bgcolor","autoResize","retina","r1","devicePixelRatio","r2","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","offscreen","_offCanvas","_offCtx","auto","translate","playOnce","getBoundingClientRect","fromBoundingRect","pageXOffset","pageYOffset","background","bg","pixelScale","hasOffscreen","offscreenCtx","offscreenCanvas","Canvas_CanvasForm","element","parent","ctx","lastColor","fillStyle","fillRect","clearRect","save","restore","space","_style","strokeStyle","lineWidth","lineJoin","lineCap","_space","font","off","clearOffscreen","offset","drawImage","sizeOrFont","family","_estimateTextWidth","fontWidthEstimate","estimate","textWidthEstimator","measureText","truncate","getTextWidth","textAlign","_paint","beginPath","arc","startAngle","endAngle","cc","halfsize","x1","x2","y2","moveTo","lineTo","square","polygon","img","orig","original","image","txt","maxWidth","fillText","text","verticalAlign","overrideBaseline","textBaseline","_textTruncate","_textAlign","crop","lstep","nextLine","sub","buffer","newln","dt","lastIndexOf","lsize","lbox","lpad","alignment","baseline","Create_Create","subpoints","columns","rows","orientation","$divide","dx","dy","seed","np","Create_Noise","initNoise","Create_Delaunay","grad3","permTable","perm","_n","j","n00","n01","n10","n11","_fade","tx","_mesh","triangleOnly","indices","_superTriangle","opened","_circum","closed","tris","edges","circum","triangle","_dedupe","o","_cache","vs","neighborPts","cs","sortEdges","dmax","tri","_triangle","circumcircle","Color_Color","_mode","_isNorm","hex","alpha","substring","hexVal","parseInt","toMode","mode","ranges","rgb","rgba","convert","fname","toUpperCase","l","u","normalized","toNorm","mapToRange","normalize","format","_hex","normalizedInput","normalizedOutput","$normalize","hsl","q","sc","hsb","XYZtoLAB","RGBtoXYZ","lab","XYZtoRGB","LABtoXYZ","LABtoLCH","RGBtoLAB","lch","LABtoRGB","LCHtoLAB","XYZtoLUV","luv","LUVtoXYZ","pow","D65","cy","nnn","refU","refV","L","cubeY","toRadian","Dom_DOMSpace","_css","appendTo","refresh","styles","innerHTML","backgroundColor","update","HTMLSpace","Dom_HTMLForm","name","autoClass","querySelectorAll","scopeID","parentNode","removeChild","remove","removeAll","groupID","groupCount","currentID","currentClass","border-color","color","border-width","border-radius","border-style","position","fontSize","fontFamily","styleTo","group_id","nextID","updateScope","domID","setAttr","htmlElement","getID","class","rectStyle","_checkSize","textContent","Svg_SVGSpace","svgElement","Svg_SVGForm","viewBox","xmlns","version","createElementNS","stroke-width","stroke-linejoin","stroke-linecap","cx","largeArc","sweep","_poly","points","fromArray","pointer-events","Physics_World","friction","_lastTime","_gravity","_friction","_damping","_particles","_bodies","_names","_bound","fromGroup","damping","bodyCount","particleCount","ms","_updateParticles","_updateBodies","_drawParticles","_drawBodies","Physics_Body","stiff","precise","m1","mass","m2","mm","delta","distSq","changed","previous","prevDt","addForce","verlet","integrate","boundConstraint","collide","klen","bk","processBody","mlen","processParticle","processEdges","Physics_Particle","_mass","_radius","_force","_prev","_lock","force","_body","lock","_lockPt","lastDt","lt","damp","dp","np1","np2","f1","f2","dm1","dm2","_cs","_stiff","_locks","autoLink","autoMass","linkAll","index1","index2","link","nd","n2","edgeConstraint","hit","hasIntersectPolygon","cv","eg","lambda","m0","mr0","mr1","hasIntersectCircle","__webpack_exports__"],"mappings":"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","file":"16-e0fded32a622af2051f0.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.withPrefix = withPrefix;\nexports.navigateTo = exports.replace = exports.push = exports.navigate = exports.default = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _router = require(\"@reach/router\");\n\nvar _gatsby = require(\"gatsby\");\n\n/*global __PATH_PREFIX__ */\nfunction withPrefix(path) {\n  return normalizePath(__PATH_PREFIX__ + \"/\" + path);\n}\n\nfunction normalizePath(path) {\n  return path.replace(/\\/+/g, \"/\");\n}\n\nvar NavLinkPropTypes = {\n  activeClassName: _propTypes.default.string,\n  activeStyle: _propTypes.default.object // Set up IntersectionObserver\n\n};\n\nvar handleIntersection = function handleIntersection(el, cb) {\n  var io = new window.IntersectionObserver(function (entries) {\n    entries.forEach(function (entry) {\n      if (el === entry.target) {\n        // Check if element is within viewport, remove listener, destroy observer, and run link callback.\n        // MSEdge doesn't currently support isIntersecting, so also test for  an intersectionRatio > 0\n        if (entry.isIntersecting || entry.intersectionRatio > 0) {\n          io.unobserve(el);\n          io.disconnect();\n          cb();\n        }\n      }\n    });\n  }); // Add element to the observer\n\n  io.observe(el);\n};\n\nvar GatsbyLink =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inheritsLoose2.default)(GatsbyLink, _React$Component);\n\n  function GatsbyLink(props) {\n    var _this;\n\n    _this = _React$Component.call(this) || this; // Default to no support for IntersectionObserver\n\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"defaultGetProps\", function (_ref) {\n      var isCurrent = _ref.isCurrent;\n\n      if (isCurrent) {\n        return {\n          className: [_this.props.className, _this.props.activeClassName].filter(Boolean).join(\" \"),\n          style: (0, _extends2.default)({}, _this.props.style, _this.props.activeStyle)\n        };\n      }\n\n      return null;\n    });\n    var IOSupported = false;\n\n    if (typeof window !== \"undefined\" && window.IntersectionObserver) {\n      IOSupported = true;\n    }\n\n    _this.state = {\n      IOSupported: IOSupported\n    };\n    _this.handleRef = _this.handleRef.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));\n    return _this;\n  }\n\n  var _proto = GatsbyLink.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    // Preserve non IO functionality if no support\n    if (this.props.to !== prevProps.to && !this.state.IOSupported) {\n      ___loader.enqueue((0, _gatsby.parsePath)(this.props.to).pathname);\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Preserve non IO functionality if no support\n    if (!this.state.IOSupported) {\n      ___loader.enqueue((0, _gatsby.parsePath)(this.props.to).pathname);\n    }\n  };\n\n  _proto.handleRef = function handleRef(ref) {\n    var _this2 = this;\n\n    this.props.innerRef && this.props.innerRef(ref);\n\n    if (this.state.IOSupported && ref) {\n      // If IO supported and element reference found, setup Observer functionality\n      handleIntersection(ref, function () {\n        ___loader.enqueue((0, _gatsby.parsePath)(_this2.props.to).pathname);\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    var _this$props = this.props,\n        to = _this$props.to,\n        _this$props$getProps = _this$props.getProps,\n        getProps = _this$props$getProps === void 0 ? this.defaultGetProps : _this$props$getProps,\n        _onClick = _this$props.onClick,\n        _onMouseEnter = _this$props.onMouseEnter,\n        $activeClassName = _this$props.activeClassName,\n        $activeStyle = _this$props.activeStyle,\n        $ref = _this$props.ref,\n        $innerRef = _this$props.innerRef,\n        state = _this$props.state,\n        replace = _this$props.replace,\n        rest = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"to\", \"getProps\", \"onClick\", \"onMouseEnter\", \"activeClassName\", \"activeStyle\", \"ref\", \"innerRef\", \"state\", \"replace\"]);\n    var prefixedTo = withPrefix(to);\n    return _react.default.createElement(_router.Link, (0, _extends2.default)({\n      to: prefixedTo,\n      state: state,\n      getProps: getProps,\n      innerRef: this.handleRef,\n      onMouseEnter: function onMouseEnter(e) {\n        // eslint-disable-line\n        _onMouseEnter && _onMouseEnter(e);\n\n        ___loader.hovering((0, _gatsby.parsePath)(to).pathname);\n      },\n      onClick: function onClick(e) {\n        // eslint-disable-line\n        _onClick && _onClick(e);\n\n        if (e.button === 0 && // ignore right clicks\n        !_this3.props.target && // let browser handle \"target=_blank\"\n        !e.defaultPrevented && // onClick prevented default\n        !e.metaKey && // ignore clicks with modifier keys...\n        !e.altKey && !e.ctrlKey && !e.shiftKey) {\n          e.preventDefault(); // Make sure the necessary scripts and data are\n          // loaded before continuing.\n\n          navigate(to, {\n            state: state,\n            replace: replace\n          });\n        }\n\n        return true;\n      }\n    }, rest));\n  };\n\n  return GatsbyLink;\n}(_react.default.Component);\n\nGatsbyLink.propTypes = (0, _extends2.default)({}, NavLinkPropTypes, {\n  innerRef: _propTypes.default.func,\n  onClick: _propTypes.default.func,\n  to: _propTypes.default.string.isRequired,\n  replace: _propTypes.default.bool\n});\nvar _default = GatsbyLink;\nexports.default = _default;\n\nvar navigate = function navigate(to, options) {\n  window.___navigate(withPrefix(to), options);\n};\n\nexports.navigate = navigate;\n\nvar push = function push(to) {\n  console.warn(\"The \\\"push\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n\n  window.___push(withPrefix(to));\n};\n\nexports.push = push;\n\nvar replace = function replace(to) {\n  console.warn(\"The \\\"replace\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n\n  window.___replace(withPrefix(to));\n}; // TODO: Remove navigateTo for Gatsby v3\n\n\nexports.replace = replace;\n\nvar navigateTo = function navigateTo(to) {\n  console.warn(\"The \\\"navigateTo\\\" method is now deprecated and will be removed in Gatsby v3. Please use \\\"navigate\\\" instead.\");\n  return push(to);\n};\n\nexports.navigateTo = navigateTo;","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&\"function\"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?\"symbol\":typeof a},_createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,\"value\"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_react=require(\"react\"),_react2=_interopRequireDefault(_react);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}function _possibleConstructorReturn(a,b){if(!a)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return b&&(\"object\"==typeof b||\"function\"==typeof b)?b:a}function _inherits(a,b){if(\"function\"!=typeof b&&null!==b)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof b);a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),b&&(Object.setPrototypeOf?Object.setPrototypeOf(a,b):a.__proto__=b)}var Image=function(a){function b(){return _classCallCheck(this,b),_possibleConstructorReturn(this,(b.__proto__||Object.getPrototypeOf(b)).apply(this,arguments))}return _inherits(b,a),_createClass(b,[{key:\"canUseWebP\",value:function(){var a=\"object\"===(\"undefined\"==typeof document?\"undefined\":_typeof(document))?document.createElement(\"canvas\"):{};return!!(a.getContext&&a.getContext(\"2d\"))&&0===a.toDataURL(\"image/webp\").indexOf(\"data:image/webp\")}},{key:\"render\",value:function(){var a=this.props,b=a.src,c=a.webp,d=a.alt,e=a.title,f=a.style,g=a.className,h=this.canUseWebP(),i=b;return!0===h&&(i=c),_react2.default.createElement(\"img\",{src:i,alt:d,title:e,style:f,className:g})}}]),b}(_react.Component);exports.default=Image;","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","import { Group } from \"./Pt\";\nexport const Const = {\n    xy: \"xy\",\n    yz: \"yz\",\n    xz: \"xz\",\n    xyz: \"xyz\",\n    horizontal: 0,\n    vertical: 1,\n    identical: 0,\n    right: 4,\n    bottom_right: 5,\n    bottom: 6,\n    bottom_left: 7,\n    left: 8,\n    top_left: 1,\n    top: 2,\n    top_right: 3,\n    epsilon: 0.0001,\n    max: Number.MAX_VALUE,\n    min: Number.MIN_VALUE,\n    pi: Math.PI,\n    two_pi: 6.283185307179586,\n    half_pi: 1.5707963267948966,\n    quarter_pi: 0.7853981633974483,\n    one_degree: 0.017453292519943295,\n    rad_to_deg: 57.29577951308232,\n    deg_to_rad: 0.017453292519943295,\n    gravity: 9.81,\n    newton: 0.10197,\n    gaussian: 0.3989422804014327\n};\nexport class Util {\n    static warnLevel(lv) {\n        if (lv) {\n            Util._warnLevel = lv;\n        }\n        return Util._warnLevel;\n    }\n    static getArgs(args) {\n        if (args.length < 1)\n            return [];\n        let pos = [];\n        let isArray = Array.isArray(args[0]) || ArrayBuffer.isView(args[0]);\n        if (typeof args[0] === 'number') {\n            pos = Array.prototype.slice.call(args);\n        }\n        else if (typeof args[0] === 'object' && !isArray) {\n            let a = [\"x\", \"y\", \"z\", \"w\"];\n            let p = args[0];\n            for (let i = 0; i < a.length; i++) {\n                if ((p.length && i >= p.length) || !(a[i] in p))\n                    break;\n                pos.push(p[a[i]]);\n            }\n        }\n        else if (isArray) {\n            pos = [].slice.call(args[0]);\n        }\n        return pos;\n    }\n    static warn(message = \"error\", defaultReturn = undefined) {\n        if (Util.warnLevel() == \"error\") {\n            throw new Error(message);\n        }\n        else if (Util.warnLevel() == \"warn\") {\n            console.warn(message);\n        }\n        return defaultReturn;\n    }\n    static randomInt(range, start = 0) {\n        return Math.floor(Math.random() * range) + start;\n    }\n    static split(pts, size, stride, loopBack = false) {\n        let st = stride || size;\n        let chunks = [];\n        for (let i = 0; i < pts.length; i++) {\n            if (i * st + size > pts.length) {\n                if (loopBack) {\n                    let g = pts.slice(i * st);\n                    g = g.concat(pts.slice(0, (i * st + size) % size));\n                    chunks.push(g);\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                chunks.push(pts.slice(i * st, i * st + size));\n            }\n        }\n        return chunks;\n    }\n    static flatten(pts, flattenAsGroup = true) {\n        let arr = (flattenAsGroup) ? new Group() : new Array();\n        return arr.concat.apply(arr, pts);\n    }\n    static combine(a, b, op) {\n        let result = [];\n        for (let i = 0, len = a.length; i < len; i++) {\n            for (let k = 0, lenB = b.length; k < lenB; k++) {\n                result.push(op(a[i], b[k]));\n            }\n        }\n        return result;\n    }\n    static zip(arrays) {\n        let z = [];\n        for (let i = 0, len = arrays[0].length; i < len; i++) {\n            let p = [];\n            for (let k = 0; k < arrays.length; k++) {\n                p.push(arrays[k][i]);\n            }\n            z.push(p);\n        }\n        return z;\n    }\n    static stepper(max, min = 0, stride = 1, callback) {\n        let c = min;\n        return function () {\n            c += stride;\n            if (c >= max) {\n                c = min + (c - max);\n            }\n            if (callback)\n                callback(c);\n            return c;\n        };\n    }\n    static forRange(fn, range, start = 0, step = 1) {\n        let temp = [];\n        for (let i = start, len = range; i < len; i += step) {\n            temp[i] = fn(i);\n        }\n        return temp;\n    }\n}\nUtil._warnLevel = \"mute\";\n//# sourceMappingURL=Util.js.map","import { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport class Vec {\n    static add(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b[i] || 0;\n        }\n        return a;\n    }\n    static subtract(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b[i] || 0;\n        }\n        return a;\n    }\n    static multiply(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise multiply since the array lengths don't match: ${a.toString()} multiply-with ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b[i];\n        }\n        return a;\n    }\n    static divide(a, b) {\n        if (typeof b == \"number\") {\n            if (b === 0)\n                throw new Error(\"Cannot divide by zero\");\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise divide since the array lengths don't match. ${a.toString()} divide-by ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b[i];\n        }\n        return a;\n    }\n    static dot(a, b) {\n        if (a.length != b.length)\n            throw new Error(\"Array lengths don't match\");\n        let d = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            d += a[i] * b[i];\n        }\n        return d;\n    }\n    static cross2D(a, b) {\n        return a[0] * b[1] - a[1] * b[0];\n    }\n    static cross(a, b) {\n        return new Pt((a[1] * b[2] - a[2] * b[1]), (a[2] * b[0] - a[0] * b[2]), (a[0] * b[1] - a[1] * b[0]));\n    }\n    static magnitude(a) {\n        return Math.sqrt(Vec.dot(a, a));\n    }\n    static unit(a, magnitude = undefined) {\n        let m = (magnitude === undefined) ? Vec.magnitude(a) : magnitude;\n        if (m === 0)\n            throw new Error(\"Cannot calculate unit vector because magnitude is 0\");\n        return Vec.divide(a, m);\n    }\n    static abs(a) {\n        return Vec.map(a, Math.abs);\n    }\n    static floor(a) {\n        return Vec.map(a, Math.floor);\n    }\n    static ceil(a) {\n        return Vec.map(a, Math.ceil);\n    }\n    static round(a) {\n        return Vec.map(a, Math.round);\n    }\n    static max(a) {\n        let m = Number.MIN_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.max(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static min(a) {\n        let m = Number.MAX_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.min(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static sum(a) {\n        let s = 0;\n        for (let i = 0, len = a.length; i < len; i++)\n            s += a[i];\n        return s;\n    }\n    static map(a, fn) {\n        for (let i = 0, len = a.length; i < len; i++) {\n            a[i] = fn(a[i], i, a);\n        }\n        return a;\n    }\n}\nexport class Mat {\n    static add(a, b) {\n        if (typeof b != \"number\") {\n            if (a[0].length != b[0].length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n            if (a.length != b.length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n        }\n        let g = new Group();\n        let isNum = typeof b == \"number\";\n        for (let i = 0, len = a.length; i < len; i++) {\n            g.push(a[i].$add((isNum) ? b : b[i]));\n        }\n        return g;\n    }\n    static multiply(a, b, transposed = false, elementwise = false) {\n        let g = new Group();\n        if (typeof b != \"number\") {\n            if (elementwise) {\n                if (a.length != b.length)\n                    throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    g.push(a[ai].$multiply(b[ai]));\n                }\n            }\n            else {\n                if (!transposed && a[0].length != b.length)\n                    throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n                if (transposed && a[0].length != b[0].length)\n                    throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n                if (!transposed)\n                    b = Mat.transpose(b);\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    let p = Pt.make(b.length, 0);\n                    for (let bi = 0, blen = b.length; bi < blen; bi++) {\n                        p[bi] = Vec.dot(a[ai], b[bi]);\n                    }\n                    g.push(p);\n                }\n            }\n        }\n        else {\n            for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                g.push(a[ai].$multiply(b));\n            }\n        }\n        return g;\n    }\n    static zipSlice(g, index, defaultValue = false) {\n        let z = [];\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (g[i].length - 1 < index && defaultValue === false)\n                throw `Index ${index} is out of bounds`;\n            z.push(g[i][index] || defaultValue);\n        }\n        return new Pt(z);\n    }\n    static zip(g, defaultValue = false, useLongest = false) {\n        let ps = new Group();\n        let len = (useLongest) ? g.reduce((a, b) => Math.max(a, b.length), 0) : g[0].length;\n        for (let i = 0; i < len; i++) {\n            ps.push(Mat.zipSlice(g, i, defaultValue));\n        }\n        return ps;\n    }\n    static transpose(g, defaultValue = false, useLongest = false) {\n        return Mat.zip(g, defaultValue, useLongest);\n    }\n    static transform2D(pt, m) {\n        let x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n        let y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n        return new Pt(x, y);\n    }\n    static scale2DMatrix(x, y) {\n        return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n    }\n    static rotate2DMatrix(cosA, sinA) {\n        return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n    }\n    static shear2DMatrix(tanX, tanY) {\n        return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n    }\n    static translate2DMatrix(x, y) {\n        return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n    }\n    static scaleAt2DMatrix(sx, sy, at) {\n        let m = Mat.scale2DMatrix(sx, sy);\n        m[2][0] = -at[0] * sx + at[0];\n        m[2][1] = -at[1] * sy + at[1];\n        return m;\n    }\n    static rotateAt2DMatrix(cosA, sinA, at) {\n        let m = Mat.rotate2DMatrix(cosA, sinA);\n        m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n        m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n        return m;\n    }\n    static shearAt2DMatrix(tanX, tanY, at) {\n        let m = Mat.shear2DMatrix(tanX, tanY);\n        m[2][0] = -at[1] * tanY;\n        m[2][1] = -at[0] * tanX;\n        return m;\n    }\n    static reflectAt2DMatrix(p1, p2) {\n        let intercept = Line.intercept(p1, p2);\n        if (intercept == undefined) {\n            return [\n                new Pt([-1, 0, 0]),\n                new Pt([0, 1, 0]),\n                new Pt([p1[0] + p2[0], 0, 1])\n            ];\n        }\n        else {\n            let yi = intercept.yi;\n            let ang2 = Math.atan(intercept.slope) * 2;\n            let cosA = Math.cos(ang2);\n            let sinA = Math.sin(ang2);\n            return [\n                new Pt([cosA, sinA, 0]),\n                new Pt([sinA, -cosA, 0]),\n                new Pt([-yi * sinA, yi + yi * cosA, 1])\n            ];\n        }\n    }\n}\n//# sourceMappingURL=LinearAlgebra.js.map","import { Util } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Pt, Group } from \"./Pt\";\nimport { Mat } from \"./LinearAlgebra\";\nlet _errorLength = (obj, param = \"expected\") => Util.warn(\"Group's length is less than \" + param, obj);\nlet _errorOutofBound = (obj, param = \"\") => Util.warn(`Index ${param} is out of bound in Group`, obj);\nexport class Line {\n    static fromAngle(anchor, angle, magnitude) {\n        let g = new Group(new Pt(anchor), new Pt(anchor));\n        g[1].toAngle(angle, magnitude, true);\n        return g;\n    }\n    static slope(p1, p2) {\n        return (p2[0] - p1[0] === 0) ? undefined : (p2[1] - p1[1]) / (p2[0] - p1[0]);\n    }\n    static intercept(p1, p2) {\n        if (p2[0] - p1[0] === 0) {\n            return undefined;\n        }\n        else {\n            let m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\n            let c = p1[1] - m * p1[0];\n            return { slope: m, yi: c, xi: (m === 0) ? undefined : -c / m };\n        }\n    }\n    static sideOfPt2D(line, pt) {\n        return (line[1][0] - line[0][0]) * (pt[1] - line[0][1]) - (pt[0] - line[0][0]) * (line[1][1] - line[0][1]);\n    }\n    static collinear(p1, p2, p3, threshold = 0.01) {\n        let a = new Pt(0, 0, 0).to(p1).$subtract(p2);\n        let b = new Pt(0, 0, 0).to(p1).$subtract(p3);\n        return a.$cross(b).divide(1000).equals(new Pt(0, 0, 0), threshold);\n    }\n    static magnitude(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitude() : 0;\n    }\n    static magnitudeSq(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitudeSq() : 0;\n    }\n    static perpendicularFromPt(line, pt, asProjection = false) {\n        if (line[0].equals(line[1]))\n            return undefined;\n        let a = line[0].$subtract(line[1]);\n        let b = line[1].$subtract(pt);\n        let proj = b.$subtract(a.$project(b));\n        return (asProjection) ? proj : proj.$add(pt);\n    }\n    static distanceFromPt(line, pt) {\n        return Line.perpendicularFromPt(line, pt, true).magnitude();\n    }\n    static intersectRay2D(la, lb) {\n        let a = Line.intercept(la[0], la[1]);\n        let b = Line.intercept(lb[0], lb[1]);\n        let pa = la[0];\n        let pb = lb[0];\n        if (a == undefined) {\n            if (b == undefined)\n                return undefined;\n            let y1 = -b.slope * (pb[0] - pa[0]) + pb[1];\n            return new Pt(pa[0], y1);\n        }\n        else {\n            if (b == undefined) {\n                let y1 = -a.slope * (pa[0] - pb[0]) + pa[1];\n                return new Pt(pb[0], y1);\n            }\n            else if (b.slope != a.slope) {\n                let px = (a.slope * pa[0] - b.slope * pb[0] + pb[1] - pa[1]) / (a.slope - b.slope);\n                let py = a.slope * (px - pa[0]) + pa[1];\n                return new Pt(px, py);\n            }\n            else {\n                if (a.yi == b.yi) {\n                    return new Pt(pa[0], pa[1]);\n                }\n                else {\n                    return undefined;\n                }\n            }\n        }\n    }\n    static intersectLine2D(la, lb) {\n        let pt = Line.intersectRay2D(la, lb);\n        return (pt && Geom.withinBound(pt, la[0], la[1]) && Geom.withinBound(pt, lb[0], lb[1])) ? pt : undefined;\n    }\n    static intersectLineWithRay2D(line, ray) {\n        let pt = Line.intersectRay2D(line, ray);\n        return (pt && Geom.withinBound(pt, line[0], line[1])) ? pt : undefined;\n    }\n    static intersectPolygon2D(lineOrRay, poly, sourceIsRay = false) {\n        let fn = sourceIsRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        let pts = new Group();\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let next = (i === len - 1) ? 0 : i + 1;\n            let d = fn([poly[i], poly[next]], lineOrRay);\n            if (d)\n                pts.push(d);\n        }\n        return (pts.length > 0) ? pts : undefined;\n    }\n    static intersectLines2D(lines1, lines2, isRay = false) {\n        let group = new Group();\n        let fn = isRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        for (let i = 0, len = lines1.length; i < len; i++) {\n            for (let k = 0, lenk = lines2.length; k < lenk; k++) {\n                let _ip = fn(lines1[i], lines2[k]);\n                if (_ip)\n                    group.push(_ip);\n            }\n        }\n        return group;\n    }\n    static intersectGridWithRay2D(ray, gridPt) {\n        let t = Line.intercept(new Pt(ray[0]).subtract(gridPt), new Pt(ray[1]).subtract(gridPt));\n        let g = new Group();\n        if (t && t.xi)\n            g.push(new Pt(gridPt[0] + t.xi, gridPt[1]));\n        if (t && t.yi)\n            g.push(new Pt(gridPt[0], gridPt[1] + t.yi));\n        return g;\n    }\n    static intersectGridWithLine2D(line, gridPt) {\n        let g = Line.intersectGridWithRay2D(line, gridPt);\n        let gg = new Group();\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (Geom.withinBound(g[i], line[0], line[1]))\n                gg.push(g[i]);\n        }\n        return gg;\n    }\n    static intersectRect2D(line, rect) {\n        let box = Geom.boundingBox(Group.fromPtArray(line));\n        if (!Rectangle.hasIntersectRect2D(box, rect))\n            return new Group();\n        return Line.intersectLines2D([line], Rectangle.sides(rect));\n    }\n    static subpoints(line, num) {\n        let pts = new Group();\n        for (let i = 1; i <= num; i++) {\n            pts.push(Geom.interpolate(line[0], line[1], i / (num + 1)));\n        }\n        return pts;\n    }\n    static crop(line, size, index = 0, cropAsCircle = true) {\n        let tdx = (index === 0) ? 1 : 0;\n        let ls = line[tdx].$subtract(line[index]);\n        if (ls[0] === 0 || size[0] === 0)\n            return line[index];\n        if (cropAsCircle) {\n            let d = ls.unit().multiply(size[1]);\n            return line[index].$add(d);\n        }\n        else {\n            let rect = Rectangle.fromCenter(line[index], size);\n            let sides = Rectangle.sides(rect);\n            let sideIdx = 0;\n            if (Math.abs(ls[1] / ls[0]) > Math.abs(size[1] / size[0])) {\n                sideIdx = (ls[1] < 0) ? 0 : 2;\n            }\n            else {\n                sideIdx = (ls[0] < 0) ? 3 : 1;\n            }\n            return Line.intersectRay2D(sides[sideIdx], line);\n        }\n    }\n    static marker(line, size, graphic = (\"arrow\" || \"line\"), atTail = true) {\n        let h = atTail ? 0 : 1;\n        let t = atTail ? 1 : 0;\n        let unit = line[h].$subtract(line[t]);\n        if (unit.magnitudeSq() === 0)\n            return new Group();\n        unit.unit();\n        let ps = Geom.perpendicular(unit).multiply(size[0]).add(line[t]);\n        if (graphic == \"arrow\") {\n            ps.add(unit.$multiply(size[1]));\n            return new Group(line[t], ps[0], ps[1]);\n        }\n        else {\n            return new Group(ps[0], ps[1]);\n        }\n    }\n    static toRect(line) {\n        return new Group(line[0].$min(line[1]), line[0].$max(line[1]));\n    }\n}\nexport class Rectangle {\n    static from(topLeft, widthOrSize, height) {\n        return Rectangle.fromTopLeft(topLeft, widthOrSize, height);\n    }\n    static fromTopLeft(topLeft, widthOrSize, height) {\n        let size = (typeof widthOrSize == \"number\") ? [widthOrSize, (height || widthOrSize)] : widthOrSize;\n        return new Group(new Pt(topLeft), new Pt(topLeft).add(size));\n    }\n    static fromCenter(center, widthOrSize, height) {\n        let half = (typeof widthOrSize == \"number\") ? [widthOrSize / 2, (height || widthOrSize) / 2] : new Pt(widthOrSize).divide(2);\n        return new Group(new Pt(center).subtract(half), new Pt(center).add(half));\n    }\n    static toCircle(pts, within = true) {\n        return Circle.fromRect(pts, within);\n    }\n    static toSquare(pts, enclose = false) {\n        let s = Rectangle.size(pts);\n        let m = (enclose) ? s.maxValue().value : s.minValue().value;\n        return Rectangle.fromCenter(Rectangle.center(pts), m, m);\n    }\n    static size(pts) {\n        return pts[0].$max(pts[1]).subtract(pts[0].$min(pts[1]));\n    }\n    static center(pts) {\n        let min = pts[0].$min(pts[1]);\n        let max = pts[0].$max(pts[1]);\n        return min.add(max.$subtract(min).divide(2));\n    }\n    static corners(rect) {\n        let p0 = rect[0].$min(rect[1]);\n        let p2 = rect[0].$max(rect[1]);\n        return new Group(p0, new Pt(p2.x, p0.y), p2, new Pt(p0.x, p2.y));\n    }\n    static sides(rect) {\n        let [p0, p1, p2, p3] = Rectangle.corners(rect);\n        return [\n            new Group(p0, p1), new Group(p1, p2),\n            new Group(p2, p3), new Group(p3, p0)\n        ];\n    }\n    static boundingBox(rects) {\n        let merged = Util.flatten(rects, false);\n        let min = Pt.make(2, Number.MAX_VALUE);\n        let max = Pt.make(2, Number.MIN_VALUE);\n        for (let i = 0, len = merged.length; i < len; i++) {\n            for (let k = 0; k < 2; k++) {\n                min[k] = Math.min(min[k], merged[i][k]);\n                max[k] = Math.max(max[k], merged[i][k]);\n            }\n        }\n        return new Group(min, max);\n    }\n    static polygon(rect) {\n        return Rectangle.corners(rect);\n    }\n    static quadrants(rect, center) {\n        let corners = Rectangle.corners(rect);\n        let _center = (center != undefined) ? new Pt(center) : Rectangle.center(rect);\n        return corners.map((c) => new Group(c, _center).boundingBox());\n    }\n    static halves(rect, ratio = 0.5, asRows = false) {\n        let min = rect[0].$min(rect[1]);\n        let max = rect[0].$max(rect[1]);\n        let mid = (asRows) ? Num.lerp(min[1], max[1], ratio) : Num.lerp(min[0], max[0], ratio);\n        return (asRows)\n            ? [new Group(min, new Pt(max[0], mid)), new Group(new Pt(min[0], mid), max)]\n            : [new Group(min, new Pt(mid, max[1])), new Group(new Pt(mid, min[1]), max)];\n    }\n    static withinBound(rect, pt) {\n        return Geom.withinBound(pt, rect[0], rect[1]);\n    }\n    static hasIntersectRect2D(rect1, rect2, resetBoundingBox = false) {\n        if (resetBoundingBox) {\n            rect1 = Geom.boundingBox(rect1);\n            rect2 = Geom.boundingBox(rect2);\n        }\n        if (rect1[0][0] > rect2[1][0] || rect2[0][0] > rect1[1][0])\n            return false;\n        if (rect1[0][1] > rect2[1][1] || rect2[0][1] > rect1[1][1])\n            return false;\n        return true;\n    }\n    static intersectRect2D(rect1, rect2) {\n        if (!Rectangle.hasIntersectRect2D(rect1, rect2))\n            return new Group();\n        return Line.intersectLines2D(Rectangle.sides(rect1), Rectangle.sides(rect2));\n    }\n}\nexport class Circle {\n    static fromRect(pts, enclose = false) {\n        let r = 0;\n        let min = r = Rectangle.size(pts).minValue().value / 2;\n        if (enclose) {\n            let max = Rectangle.size(pts).maxValue().value / 2;\n            r = Math.sqrt(min * min + max * max);\n        }\n        else {\n            r = min;\n        }\n        return new Group(Rectangle.center(pts), new Pt(r, r));\n    }\n    static fromCenter(pt, radius) {\n        return new Group(new Pt(pt), new Pt(radius, radius));\n    }\n    static withinBound(pts, pt, threshold = 0) {\n        let d = pts[0].$subtract(pt);\n        return d.dot(d) + threshold < pts[1].x * pts[1].x;\n    }\n    static intersectRay2D(pts, ray) {\n        let d = ray[0].$subtract(ray[1]);\n        let f = pts[0].$subtract(ray[0]);\n        let a = d.dot(d);\n        let b = f.dot(d);\n        let c = f.dot(f) - pts[1].x * pts[1].x;\n        let p = b / a;\n        let q = c / a;\n        let disc = p * p - q;\n        if (disc < 0) {\n            return new Group();\n        }\n        else {\n            let discSqrt = Math.sqrt(disc);\n            let t1 = -p + discSqrt;\n            let p1 = ray[0].$subtract(d.$multiply(t1));\n            if (disc === 0)\n                return new Group(p1);\n            let t2 = -p - discSqrt;\n            let p2 = ray[0].$subtract(d.$multiply(t2));\n            return new Group(p1, p2);\n        }\n    }\n    static intersectLine2D(pts, line) {\n        let ps = Circle.intersectRay2D(pts, line);\n        let g = new Group();\n        if (ps.length > 0) {\n            for (let i = 0, len = ps.length; i < len; i++) {\n                if (Rectangle.withinBound(line, ps[i]))\n                    g.push(ps[i]);\n            }\n        }\n        return g;\n    }\n    static intersectCircle2D(pts, circle) {\n        let dv = circle[0].$subtract(pts[0]);\n        let dr2 = dv.magnitudeSq();\n        let dr = Math.sqrt(dr2);\n        let ar = pts[1].x;\n        let br = circle[1].x;\n        let ar2 = ar * ar;\n        let br2 = br * br;\n        if (dr > ar + br) {\n            return new Group();\n        }\n        else if (dr < Math.abs(ar - br)) {\n            return new Group(pts[0].clone());\n        }\n        else {\n            let a = (ar2 - br2 + dr2) / (2 * dr);\n            let h = Math.sqrt(ar2 - a * a);\n            let p = dv.$multiply(a / dr).add(pts[0]);\n            return new Group(new Pt(p.x + h * dv.y / dr, p.y - h * dv.x / dr), new Pt(p.x - h * dv.y / dr, p.y + h * dv.x / dr));\n        }\n    }\n    static intersectRect2D(pts, rect) {\n        let sides = Rectangle.sides(rect);\n        let g = [];\n        for (let i = 0, len = sides.length; i < len; i++) {\n            let ps = Circle.intersectLine2D(pts, sides[i]);\n            if (ps.length > 0)\n                g.push(ps);\n        }\n        return Util.flatten(g);\n    }\n    static toRect(pts, within = false) {\n        let r = pts[1][0];\n        if (within) {\n            let half = Math.sqrt(r * r) / 2;\n            return new Group(pts[0].$subtract(half), pts[0].$add(half));\n        }\n        else {\n            return new Group(pts[0].$subtract(r), pts[0].$add(r));\n        }\n    }\n    static toTriangle(pts, within = true) {\n        if (within) {\n            let ang = -Math.PI / 2;\n            let inc = Math.PI * 2 / 3;\n            let g = new Group();\n            for (let i = 0; i < 3; i++) {\n                g.push(pts[0].clone().toAngle(ang, pts[1][0], true));\n                ang += inc;\n            }\n            return g;\n        }\n        else {\n            return Triangle.fromCenter(pts[0], pts[1][0]);\n        }\n    }\n}\nexport class Triangle {\n    static fromRect(rect) {\n        let top = rect[0].$add(rect[1]).divide(2);\n        top.y = rect[0][1];\n        let left = rect[1].clone();\n        left.x = rect[0][0];\n        return new Group(top, rect[1].clone(), left);\n    }\n    static fromCircle(circle) {\n        return Circle.toTriangle(circle, true);\n    }\n    static fromCenter(pt, size) {\n        return Triangle.fromCircle(Circle.fromCenter(pt, size));\n    }\n    static medial(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        return Polygon.midpoints(pts, true);\n    }\n    static oppositeSide(pts, index) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (index === 0) {\n            return Group.fromPtArray([pts[1], pts[2]]);\n        }\n        else if (index === 1) {\n            return Group.fromPtArray([pts[0], pts[2]]);\n        }\n        else {\n            return Group.fromPtArray([pts[0], pts[1]]);\n        }\n    }\n    static altitude(pts, index) {\n        let opp = Triangle.oppositeSide(pts, index);\n        if (opp.length > 1) {\n            return new Group(pts[index], Line.perpendicularFromPt(opp, pts[index]));\n        }\n        else {\n            return new Group();\n        }\n    }\n    static orthocenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Triangle.altitude(pts, 0);\n        let b = Triangle.altitude(pts, 1);\n        return Line.intersectRay2D(a, b);\n    }\n    static incenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Polygon.bisector(pts, 0).add(pts[0]);\n        let b = Polygon.bisector(pts, 1).add(pts[1]);\n        return Line.intersectRay2D(new Group(pts[0], a), new Group(pts[1], b));\n    }\n    static incircle(pts, center) {\n        let c = (center) ? center : Triangle.incenter(pts);\n        let area = Polygon.area(pts);\n        let perim = Polygon.perimeter(pts, true);\n        let r = 2 * area / perim.total;\n        return Circle.fromCenter(c, r);\n    }\n    static circumcenter(pts) {\n        let md = Triangle.medial(pts);\n        let a = [md[0], Geom.perpendicular(pts[0].$subtract(md[0])).p1.$add(md[0])];\n        let b = [md[1], Geom.perpendicular(pts[1].$subtract(md[1])).p1.$add(md[1])];\n        return Line.intersectRay2D(a, b);\n    }\n    static circumcircle(pts, center) {\n        let c = (center) ? center : Triangle.circumcenter(pts);\n        let r = pts[0].$subtract(c).magnitude();\n        return Circle.fromCenter(c, r);\n    }\n}\nexport class Polygon {\n    static centroid(pts) {\n        return Geom.centroid(pts);\n    }\n    static rectangle(center, widthOrSize, height) {\n        return Rectangle.corners(Rectangle.fromCenter(center, widthOrSize, height));\n    }\n    static fromCenter(center, radius, sides) {\n        let g = new Group();\n        for (let i = 0; i < sides; i++) {\n            let ang = Math.PI * 2 * i / sides;\n            g.push(new Pt(Math.cos(ang) * radius, Math.sin(ang) * radius).add(center));\n        }\n        return g;\n    }\n    static lineAt(pts, idx) {\n        if (idx < 0 || idx >= pts.length)\n            throw new Error(\"index out of the Polygon's range\");\n        return new Group(pts[idx], (idx === pts.length - 1) ? pts[0] : pts[idx + 1]);\n    }\n    static lines(pts, closePath = true) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sp = Util.split(pts, 2, 1);\n        if (closePath)\n            sp.push(new Group(pts[pts.length - 1], pts[0]));\n        return sp.map((g) => g);\n    }\n    static midpoints(pts, closePath = false, t = 0.5) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sides = Polygon.lines(pts, closePath);\n        let mids = sides.map((s) => Geom.interpolate(s[0], s[1], t));\n        return mids;\n    }\n    static adjacentSides(pts, index, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        if (index < 0 || index >= pts.length)\n            return _errorOutofBound(new Group(), index);\n        let gs = [];\n        let left = index - 1;\n        if (closePath && left < 0)\n            left = pts.length - 1;\n        if (left >= 0)\n            gs.push(new Group(pts[index], pts[left]));\n        let right = index + 1;\n        if (closePath && right > pts.length - 1)\n            right = 0;\n        if (right <= pts.length - 1)\n            gs.push(new Group(pts[index], pts[right]));\n        return gs;\n    }\n    static bisector(pts, index) {\n        let sides = Polygon.adjacentSides(pts, index, true);\n        if (sides.length >= 2) {\n            let a = sides[0][1].$subtract(sides[0][0]).unit();\n            let b = sides[1][1].$subtract(sides[1][0]).unit();\n            return a.add(b).divide(2);\n        }\n        else {\n            return undefined;\n        }\n    }\n    static perimeter(pts, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let lines = Polygon.lines(pts, closePath);\n        let mag = 0;\n        let p = Pt.make(lines.length, 0);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            let m = Line.magnitude(lines[i]);\n            mag += m;\n            p[i] = m;\n        }\n        return {\n            total: mag,\n            segments: p\n        };\n    }\n    static area(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        let det = (a, b) => a[0] * b[1] - a[1] * b[0];\n        let area = 0;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i < pts.length - 1) {\n                area += det(pts[i], pts[i + 1]);\n            }\n            else {\n                area += det(pts[i], pts[0]);\n            }\n        }\n        return Math.abs(area / 2);\n    }\n    static convexHull(pts, sorted = false) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (!sorted) {\n            pts = pts.slice();\n            pts.sort((a, b) => a[0] - b[0]);\n        }\n        let left = (a, b, c) => {\n            return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]) > 0;\n        };\n        let dq = [];\n        let bot = pts.length - 2;\n        let top = bot + 3;\n        dq[bot] = pts[2];\n        dq[top] = pts[2];\n        if (left(pts[0], pts[1], pts[2])) {\n            dq[bot + 1] = pts[0];\n            dq[bot + 2] = pts[1];\n        }\n        else {\n            dq[bot + 1] = pts[1];\n            dq[bot + 2] = pts[0];\n        }\n        for (let i = 3, len = pts.length; i < len; i++) {\n            let pt = pts[i];\n            if (left(dq[bot], dq[bot + 1], pt) && left(dq[top - 1], dq[top], pt)) {\n                continue;\n            }\n            while (!left(dq[bot], dq[bot + 1], pt)) {\n                bot += 1;\n            }\n            bot -= 1;\n            dq[bot] = pt;\n            while (!left(dq[top - 1], dq[top], pt)) {\n                top -= 1;\n            }\n            top += 1;\n            dq[top] = pt;\n        }\n        let hull = new Group();\n        for (let h = 0; h < (top - bot); h++) {\n            hull.push(dq[bot + h]);\n        }\n        return hull;\n    }\n    static network(pts, originIndex = 0) {\n        let g = [];\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i != originIndex)\n                g.push(new Group(pts[originIndex], pts[i]));\n        }\n        return g;\n    }\n    static nearestPt(pts, pt) {\n        let _near = Number.MAX_VALUE;\n        let _item = -1;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let d = pts[i].$subtract(pt).magnitudeSq();\n            if (d < _near) {\n                _near = d;\n                _item = i;\n            }\n        }\n        return _item;\n    }\n    static projectAxis(poly, unitAxis) {\n        let dot = unitAxis.dot(poly[0]);\n        let d = new Pt(dot, dot);\n        for (let n = 1, len = poly.length; n < len; n++) {\n            dot = unitAxis.dot(poly[n]);\n            d = new Pt(Math.min(dot, d[0]), Math.max(dot, d[1]));\n        }\n        return d;\n    }\n    static _axisOverlap(poly1, poly2, unitAxis) {\n        let pa = Polygon.projectAxis(poly1, unitAxis);\n        let pb = Polygon.projectAxis(poly2, unitAxis);\n        return (pa[0] < pb[0]) ? pb[0] - pa[1] : pa[0] - pb[1];\n    }\n    static hasIntersectPoint(poly, pt) {\n        let c = false;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let ln = Polygon.lineAt(poly, i);\n            if (((ln[0][1] > pt[1]) != (ln[1][1] > pt[1])) &&\n                (pt[0] < (ln[1][0] - ln[0][0]) * (pt[1] - ln[0][1]) / (ln[1][1] - ln[0][1]) + ln[0][0])) {\n                c = !c;\n            }\n        }\n        return c;\n    }\n    static hasIntersectCircle(poly, circle) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: null,\n            edge: null,\n            vertex: null,\n        };\n        let c = circle[0];\n        let r = circle[1][0];\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let edge = Polygon.lineAt(poly, i);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let poly2 = new Group(c.$add(axis.$multiply(r)), c.$subtract(axis.$multiply(r)));\n            let dist = Polygon._axisOverlap(poly, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                let check = Rectangle.withinBound(edge, Line.perpendicularFromPt(edge, c)) || Circle.intersectLine2D(circle, edge).length > 0;\n                if (check) {\n                    info.edge = edge;\n                    info.normal = axis;\n                    minDist = Math.abs(dist);\n                    info.which = i;\n                }\n            }\n        }\n        if (!info.edge)\n            return null;\n        let dir = c.$subtract(Polygon.centroid(poly)).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        info.dist = minDist;\n        info.vertex = c;\n        return info;\n    }\n    static hasIntersectPolygon(poly1, poly2) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: new Pt(),\n            edge: new Group(),\n            vertex: new Pt()\n        };\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, plen = (poly1.length + poly2.length); i < plen; i++) {\n            let edge = (i < poly1.length) ? Polygon.lineAt(poly1, i) : Polygon.lineAt(poly2, i - poly1.length);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let dist = Polygon._axisOverlap(poly1, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                info.edge = edge;\n                info.normal = axis;\n                minDist = Math.abs(dist);\n                info.which = (i < poly1.length) ? 0 : 1;\n            }\n        }\n        info.dist = minDist;\n        let b1 = (info.which === 0) ? poly2 : poly1;\n        let b2 = (info.which === 0) ? poly1 : poly2;\n        let c1 = Polygon.centroid(b1);\n        let c2 = Polygon.centroid(b2);\n        let dir = c1.$subtract(c2).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        let smallest = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = b1.length; i < len; i++) {\n            let d = info.normal.dot(b1[i].$subtract(c2));\n            if (d < smallest) {\n                smallest = d;\n                info.vertex = b1[i];\n            }\n        }\n        return info;\n    }\n    static intersectPolygon2D(poly1, poly2) {\n        let lp = Polygon.lines(poly1);\n        let g = [];\n        for (let i = 0, len = lp.length; i < len; i++) {\n            let ins = Line.intersectPolygon2D(lp[i], poly2, false);\n            if (ins)\n                g.push(ins);\n        }\n        return Util.flatten(g, true);\n    }\n    static toRects(polys) {\n        let boxes = polys.map((g) => Geom.boundingBox(g));\n        let merged = Util.flatten(boxes, false);\n        boxes.unshift(Geom.boundingBox(merged));\n        return boxes;\n    }\n}\nexport class Curve {\n    static getSteps(steps) {\n        let ts = new Group();\n        for (let i = 0; i <= steps; i++) {\n            let t = i / steps;\n            ts.push(new Pt(t * t * t, t * t, t, 1));\n        }\n        return ts;\n    }\n    static controlPoints(pts, index = 0, copyStart = false) {\n        if (index > pts.length - 1)\n            return new Group();\n        let _index = (i) => (i < pts.length - 1) ? i : pts.length - 1;\n        let p0 = pts[index];\n        index = (copyStart) ? index : index + 1;\n        return new Group(p0, pts[_index(index++)], pts[_index(index++)], pts[_index(index++)]);\n    }\n    static _calcPt(ctrls, params) {\n        let x = ctrls.reduce((a, c, i) => a + c.x * params[i], 0);\n        let y = ctrls.reduce((a, c, i) => a + c.y * params[i], 0);\n        if (ctrls[0].length > 2) {\n            let z = ctrls.reduce((a, c, i) => a + c.z * params[i], 0);\n            return new Pt(x, y, z);\n        }\n        return new Pt(x, y);\n    }\n    static catmullRom(pts, steps = 10) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.catmullRomStep(ts[i], c));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.catmullRomStep(ts[i], cp));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static catmullRomStep(step, ctrls) {\n        let m = new Group(new Pt(-0.5, 1, -0.5, 0), new Pt(1.5, -2.5, 0, 1), new Pt(-1.5, 2, 0.5, 0), new Pt(0.5, -0.5, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static cardinal(pts, steps = 10, tension = 0.5) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.cardinalStep(ts[i], c, tension));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.cardinalStep(ts[i], cp, tension));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static cardinalStep(step, ctrls, tension = 0.5) {\n        let m = new Group(new Pt(-1, 2, -1, 0), new Pt(-1, 1, 0, 0), new Pt(1, -2, 1, 0), new Pt(1, -1, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n    static bezier(pts, steps = 10) {\n        if (pts.length < 4)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.bezierStep(ts[i], c));\n                }\n                k += 3;\n            }\n        }\n        return ps;\n    }\n    static bezierStep(step, ctrls) {\n        let m = new Group(new Pt(-1, 3, -3, 1), new Pt(3, -6, 3, 0), new Pt(-3, 3, 0, 0), new Pt(1, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bspline(pts, steps = 10, tension = 1) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                if (tension !== 1) {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineTensionStep(ts[i], c, tension));\n                    }\n                }\n                else {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineStep(ts[i], c));\n                    }\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static bsplineStep(step, ctrls) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(0.5, -1, 0, 0.6666666666666666), new Pt(-0.5, 0.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bsplineTensionStep(step, ctrls, tension = 1) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(-1.5, 2, 0, -0.3333333333333333), new Pt(1.5, -2.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n}\n//# sourceMappingURL=Op.js.map","import { Const } from \"./Util\";\nimport { Curve } from \"./Op\";\nimport { Pt, Group } from \"./Pt\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Num {\n    static equals(a, b, threshold = 0.00001) {\n        return Math.abs(a - b) < threshold;\n    }\n    static lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n    static clamp(val, min, max) {\n        return Math.max(min, Math.min(max, val));\n    }\n    static boundValue(val, min, max) {\n        let len = Math.abs(max - min);\n        let a = val % len;\n        if (a > max)\n            a -= len;\n        else if (a < min)\n            a += len;\n        return a;\n    }\n    static within(p, a, b) {\n        return p >= Math.min(a, b) && p <= Math.max(a, b);\n    }\n    static randomRange(a, b = 0) {\n        let r = (a > b) ? (a - b) : (b - a);\n        return a + Math.random() * r;\n    }\n    static normalizeValue(n, a, b) {\n        let min = Math.min(a, b);\n        let max = Math.max(a, b);\n        return (n - min) / (max - min);\n    }\n    static sum(pts) {\n        let c = new Pt(pts[0]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            Vec.add(c, pts[i]);\n        }\n        return c;\n    }\n    static average(pts) {\n        return Num.sum(pts).divide(pts.length);\n    }\n    static cycle(t) {\n        return (Math.sin(Math.PI * 2 * t) + 1) / 2;\n    }\n    static mapToRange(n, currA, currB, targetA, targetB) {\n        if (currA == currB)\n            throw new Error(\"[currMin, currMax] must define a range that is not zero\");\n        let min = Math.min(targetA, targetB);\n        let max = Math.max(targetA, targetB);\n        return Num.normalizeValue(n, currA, currB) * (max - min) + min;\n    }\n}\nexport class Geom {\n    static boundAngle(angle) {\n        return Num.boundValue(angle, 0, 360);\n    }\n    static boundRadian(radian) {\n        return Num.boundValue(radian, 0, Const.two_pi);\n    }\n    static toRadian(angle) {\n        return angle * Const.deg_to_rad;\n    }\n    static toDegree(radian) {\n        return radian * Const.rad_to_deg;\n    }\n    static boundingBox(pts) {\n        let minPt = pts.reduce((a, p) => a.$min(p));\n        let maxPt = pts.reduce((a, p) => a.$max(p));\n        return new Group(minPt, maxPt);\n    }\n    static centroid(pts) {\n        return Num.average(pts);\n    }\n    static anchor(pts, ptOrIndex = 0, direction = \"to\") {\n        let method = (direction == \"to\") ? \"subtract\" : \"add\";\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (typeof ptOrIndex == \"number\") {\n                if (ptOrIndex !== i)\n                    pts[i][method](pts[ptOrIndex]);\n            }\n            else {\n                pts[i][method](ptOrIndex);\n            }\n        }\n    }\n    static interpolate(a, b, t = 0.5) {\n        let len = Math.min(a.length, b.length);\n        let d = Pt.make(len);\n        for (let i = 0; i < len; i++) {\n            d[i] = a[i] * (1 - t) + b[i] * t;\n        }\n        return d;\n    }\n    static perpendicular(pt, axis = Const.xy) {\n        let y = axis[1];\n        let x = axis[0];\n        let p = new Pt(pt);\n        let pa = new Pt(p);\n        pa[x] = -p[y];\n        pa[y] = p[x];\n        let pb = new Pt(p);\n        pb[x] = p[y];\n        pb[y] = -p[x];\n        return new Group(pa, pb);\n    }\n    static isPerpendicular(p1, p2) {\n        return new Pt(p1).dot(p2) === 0;\n    }\n    static withinBound(pt, boundPt1, boundPt2) {\n        for (let i = 0, len = Math.min(pt.length, boundPt1.length, boundPt2.length); i < len; i++) {\n            if (!Num.within(pt[i], boundPt1[i], boundPt2[i]))\n                return false;\n        }\n        return true;\n    }\n    static sortEdges(pts) {\n        let bounds = Geom.boundingBox(pts);\n        let center = bounds[1].add(bounds[0]).divide(2);\n        let fn = (a, b) => {\n            if (a.length < 2 || b.length < 2)\n                throw new Error(\"Pt dimension cannot be less than 2\");\n            let da = a.$subtract(center);\n            let db = b.$subtract(center);\n            if (da[0] >= 0 && db[0] < 0)\n                return 1;\n            if (da[0] < 0 && db[0] >= 0)\n                return -1;\n            if (da[0] == 0 && db[0] == 0) {\n                if (da[1] >= 0 || db[1] >= 0)\n                    return (da[1] > db[1]) ? 1 : -1;\n                return (db[1] > da[1]) ? 1 : -1;\n            }\n            let det = da.$cross2D(db);\n            if (det < 0)\n                return 1;\n            if (det > 0)\n                return -1;\n            return (da[0] * da[0] + da[1] * da[1] > db[0] * db[0] + db[1] * db[1]) ? 1 : -1;\n        };\n        return pts.sort(fn);\n    }\n    static scale(ps, scale, anchor) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let scs = (typeof scale == \"number\") ? Pt.make(pts[0].length, scale) : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = pts[i];\n            for (let k = 0, lenP = p.length; k < lenP; k++) {\n                p[k] = (anchor && anchor[k]) ? anchor[k] + (p[k] - anchor[k]) * scs[k] : p[k] * scs[k];\n            }\n        }\n        return Geom;\n    }\n    static rotate2D(ps, angle, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let fn = (anchor) ? Mat.rotateAt2DMatrix : Mat.rotate2DMatrix;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(cos, sin, anchor)));\n        }\n        return Geom;\n    }\n    static shear2D(ps, scale, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let s = (typeof scale == \"number\") ? [scale, scale] : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let fn = (anchor) ? Mat.shearAt2DMatrix : Mat.shear2DMatrix;\n        let tanx = Math.tan(s[0]);\n        let tany = Math.tan(s[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(tanx, tany, anchor)));\n        }\n        return Geom;\n    }\n    static reflect2D(ps, line, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let mat = Mat.reflectAt2DMatrix(line[0], line[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, mat));\n        }\n        return Geom;\n    }\n    static cosTable() {\n        let cos = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            cos[i] = Math.cos(i * Math.PI / 180);\n        let find = (rad) => cos[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: cos, cos: find };\n    }\n    static sinTable() {\n        let sin = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            sin[i] = Math.sin(i * Math.PI / 180);\n        let find = (rad) => sin[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: sin, sin: find };\n    }\n}\nexport class Shaping {\n    static linear(t, c = 1) {\n        return c * t;\n    }\n    static quadraticIn(t, c = 1) {\n        return c * t * t;\n    }\n    static quadraticOut(t, c = 1) {\n        return -c * t * (t - 2);\n    }\n    static quadraticInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * t * t * 4 : -c / 2 * ((dt - 1) * (dt - 3) - 1);\n    }\n    static cubicIn(t, c = 1) {\n        return c * t * t * t;\n    }\n    static cubicOut(t, c = 1) {\n        let dt = t - 1;\n        return c * (dt * dt * dt + 1);\n    }\n    static cubicInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * dt * dt * dt : c / 2 * ((dt - 2) * (dt - 2) * (dt - 2) + 2);\n    }\n    static exponentialIn(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, 1 / p);\n    }\n    static exponentialOut(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, p);\n    }\n    static sineIn(t, c = 1) {\n        return -c * Math.cos(t * Const.half_pi) + c;\n    }\n    static sineOut(t, c = 1) {\n        return c * Math.sin(t * Const.half_pi);\n    }\n    static sineInOut(t, c = 1) {\n        return -c / 2 * (Math.cos(Math.PI * t) - 1);\n    }\n    static cosineApprox(t, c = 1) {\n        let t2 = t * t;\n        let t4 = t2 * t2;\n        let t6 = t4 * t2;\n        return c * (4 * t6 / 9 - 17 * t4 / 9 + 22 * t2 / 9);\n    }\n    static circularIn(t, c = 1) {\n        return -c * (Math.sqrt(1 - t * t) - 1);\n    }\n    static circularOut(t, c = 1) {\n        let dt = t - 1;\n        return c * Math.sqrt(1 - dt * dt);\n    }\n    static circularInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? -c / 2 * (Math.sqrt(1 - dt * dt) - 1) : c / 2 * (Math.sqrt(1 - (dt - 2) * (dt - 2)) + 1);\n    }\n    static elasticIn(t, c = 1, p = 0.7) {\n        let dt = t - 1;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (-Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p));\n    }\n    static elasticOut(t, c = 1, p = 0.7) {\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (Math.pow(2, -10 * t) * Math.sin((t - s) * Const.two_pi / p)) + c;\n    }\n    static elasticInOut(t, c = 1, p = 0.6) {\n        let dt = t * 2;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        if (t < 0.5) {\n            dt -= 1;\n            return c * (-0.5 * (Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p)));\n        }\n        else {\n            dt -= 1;\n            return c * (0.5 * (Math.pow(2, -10 * dt) * Math.sin((dt - s) * Const.two_pi / p))) + c;\n        }\n    }\n    static bounceIn(t, c = 1) {\n        return c - Shaping.bounceOut((1 - t), c);\n    }\n    static bounceOut(t, c = 1) {\n        if (t < (1 / 2.75)) {\n            return c * (7.5625 * t * t);\n        }\n        else if (t < (2 / 2.75)) {\n            t -= 1.5 / 2.75;\n            return c * (7.5625 * t * t + 0.75);\n        }\n        else if (t < (2.5 / 2.75)) {\n            t -= 2.25 / 2.75;\n            return c * (7.5625 * t * t + 0.9375);\n        }\n        else {\n            t -= 2.625 / 2.75;\n            return c * (7.5625 * t * t + 0.984375);\n        }\n    }\n    static bounceInOut(t, c = 1) {\n        return (t < 0.5) ? Shaping.bounceIn(t * 2, c) / 2 : Shaping.bounceOut(t * 2 - 1, c) / 2 + c / 2;\n    }\n    static sigmoid(t, c = 1, p = 10) {\n        let d = p * (t - 0.5);\n        return c / (1 + Math.exp(-d));\n    }\n    static logSigmoid(t, c = 1, p = 0.7) {\n        p = Math.max(Const.epsilon, Math.min(1 - Const.epsilon, p));\n        p = 1 / (1 - p);\n        let A = 1 / (1 + Math.exp(((t - 0.5) * p * -2)));\n        let B = 1 / (1 + Math.exp(p));\n        let C = 1 / (1 + Math.exp(-p));\n        return c * (A - B) / (C - B);\n    }\n    static seat(t, c = 1, p = 0.5) {\n        if ((t < 0.5)) {\n            return c * (Math.pow(2 * t, 1 - p)) / 2;\n        }\n        else {\n            return c * (1 - (Math.pow(2 * (1 - t), 1 - p)) / 2);\n        }\n    }\n    static quadraticBezier(t, c = 1, p = [0.05, 0.95]) {\n        let a = (typeof p != \"number\") ? p[0] : p;\n        let b = (typeof p != \"number\") ? p[1] : 0.5;\n        let om2a = 1 - 2 * a;\n        if (om2a === 0) {\n            om2a = Const.epsilon;\n        }\n        let d = (Math.sqrt(a * a + om2a * t) - a) / om2a;\n        return c * ((1 - 2 * b) * (d * d) + (2 * b) * d);\n    }\n    static cubicBezier(t, c = 1, p1 = [0.1, 0.7], p2 = [0.9, 0.2]) {\n        let curve = new Group(new Pt(0, 0), new Pt(p1), new Pt(p2), new Pt(1, 1));\n        return c * Curve.bezierStep(new Pt(t * t * t, t * t, t, 1), Curve.controlPoints(curve)).y;\n    }\n    static quadraticTarget(t, c = 1, p1 = [0.2, 0.35]) {\n        let a = Math.min(1 - Const.epsilon, Math.max(Const.epsilon, p1[0]));\n        let b = Math.min(1, Math.max(0, p1[1]));\n        let A = (1 - b) / (1 - a) - (b / a);\n        let B = (A * (a * a) - b) / a;\n        let y = A * (t * t) - B * t;\n        return c * Math.min(1, Math.max(0, y));\n    }\n    static cliff(t, c = 1, p = 0.5) {\n        return (t > p) ? c : 0;\n    }\n    static step(fn, steps, t, c, ...args) {\n        let s = 1 / steps;\n        let tt = Math.floor(t / s) * s;\n        return fn(tt, c, ...args);\n    }\n}\nexport class Range {\n    constructor(g) {\n        this._dims = 0;\n        this._source = Group.fromPtArray(g);\n        this.calc();\n    }\n    get max() { return this._max.clone(); }\n    get min() { return this._min.clone(); }\n    get magnitude() { return this._mag.clone(); }\n    calc() {\n        if (!this._source)\n            return;\n        let dims = this._source[0].length;\n        this._dims = dims;\n        let max = new Pt(dims);\n        let min = new Pt(dims);\n        let mag = new Pt(dims);\n        for (let i = 0; i < dims; i++) {\n            max[i] = Const.min;\n            min[i] = Const.max;\n            mag[i] = 0;\n            let s = this._source.zipSlice(i);\n            for (let k = 0, len = s.length; k < len; k++) {\n                max[i] = Math.max(max[i], s[k]);\n                min[i] = Math.min(min[i], s[k]);\n                mag[i] = max[i] - min[i];\n            }\n        }\n        this._max = max;\n        this._min = min;\n        this._mag = mag;\n        return this;\n    }\n    mapTo(min, max, exclude) {\n        let target = new Group();\n        for (let i = 0, len = this._source.length; i < len; i++) {\n            let g = this._source[i];\n            let n = new Pt(this._dims);\n            for (let k = 0; k < this._dims; k++) {\n                n[k] = (exclude && exclude[k]) ? g[k] : Num.mapToRange(g[k], this._min[k], this._max[k], min, max);\n            }\n            target.push(n);\n        }\n        return target;\n    }\n    append(g, update = true) {\n        if (g[0].length !== this._dims)\n            throw new Error(`Dimensions don't match. ${this._dims} dimensions in Range and ${g[0].length} provided in parameter. `);\n        this._source = this._source.concat(g);\n        if (update)\n            this.calc();\n        return this;\n    }\n    ticks(count) {\n        let g = new Group();\n        for (let i = 0; i <= count; i++) {\n            let p = new Pt(this._dims);\n            for (let k = 0, len = this._max.length; k < len; k++) {\n                p[k] = Num.lerp(this._min[k], this._max[k], i / count);\n            }\n            g.push(p);\n        }\n        return g;\n    }\n}\n//# sourceMappingURL=Num.js.map","import { Util, Const } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport var PtBaseArray = Float32Array;\nexport class Pt extends PtBaseArray {\n    constructor(...args) {\n        if (args.length === 1 && typeof args[0] == \"number\") {\n            super(args[0]);\n        }\n        else {\n            super((args.length > 0) ? Util.getArgs(args) : [0, 0]);\n        }\n    }\n    static make(dimensions, defaultValue = 0, randomize = false) {\n        let p = new PtBaseArray(dimensions);\n        if (defaultValue)\n            p.fill(defaultValue);\n        if (randomize) {\n            for (let i = 0, len = p.length; i < len; i++) {\n                p[i] = p[i] * Math.random();\n            }\n        }\n        return new Pt(p);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get x() { return this[0]; }\n    set x(n) { this[0] = n; }\n    get y() { return this[1]; }\n    set y(n) { this[1] = n; }\n    get z() { return this[2]; }\n    set z(n) { this[2] = n; }\n    get w() { return this[3]; }\n    set w(n) { this[3] = n; }\n    clone() {\n        return new Pt(this);\n    }\n    equals(p, threshold = 0.000001) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            if (Math.abs(this[i] - p[i]) > threshold)\n                return false;\n        }\n        return true;\n    }\n    to(...args) {\n        let p = Util.getArgs(args);\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            this[i] = p[i];\n        }\n        return this;\n    }\n    $to(...args) {\n        return this.clone().to(...args);\n    }\n    toAngle(radian, magnitude, anchorFromPt = false) {\n        let m = (magnitude != undefined) ? magnitude : this.magnitude();\n        let change = [Math.cos(radian) * m, Math.sin(radian) * m];\n        return (anchorFromPt) ? this.add(change) : this.to(change);\n    }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    $take(axis) {\n        let p = [];\n        for (let i = 0, len = axis.length; i < len; i++) {\n            p.push(this[axis[i]] || 0);\n        }\n        return new Pt(p);\n    }\n    $concat(...args) {\n        return new Pt(this.toArray().concat(Util.getArgs(args)));\n    }\n    add(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.add(this, args[0]) : Vec.add(this, Util.getArgs(args));\n        return this;\n    }\n    $add(...args) { return this.clone().add(...args); }\n    subtract(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.subtract(this, args[0]) : Vec.subtract(this, Util.getArgs(args));\n        return this;\n    }\n    $subtract(...args) { return this.clone().subtract(...args); }\n    multiply(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.multiply(this, args[0]) : Vec.multiply(this, Util.getArgs(args));\n        return this;\n    }\n    $multiply(...args) { return this.clone().multiply(...args); }\n    divide(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.divide(this, args[0]) : Vec.divide(this, Util.getArgs(args));\n        return this;\n    }\n    $divide(...args) { return this.clone().divide(...args); }\n    magnitudeSq() { return Vec.dot(this, this); }\n    magnitude() { return Vec.magnitude(this); }\n    unit(magnitude = undefined) {\n        Vec.unit(this, magnitude);\n        return this;\n    }\n    $unit(magnitude = undefined) { return this.clone().unit(magnitude); }\n    dot(...args) { return Vec.dot(this, Util.getArgs(args)); }\n    $cross2D(...args) { return Vec.cross2D(this, Util.getArgs(args)); }\n    $cross(...args) { return Vec.cross(this, Util.getArgs(args)); }\n    $project(...args) {\n        return this.$multiply(this.dot(...args) / this.magnitudeSq());\n    }\n    projectScalar(...args) {\n        return this.dot(...args) / this.magnitude();\n    }\n    abs() {\n        Vec.abs(this);\n        return this;\n    }\n    $abs() {\n        return this.clone().abs();\n    }\n    floor() {\n        Vec.floor(this);\n        return this;\n    }\n    $floor() {\n        return this.clone().floor();\n    }\n    ceil() {\n        Vec.ceil(this);\n        return this;\n    }\n    $ceil() {\n        return this.clone().ceil();\n    }\n    round() {\n        Vec.round(this);\n        return this;\n    }\n    $round() {\n        return this.clone().round();\n    }\n    minValue() {\n        return Vec.min(this);\n    }\n    maxValue() {\n        return Vec.max(this);\n    }\n    $min(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.min(this[i], p[i]);\n        }\n        return m;\n    }\n    $max(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.max(this[i], p[i]);\n        }\n        return m;\n    }\n    angle(axis = Const.xy) {\n        return Math.atan2(this[axis[1]], this[axis[0]]);\n    }\n    angleBetween(p, axis = Const.xy) {\n        return Geom.boundRadian(this.angle(axis)) - Geom.boundRadian(p.angle(axis));\n    }\n    scale(scale, anchor) {\n        Geom.scale(this, scale, anchor || Pt.make(this.length, 0));\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        Geom.rotate2D(this, angle, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        Geom.shear2D(this, scale, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    reflect2D(line, axis) {\n        Geom.reflect2D(this, line, axis);\n        return this;\n    }\n    toString() {\n        return `Pt(${this.join(\", \")})`;\n    }\n    toArray() {\n        return [].slice.call(this);\n    }\n}\nexport class Group extends Array {\n    constructor(...args) {\n        super(...args);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get p1() { return this[0]; }\n    get p2() { return this[1]; }\n    get p3() { return this[2]; }\n    get p4() { return this[3]; }\n    get q1() { return this[this.length - 1]; }\n    get q2() { return this[this.length - 2]; }\n    get q3() { return this[this.length - 3]; }\n    get q4() { return this[this.length - 4]; }\n    clone() {\n        let group = new Group();\n        for (let i = 0, len = this.length; i < len; i++) {\n            group.push(this[i].clone());\n        }\n        return group;\n    }\n    static fromArray(list) {\n        let g = new Group();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = (list[i] instanceof Pt) ? list[i] : new Pt(list[i]);\n            g.push(p);\n        }\n        return g;\n    }\n    static fromPtArray(list) {\n        return Group.from(list);\n    }\n    split(chunkSize, stride, loopBack = false) {\n        let sp = Util.split(this, chunkSize, stride, loopBack);\n        return sp;\n    }\n    insert(pts, index = 0) {\n        Group.prototype.splice.apply(this, [index, 0, ...pts]);\n        return this;\n    }\n    remove(index = 0, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        return Group.prototype.splice.apply(this, param);\n    }\n    segments(pts_per_segment = 2, stride = 1, loopBack = false) {\n        return this.split(pts_per_segment, stride, loopBack);\n    }\n    lines() { return this.segments(2, 1); }\n    centroid() {\n        return Geom.centroid(this);\n    }\n    boundingBox() {\n        return Geom.boundingBox(this);\n    }\n    anchorTo(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"to\"); }\n    anchorFrom(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"from\"); }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    interpolate(t) {\n        t = Num.clamp(t, 0, 1);\n        let chunk = this.length - 1;\n        let tc = 1 / (this.length - 1);\n        let idx = Math.floor(t / tc);\n        return Geom.interpolate(this[idx], this[Math.min(this.length - 1, idx + 1)], (t - idx * tc) * chunk);\n    }\n    moveBy(...args) {\n        return this.add(...args);\n    }\n    moveTo(...args) {\n        let d = new Pt(Util.getArgs(args)).subtract(this[0]);\n        this.moveBy(d);\n        return this;\n    }\n    scale(scale, anchor) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.scale(this[i], scale, anchor || this[0]);\n        }\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.rotate2D(this[i], angle, anchor || this[0], axis);\n        }\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.shear2D(this[i], scale, anchor || this[0], axis);\n        }\n        return this;\n    }\n    reflect2D(line, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.reflect2D(this[i], line, axis);\n        }\n        return this;\n    }\n    sortByDimension(dim, desc = false) {\n        return this.sort((a, b) => (desc) ? b[dim] - a[dim] : a[dim] - b[dim]);\n    }\n    forEachPt(ptFn, ...args) {\n        if (!this[0][ptFn]) {\n            Util.warn(`${ptFn} is not a function of Pt`);\n            return this;\n        }\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i] = this[i][ptFn](...args);\n        }\n        return this;\n    }\n    add(...args) {\n        return this.forEachPt(\"add\", ...args);\n    }\n    subtract(...args) {\n        return this.forEachPt(\"subtract\", ...args);\n    }\n    multiply(...args) {\n        return this.forEachPt(\"multiply\", ...args);\n    }\n    divide(...args) {\n        return this.forEachPt(\"divide\", ...args);\n    }\n    $matrixAdd(g) {\n        return Mat.add(this, g);\n    }\n    $matrixMultiply(g, transposed = false, elementwise = false) {\n        return Mat.multiply(this, g, transposed, elementwise);\n    }\n    zipSlice(index, defaultValue = false) {\n        return Mat.zipSlice(this, index, defaultValue);\n    }\n    $zip(defaultValue = undefined, useLongest = false) {\n        return Mat.zip(this, defaultValue, useLongest);\n    }\n    toString() {\n        return \"Group[ \" + this.reduce((p, c) => p + c.toString() + \" \", \"\") + \" ]\";\n    }\n}\nexport class Bound extends Group {\n    constructor(...args) {\n        super(...args);\n        this._center = new Pt();\n        this._size = new Pt();\n        this._topLeft = new Pt();\n        this._bottomRight = new Pt();\n        this._inited = false;\n        this.init();\n    }\n    static fromBoundingRect(rect) {\n        let b = new Bound(new Pt(rect.left || 0, rect.top || 0), new Pt(rect.right || 0, rect.bottom || 0));\n        if (rect.width && rect.height)\n            b.size = new Pt(rect.width, rect.height);\n        return b;\n    }\n    static fromGroup(g) {\n        if (g.length < 2)\n            throw new Error(\"Cannot create a Bound from a group that has less than 2 Pt\");\n        return new Bound(g[0], g[g.length - 1]);\n    }\n    init() {\n        if (this.p1) {\n            this._size = this.p1.clone();\n            this._inited = true;\n        }\n        if (this.p1 && this.p2) {\n            let a = this.p1;\n            let b = this.p2;\n            this.topLeft = a.$min(b);\n            this._bottomRight = a.$max(b);\n            this._updateSize();\n            this._inited = true;\n        }\n    }\n    clone() {\n        return new Bound(this._topLeft.clone(), this._bottomRight.clone());\n    }\n    _updateSize() {\n        this._size = this._bottomRight.$subtract(this._topLeft).abs();\n        this._updateCenter();\n    }\n    _updateCenter() {\n        this._center = this._size.$multiply(0.5).add(this._topLeft);\n    }\n    _updatePosFromTop() {\n        this._bottomRight = this._topLeft.$add(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromBottom() {\n        this._topLeft = this._bottomRight.$subtract(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromCenter() {\n        let half = this._size.$multiply(0.5);\n        this._topLeft = this._center.$subtract(half);\n        this._bottomRight = this._center.$add(half);\n    }\n    get size() { return new Pt(this._size); }\n    set size(p) {\n        this._size = new Pt(p);\n        this._updatePosFromTop();\n    }\n    get center() { return new Pt(this._center); }\n    set center(p) {\n        this._center = new Pt(p);\n        this._updatePosFromCenter();\n    }\n    get topLeft() { return new Pt(this._topLeft); }\n    set topLeft(p) {\n        this._topLeft = new Pt(p);\n        this[0] = this._topLeft;\n        this._updateSize();\n    }\n    get bottomRight() { return new Pt(this._bottomRight); }\n    set bottomRight(p) {\n        this._bottomRight = new Pt(p);\n        this[1] = this._bottomRight;\n        this._updateSize();\n    }\n    get width() { return (this._size.length > 0) ? this._size.x : 0; }\n    set width(w) {\n        this._size.x = w;\n        this._updatePosFromTop();\n    }\n    get height() { return (this._size.length > 1) ? this._size.y : 0; }\n    set height(h) {\n        this._size.y = h;\n        this._updatePosFromTop();\n    }\n    get depth() { return (this._size.length > 2) ? this._size.z : 0; }\n    set depth(d) {\n        this._size.z = d;\n        this._updatePosFromTop();\n    }\n    get x() { return this.topLeft.x; }\n    get y() { return this.topLeft.y; }\n    get z() { return this.topLeft.z; }\n    get inited() { return this._inited; }\n    update() {\n        this._topLeft = this[0];\n        this._bottomRight = this[1];\n        this._updateSize();\n        return this;\n    }\n}\n//# sourceMappingURL=Pt.js.map","import { Rectangle, Circle } from \"./Op\";\nexport var UIShape;\n(function (UIShape) {\n    UIShape[UIShape[\"Rectangle\"] = 0] = \"Rectangle\";\n    UIShape[UIShape[\"Circle\"] = 1] = \"Circle\";\n    UIShape[UIShape[\"Polygon\"] = 2] = \"Polygon\";\n    UIShape[UIShape[\"Polyline\"] = 3] = \"Polyline\";\n    UIShape[UIShape[\"Line\"] = 4] = \"Line\";\n})(UIShape || (UIShape = {}));\nexport const UIPointerActions = {\n    up: \"up\", down: \"down\", move: \"move\", drag: \"drag\", drop: \"drop\", over: \"over\", out: \"out\"\n};\nexport class UI {\n    constructor(group, shape, states, id) {\n        this.group = group;\n        this.shape = shape;\n        this._id = id;\n        this._states = states;\n        this._actions = {};\n    }\n    get id() { return this._id; }\n    set id(d) { this._id = d; }\n    state(key) {\n        return this._states[key] || false;\n    }\n    on(key, fn) {\n        this._actions[key] = fn;\n        return this;\n    }\n    off(key) {\n        delete this._actions[key];\n        return this;\n    }\n    listen(key, p) {\n        if (this._actions[key] !== undefined) {\n            if (this._trigger(p)) {\n                this._actions[key](p, this, key);\n                return true;\n            }\n        }\n        return false;\n    }\n    render(fn) {\n        fn(this.group, this._states);\n    }\n    _trigger(p) {\n        let fn = null;\n        if (this.shape === UIShape.Rectangle) {\n            fn = Rectangle.withinBound;\n        }\n        else if (this.shape === UIShape.Circle) {\n            fn = Circle.withinBound;\n        }\n        else if (this.shape === UIShape.Polygon) {\n            fn = Rectangle.withinBound;\n        }\n        else {\n            return false;\n        }\n        return fn(this.group, p);\n    }\n}\nexport class UIButton extends UI {\n    constructor(group, shape, states, id) {\n        super(group, shape, states, id);\n        this._clicks = 0;\n    }\n    get clicks() { return this._clicks; }\n    onClick(fn) {\n        this._clicks++;\n        this.on(UIPointerActions.up, fn);\n    }\n    onHover(over, out) {\n        this.on(UIPointerActions.over, over);\n        this.on(UIPointerActions.out, out);\n    }\n}\n//# sourceMappingURL=UI.js.map","import { Pt, Bound } from \"./Pt\";\nimport { UIPointerActions as UIA } from \"./UI\";\nexport class Space {\n    constructor() {\n        this.id = \"space\";\n        this.bound = new Bound();\n        this._time = { prev: 0, diff: 0, end: -1 };\n        this.players = {};\n        this.playerCount = 0;\n        this._animID = -1;\n        this._pause = false;\n        this._refresh = undefined;\n        this._pointer = new Pt();\n        this._isReady = false;\n        this._playing = false;\n    }\n    refresh(b) {\n        this._refresh = b;\n        return this;\n    }\n    add(p) {\n        let player = (typeof p == \"function\") ? { animate: p } : p;\n        let k = this.playerCount++;\n        let pid = this.id + k;\n        this.players[pid] = player;\n        player.animateID = pid;\n        if (player.resize && this.bound.inited)\n            player.resize(this.bound);\n        if (this._refresh === undefined)\n            this._refresh = true;\n        return this;\n    }\n    remove(player) {\n        delete this.players[player.animateID];\n        return this;\n    }\n    removeAll() {\n        this.players = {};\n        return this;\n    }\n    play(time = 0) {\n        this._animID = requestAnimationFrame(this.play.bind(this));\n        if (this._pause)\n            return this;\n        this._time.diff = time - this._time.prev;\n        this._time.prev = time;\n        try {\n            this.playItems(time);\n        }\n        catch (err) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n            throw err;\n        }\n        return this;\n    }\n    replay() {\n        this._time.end = -1;\n        this.play();\n    }\n    playItems(time) {\n        this._playing = true;\n        if (this._refresh)\n            this.clear();\n        if (this._isReady) {\n            for (let k in this.players) {\n                if (this.players[k].animate)\n                    this.players[k].animate(time, this._time.diff, this);\n            }\n        }\n        if (this._time.end >= 0 && time > this._time.end) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n        }\n    }\n    pause(toggle = false) {\n        this._pause = (toggle) ? !this._pause : true;\n        return this;\n    }\n    resume() {\n        this._pause = false;\n        return this;\n    }\n    stop(t = 0) {\n        this._time.end = t;\n        return this;\n    }\n    playOnce(duration = 5000) {\n        this.play();\n        this.stop(duration);\n        return this;\n    }\n    render(context) {\n        if (this._renderFunc)\n            this._renderFunc(context, this);\n        return this;\n    }\n    set customRendering(f) { this._renderFunc = f; }\n    get customRendering() { return this._renderFunc; }\n    get isPlaying() { return this._playing; }\n    get outerBound() { return this.bound.clone(); }\n    get innerBound() { return new Bound(Pt.make(this.size.length, 0), this.size.clone()); }\n    get size() { return this.bound.size.clone(); }\n    get center() { return this.size.divide(2); }\n    get width() { return this.bound.width; }\n    get height() { return this.bound.height; }\n}\nexport class MultiTouchSpace extends Space {\n    constructor() {\n        super(...arguments);\n        this._pressed = false;\n        this._dragged = false;\n        this._hasMouse = false;\n        this._hasTouch = false;\n    }\n    get pointer() {\n        let p = this._pointer.clone();\n        p.id = this._pointer.id;\n        return p;\n    }\n    bindCanvas(evt, callback) {\n        this._canvas.addEventListener(evt, callback);\n    }\n    unbindCanvas(evt, callback) {\n        this._canvas.removeEventListener(evt, callback);\n    }\n    bindMouse(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.bindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.bindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.bindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.bindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = true;\n        }\n        else {\n            this.unbindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.unbindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.unbindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = false;\n        }\n        return this;\n    }\n    bindTouch(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.bindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.bindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.bindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = true;\n        }\n        else {\n            this.unbindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.unbindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = false;\n        }\n        return this;\n    }\n    touchesToPoints(evt, which = \"touches\") {\n        if (!evt || !evt[which])\n            return [];\n        let ts = [];\n        for (var i = 0; i < evt[which].length; i++) {\n            let t = evt[which].item(i);\n            ts.push(new Pt(t.pageX - this.bound.topLeft.x, t.pageY - this.bound.topLeft.y));\n        }\n        return ts;\n    }\n    _mouseAction(type, evt) {\n        let px = 0, py = 0;\n        if (evt instanceof MouseEvent) {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    px = evt.pageX - this.outerBound.x;\n                    py = evt.pageY - this.outerBound.y;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        else {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    let c = evt.changedTouches && evt.changedTouches.length > 0;\n                    let touch = evt.changedTouches.item(0);\n                    px = (c) ? touch.pageX - this.outerBound.x : 0;\n                    py = (c) ? touch.pageY - this.outerBound.y : 0;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        if (type) {\n            this._pointer.to(px, py);\n            this._pointer.id = type;\n        }\n    }\n    _mouseDown(evt) {\n        this._mouseAction(UIA.down, evt);\n        this._pressed = true;\n        return false;\n    }\n    _mouseUp(evt) {\n        this._mouseAction(UIA.up, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.down, evt);\n        this._pressed = false;\n        this._dragged = false;\n        return false;\n    }\n    _mouseMove(evt) {\n        this._mouseAction(UIA.move, evt);\n        if (this._pressed) {\n            this._dragged = true;\n            this._mouseAction(UIA.drag, evt);\n        }\n        return false;\n    }\n    _mouseOver(evt) {\n        this._mouseAction(UIA.over, evt);\n        return false;\n    }\n    _mouseOut(evt) {\n        this._mouseAction(UIA.out, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.drop, evt);\n        this._dragged = false;\n        return false;\n    }\n    _touchMove(evt) {\n        this._mouseMove(evt);\n        evt.preventDefault();\n        return false;\n    }\n}\n//# sourceMappingURL=Space.js.map","import { Util } from \"./Util\";\nexport class Form {\n    constructor() {\n        this._ready = false;\n    }\n    get ready() { return this._ready; }\n    static _checkSize(pts, required = 2) {\n        if (pts.length < required) {\n            Util.warn(\"Requires 2 or more Pts in this Group.\");\n            return false;\n        }\n        return true;\n    }\n}\nexport class VisualForm extends Form {\n    constructor() {\n        super(...arguments);\n        this._filled = true;\n        this._stroked = true;\n        this._font = new Font(14, \"sans-serif\");\n    }\n    get filled() { return this._filled; }\n    set filled(b) { this._filled = b; }\n    get stroked() { return this._stroked; }\n    set stroked(b) { this._stroked = b; }\n    get currentFont() { return this._font; }\n    _multiple(groups, shape, ...rest) {\n        if (!groups)\n            return this;\n        for (let i = 0, len = groups.length; i < len; i++) {\n            this[shape](groups[i], ...rest);\n        }\n        return this;\n    }\n    fill(c) {\n        return this;\n    }\n    fillOnly(c) {\n        this.stroke(false);\n        return this.fill(c);\n    }\n    stroke(c, width, linejoin, linecap) {\n        return this;\n    }\n    strokeOnly(c, width, linejoin, linecap) {\n        this.fill(false);\n        return this.stroke(c, width, linejoin, linecap);\n    }\n    points(pts, radius, shape) {\n        if (!pts)\n            return;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            this.point(pts[i], radius, shape);\n        }\n        return this;\n    }\n    circles(groups) {\n        return this._multiple(groups, \"circle\");\n    }\n    squares(groups) {\n        return this._multiple(groups, \"square\");\n    }\n    lines(groups) {\n        return this._multiple(groups, \"line\");\n    }\n    polygons(groups) {\n        return this._multiple(groups, \"polygon\");\n    }\n    rects(groups) {\n        return this._multiple(groups, \"rect\");\n    }\n}\nexport class Font {\n    constructor(size = 12, face = \"sans-serif\", weight = \"\", style = \"\", lineHeight = 1.5) {\n        this.size = size;\n        this.face = face;\n        this.style = style;\n        this.weight = weight;\n        this.lineHeight = lineHeight;\n    }\n    get value() { return `${this.style} ${this.weight} ${this.size}px/${this.lineHeight} ${this.face}`; }\n    toString() { return this.value; }\n}\n//# sourceMappingURL=Form.js.map","import { Pt } from \"./Pt\";\nexport class Typography {\n    static textWidthEstimator(fn, samples = [\"M\", \"n\", \".\"], distribution = [0.06, 0.8, 0.14]) {\n        let m = samples.map(fn);\n        let avg = new Pt(distribution).dot(m);\n        return (str) => str.length * avg;\n    }\n    static truncate(fn, str, width, tail = \"\") {\n        let trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n        if (trim < str.length) {\n            trim = Math.max(0, trim - tail.length);\n            return [str.substr(0, trim) + tail, trim];\n        }\n        else {\n            return [str, str.length];\n        }\n    }\n    static fontSizeToBox(box, ratio = 1, byHeight = true) {\n        let i = byHeight ? 1 : 0;\n        let h = (box[1][i] - box[0][i]);\n        let f = ratio * h;\n        return function (b) {\n            let nh = (b[1][i] - b[0][i]) / h;\n            return f * nh;\n        };\n    }\n    static fontSizeToThreshold(threshold, direction = 0) {\n        return function (defaultSize, val) {\n            let d = defaultSize * val / threshold;\n            if (direction < 0)\n                return Math.min(d, defaultSize);\n            if (direction > 0)\n                return Math.max(d, defaultSize);\n            return d;\n        };\n    }\n}\n//# sourceMappingURL=Typography.js.map","import { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Pt, Group, Bound } from \"./Pt\";\nimport { Const } from \"./Util\";\nimport { Typography as Typo } from \"./Typography\";\nimport { Rectangle } from './Op';\nexport class CanvasSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this._pixelScale = 1;\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._offscreen = false;\n        this._initialResize = false;\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pt\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            let id = elem;\n            id = (elem[0] === \"#\" || elem[0] === \".\") ? elem : \"#\" + elem;\n            _selector = document.querySelector(id);\n            _existed = true;\n            this.id = id.substr(1);\n        }\n        if (!_selector) {\n            this._container = this._createElement(\"div\", this.id + \"_container\");\n            this._canvas = this._createElement(\"canvas\", this.id);\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else if (_selector.nodeName.toLowerCase() != \"canvas\") {\n            this._container = _selector;\n            this._canvas = this._createElement(\"canvas\", this.id + \"_canvas\");\n            this._container.appendChild(this._canvas);\n            this._initialResize = true;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n            this._autoResize = false;\n        }\n        setTimeout(this._ready.bind(this, callback), 100);\n        this._ctx = this._canvas.getContext('2d');\n    }\n    _createElement(elem = \"div\", id) {\n        let d = document.createElement(elem);\n        d.setAttribute(\"id\", id);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this._initialResize = false;\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor)\n            this._bgcolor = opt.bgcolor;\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        if (opt.retina !== false) {\n            let r1 = window.devicePixelRatio || 1;\n            let r2 = this._ctx.webkitBackingStorePixelRatio || this._ctx.mozBackingStorePixelRatio || this._ctx.msBackingStorePixelRatio || this._ctx.oBackingStorePixelRatio || this._ctx.backingStorePixelRatio || 1;\n            this._pixelScale = Math.max(1, r1 / r2);\n        }\n        if (opt.offscreen) {\n            this._offscreen = true;\n            this._offCanvas = this._createElement(\"canvas\", this.id + \"_offscreen\");\n            this._offCtx = this._offCanvas.getContext('2d');\n        }\n        else {\n            this._offscreen = false;\n        }\n        return this;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this._canvas.width = this.bound.size.x * this._pixelScale;\n        this._canvas.height = this.bound.size.y * this._pixelScale;\n        this._canvas.style.width = Math.floor(this.bound.size.x) + \"px\";\n        this._canvas.style.height = Math.floor(this.bound.size.y) + \"px\";\n        if (this._offscreen) {\n            this._offCanvas.width = this.bound.size.x * this._pixelScale;\n            this._offCanvas.height = this.bound.size.y * this._pixelScale;\n        }\n        if (this._pixelScale != 1) {\n            this._ctx.scale(this._pixelScale, this._pixelScale);\n            this._ctx.translate(0.5, 0.5);\n            if (this._offscreen) {\n                this._offCtx.scale(this._pixelScale, this._pixelScale);\n                this._offCtx.translate(0.5, 0.5);\n            }\n        }\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        this.render(this._ctx);\n        if (evt && !this.isPlaying)\n            this.playOnce(0);\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = (this._autoResize || this._initialResize) ? this._container.getBoundingClientRect() : this._canvas.getBoundingClientRect();\n        if (b) {\n            let box = Bound.fromBoundingRect(b);\n            box.center = box.center.add(window.pageXOffset, window.pageYOffset);\n            this.resize(box, evt);\n        }\n    }\n    set background(bg) { this._bgcolor = bg; }\n    get background() { return this._bgcolor; }\n    get pixelScale() {\n        return this._pixelScale;\n    }\n    get hasOffscreen() {\n        return this._offscreen;\n    }\n    get offscreenCtx() { return this._offCtx; }\n    get offscreenCanvas() { return this._offCanvas; }\n    getForm() { return new CanvasForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() {\n        return this._isReady;\n    }\n    get ctx() { return this._ctx; }\n    clear(bg) {\n        if (bg)\n            this._bgcolor = bg;\n        let lastColor = this._ctx.fillStyle;\n        if (this._bgcolor && this._bgcolor != \"transparent\") {\n            this._ctx.fillStyle = this._bgcolor;\n            this._ctx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        else {\n            this._ctx.clearRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        this._ctx.fillStyle = lastColor;\n        return this;\n    }\n    clearOffscreen(bg) {\n        if (this._offscreen) {\n            if (bg) {\n                this._offCtx.fillStyle = bg;\n                this._offCtx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n            }\n            else {\n                this._offCtx.clearRect(-1, -1, this._offCanvas.width + 1, this._offCanvas.height + 1);\n            }\n        }\n        return this;\n    }\n    playItems(time) {\n        if (this._isReady) {\n            this._ctx.save();\n            if (this._offscreen)\n                this._offCtx.save();\n            super.playItems(time);\n            this._ctx.restore();\n            if (this._offscreen)\n                this._offCtx.restore();\n            this.render(this._ctx);\n        }\n    }\n}\nexport class CanvasForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._style = {\n            fillStyle: \"#f03\", strokeStyle: \"#fff\",\n            lineWidth: 1, lineJoin: \"bevel\", lineCap: \"butt\",\n        };\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx = this._space.ctx;\n                this._ctx.fillStyle = this._style.fillStyle;\n                this._ctx.strokeStyle = this._style.strokeStyle;\n                this._ctx.lineJoin = \"bevel\";\n                this._ctx.font = this._font.value;\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    useOffscreen(off = true, clear = false) {\n        if (clear)\n            this._space.clearOffscreen((typeof clear == \"string\") ? clear : null);\n        this._ctx = (this._space.hasOffscreen && off) ? this._space.offscreenCtx : this._space.ctx;\n        return this;\n    }\n    renderOffscreen(offset = [0, 0]) {\n        if (this._space.hasOffscreen) {\n            this._space.ctx.drawImage(this._space.offscreenCanvas, offset[0], offset[1], this._space.width, this._space.height);\n        }\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.filled = c;\n        }\n        else {\n            this.filled = true;\n            this._style.fillStyle = c;\n            this._ctx.fillStyle = c;\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.stroked = c;\n        }\n        else {\n            this.stroked = true;\n            this._style.strokeStyle = c;\n            this._ctx.strokeStyle = c;\n            if (width) {\n                this._ctx.lineWidth = width;\n                this._style.lineWidth = width;\n            }\n            if (linejoin) {\n                this._ctx.lineJoin = linejoin;\n                this._style.lineJoin = linejoin;\n            }\n            if (linecap) {\n                this._ctx.lineCap = linecap;\n                this._style.lineCap = linecap;\n            }\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        if (this._estimateTextWidth)\n            this.fontWidthEstimate(true);\n        return this;\n    }\n    fontWidthEstimate(estimate = true) {\n        this._estimateTextWidth = (estimate) ? Typo.textWidthEstimator(((c) => this._ctx.measureText(c).width)) : undefined;\n        return this;\n    }\n    getTextWidth(c) {\n        return (!this._estimateTextWidth) ? this._ctx.measureText(c + \" .\").width : this._estimateTextWidth(c);\n    }\n    _textTruncate(str, width, tail = \"\") {\n        return Typo.truncate(this.getTextWidth.bind(this), str, width, tail);\n    }\n    _textAlign(box, vertical, offset, center) {\n        if (!center)\n            center = Rectangle.center(box);\n        var px = box[0][0];\n        if (this._ctx.textAlign == \"end\" || this._ctx.textAlign == \"right\") {\n            px = box[1][0];\n        }\n        else if (this._ctx.textAlign == \"center\" || this._ctx.textAlign == \"middle\") {\n            px = center[0];\n        }\n        var py = center[1];\n        if (vertical == \"top\" || vertical == \"start\") {\n            py = box[0][1];\n        }\n        else if (vertical == \"end\" || vertical == \"bottom\") {\n            py = box[1][1];\n        }\n        return (offset) ? new Pt(px + offset[0], py + offset[1]) : new Pt(px, py);\n    }\n    reset() {\n        for (let k in this._style) {\n            if (this._style.hasOwnProperty(k)) {\n                this._ctx[k] = this._style[k];\n            }\n        }\n        this._font = new Font();\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    _paint() {\n        if (this._filled)\n            this._ctx.fill();\n        if (this._stroked)\n            this._ctx.stroke();\n    }\n    point(p, radius = 5, shape = \"square\") {\n        if (!p)\n            return;\n        if (!CanvasForm[shape])\n            throw new Error(`${shape} is not a static function of CanvasForm`);\n        CanvasForm[shape](this._ctx, p, radius);\n        this._paint();\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, 0, Const.two_pi, false);\n        ctx.closePath();\n    }\n    circle(pts) {\n        CanvasForm.circle(this._ctx, pts[0], pts[1][0]);\n        this._paint();\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, startAngle, endAngle, cc);\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        CanvasForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        this._paint();\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        if (!pt)\n            return;\n        let x1 = pt[0] - halfsize;\n        let y1 = pt[1] - halfsize;\n        let x2 = pt[0] + halfsize;\n        let y2 = pt[1] + halfsize;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x1, y2);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x2, y1);\n        ctx.closePath();\n    }\n    square(pt, halfsize) {\n        CanvasForm.square(this._ctx, pt, halfsize);\n        this._paint();\n        return this;\n    }\n    static line(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n    }\n    line(pts) {\n        CanvasForm.line(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static polygon(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n        ctx.closePath();\n    }\n    polygon(pts) {\n        CanvasForm.polygon(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        ctx.lineTo(pts[0][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[0][1]);\n        ctx.closePath();\n    }\n    rect(pts) {\n        CanvasForm.rect(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static image(ctx, img, target = new Pt(), orig) {\n        if (typeof target[0] === \"number\") {\n            ctx.drawImage(img, target[0], target[1]);\n        }\n        else {\n            let t = target;\n            if (orig) {\n                ctx.drawImage(img, orig[0][0], orig[0][1], orig[1][0] - orig[0][0], orig[1][1] - orig[0][1], t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n            else {\n                ctx.drawImage(img, t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n        }\n    }\n    image(img, target, original) {\n        CanvasForm.image(this._ctx, img, target, original);\n        return this;\n    }\n    static text(ctx, pt, txt, maxWidth) {\n        if (!pt)\n            return;\n        ctx.fillText(txt, pt[0], pt[1], maxWidth);\n    }\n    text(pt, txt, maxWidth) {\n        CanvasForm.text(this._ctx, pt, txt, maxWidth);\n        return this;\n    }\n    textBox(box, txt, verticalAlign = \"middle\", tail = \"\", overrideBaseline = true) {\n        if (overrideBaseline)\n            this._ctx.textBaseline = verticalAlign;\n        let size = Rectangle.size(box);\n        let t = this._textTruncate(txt, size[0], tail);\n        this.text(this._textAlign(box, verticalAlign), t[0]);\n        return this;\n    }\n    paragraphBox(box, txt, lineHeight = 1.2, verticalAlign = \"top\", crop = true) {\n        let size = Rectangle.size(box);\n        this._ctx.textBaseline = \"top\";\n        let lstep = this._font.size * lineHeight;\n        let nextLine = (sub, buffer = [], cc = 0) => {\n            if (!sub)\n                return buffer;\n            if (crop && cc * lstep > size[1] - lstep * 2)\n                return buffer;\n            if (cc > 10000)\n                throw new Error(\"max recursion reached (10000)\");\n            let t = this._textTruncate(sub, size[0], \"\");\n            let newln = t[0].indexOf(\"\\n\");\n            if (newln >= 0) {\n                buffer.push(t[0].substr(0, newln));\n                return nextLine(sub.substr(newln + 1), buffer, cc + 1);\n            }\n            let dt = t[0].lastIndexOf(\" \") + 1;\n            if (dt <= 0 || t[1] === sub.length)\n                dt = undefined;\n            let line = t[0].substr(0, dt);\n            buffer.push(line);\n            return (t[1] <= 0 || t[1] === sub.length) ? buffer : nextLine(sub.substr((dt || t[1])), buffer, cc + 1);\n        };\n        let lines = nextLine(txt);\n        let lsize = lines.length * lstep;\n        let lbox = box;\n        if (verticalAlign == \"middle\" || verticalAlign == \"center\") {\n            let lpad = (size[1] - lsize) / 2;\n            if (crop)\n                lpad = Math.max(0, lpad);\n            lbox = new Group(box[0].$add(0, lpad), box[1].$subtract(0, lpad));\n        }\n        else if (verticalAlign == \"bottom\") {\n            lbox = new Group(box[0].$add(0, size[1] - lsize), box[1]);\n        }\n        else {\n            lbox = new Group(box[0], box[0].$add(size[0], lsize));\n        }\n        let center = Rectangle.center(lbox);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            this.text(this._textAlign(lbox, \"top\", [0, i * lstep], center), lines[i]);\n        }\n        return this;\n    }\n    alignText(alignment = \"left\", baseline = \"alphabetic\") {\n        if (baseline == \"center\")\n            baseline = \"middle\";\n        if (baseline == \"baseline\")\n            baseline = \"alphabetic\";\n        this._ctx.textAlign = alignment;\n        this._ctx.textBaseline = baseline;\n        return this;\n    }\n    log(txt) {\n        let w = this._ctx.measureText(txt).width + 20;\n        this.stroke(false).fill(\"rgba(0,0,0,.4)\").rect([[0, 0], [w, 20]]);\n        this.fill(\"#fff\").text([10, 14], txt);\n        return this;\n    }\n}\n//# sourceMappingURL=Canvas.js.map","import { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport class Create {\n    static distributeRandom(bound, count, dimensions = 2) {\n        let pts = new Group();\n        for (let i = 0; i < count; i++) {\n            let p = [bound.x + Math.random() * bound.width];\n            if (dimensions > 1)\n                p.push(bound.y + Math.random() * bound.height);\n            if (dimensions > 2)\n                p.push(bound.z + Math.random() * bound.depth);\n            pts.push(new Pt(p));\n        }\n        return pts;\n    }\n    static distributeLinear(line, count) {\n        let ln = Line.subpoints(line, count - 2);\n        ln.unshift(line[0]);\n        ln.push(line[line.length - 1]);\n        return ln;\n    }\n    static gridPts(bound, columns, rows, orientation = [0.5, 0.5]) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).$divide(columns, rows);\n        let offset = unit.$multiply(orientation);\n        let g = new Group();\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n            }\n        }\n        return g;\n    }\n    static gridCells(bound, columns, rows) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).divide(columns, rows);\n        let g = [];\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n            }\n        }\n        return g;\n    }\n    static radialPts(center, radius, count) {\n        let g = new Group();\n        let a = Const.two_pi / count;\n        for (let i = 0; i < count; i++) {\n            g.push(new Pt(center).toAngle(a * i - Const.half_pi, radius, true));\n        }\n        return g;\n    }\n    static noisePts(pts, dx = 0.01, dy = 0.01, rows = 0, columns = 0) {\n        let seed = Math.random();\n        let g = new Group();\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let np = new Noise(pts[i]);\n            let r = (rows && rows > 0) ? Math.floor(i / rows) : i;\n            let c = (columns && columns > 0) ? i % columns : i;\n            np.initNoise(dx * c, dy * r);\n            np.seed(seed);\n            g.push(np);\n        }\n        return g;\n    }\n    static delaunay(pts) {\n        return Delaunay.from(pts);\n    }\n}\nconst grad3 = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n];\nconst permTable = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\nexport class Noise extends Pt {\n    constructor(...args) {\n        super(...args);\n        this.perm = [];\n        this._n = new Pt(0.01, 0.01);\n        this.perm = permTable.concat(permTable);\n    }\n    initNoise(...args) {\n        this._n = new Pt(...args);\n    }\n    step(x = 0, y = 0) {\n        this._n.add(x, y);\n    }\n    seed(s) {\n        if (s > 0 && s < 1)\n            s *= 65536;\n        s = Math.floor(s);\n        if (s < 256)\n            s |= s << 8;\n        for (let i = 0; i < 255; i++) {\n            let v = (i & 1) ? permTable[i] ^ (s & 255) : permTable[i] ^ ((s >> 8) & 255);\n            this.perm[i] = this.perm[i + 256] = v;\n        }\n    }\n    noise2D() {\n        let i = Math.max(0, Math.floor(this._n[0])) % 255;\n        let j = Math.max(0, Math.floor(this._n[1])) % 255;\n        let x = (this._n[0] % 255) - i;\n        let y = (this._n[1] % 255) - j;\n        let n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n        let n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n        let n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n        let n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n        let _fade = (f) => f * f * f * (f * (f * 6 - 15) + 10);\n        let tx = _fade(x);\n        return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n    }\n}\nexport class Delaunay extends Group {\n    constructor() {\n        super(...arguments);\n        this._mesh = [];\n    }\n    delaunay(triangleOnly = true) {\n        if (this.length < 3)\n            return [];\n        this._mesh = [];\n        let n = this.length;\n        let indices = [];\n        for (let i = 0; i < n; i++)\n            indices[i] = i;\n        indices.sort((i, j) => this[j][0] - this[i][0]);\n        let pts = this.slice();\n        let st = this._superTriangle();\n        pts = pts.concat(st);\n        let opened = [this._circum(n, n + 1, n + 2, st)];\n        let closed = [];\n        let tris = [];\n        for (let i = 0, len = indices.length; i < len; i++) {\n            let c = indices[i];\n            let edges = [];\n            let j = opened.length;\n            if (!this._mesh[c])\n                this._mesh[c] = {};\n            while (j--) {\n                let circum = opened[j];\n                let radius = circum.circle[1][0];\n                let d = pts[c].$subtract(circum.circle[0]);\n                if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n                    closed.push(circum);\n                    tris.push(circum.triangle);\n                    opened.splice(j, 1);\n                    continue;\n                }\n                if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n                    continue;\n                }\n                edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n                opened.splice(j, 1);\n            }\n            Delaunay._dedupe(edges);\n            j = edges.length;\n            while (j > 1) {\n                opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n            }\n        }\n        for (let i = 0, len = opened.length; i < len; i++) {\n            let o = opened[i];\n            if (o.i < n && o.j < n && o.k < n) {\n                closed.push(o);\n                tris.push(o.triangle);\n                this._cache(o);\n            }\n        }\n        return (triangleOnly) ? tris : closed;\n    }\n    voronoi() {\n        let vs = [];\n        let n = this._mesh;\n        for (let i = 0, len = n.length; i < len; i++) {\n            vs.push(this.neighborPts(i, true));\n        }\n        return vs;\n    }\n    mesh() {\n        return this._mesh;\n    }\n    neighborPts(i, sort = false) {\n        let cs = new Group();\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k].circle[0]);\n        }\n        return (sort) ? Geom.sortEdges(cs) : cs;\n    }\n    neighbors(i) {\n        let cs = [];\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k]);\n        }\n        return cs;\n    }\n    _cache(o) {\n        this._mesh[o.i][`${Math.min(o.j, o.k)}-${Math.max(o.j, o.k)}`] = o;\n        this._mesh[o.j][`${Math.min(o.i, o.k)}-${Math.max(o.i, o.k)}`] = o;\n        this._mesh[o.k][`${Math.min(o.i, o.j)}-${Math.max(o.i, o.j)}`] = o;\n    }\n    _superTriangle() {\n        let minPt = this[0];\n        let maxPt = this[0];\n        for (let i = 1, len = this.length; i < len; i++) {\n            minPt = minPt.$min(this[i]);\n            maxPt = maxPt.$max(this[i]);\n        }\n        let d = maxPt.$subtract(minPt);\n        let mid = minPt.$add(maxPt).divide(2);\n        let dmax = Math.max(d[0], d[1]);\n        return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n    }\n    _triangle(i, j, k, pts = this) {\n        return new Group(pts[i], pts[j], pts[k]);\n    }\n    _circum(i, j, k, tri, pts = this) {\n        let t = tri || this._triangle(i, j, k, pts);\n        return {\n            i: i,\n            j: j,\n            k: k,\n            triangle: t,\n            circle: Triangle.circumcircle(t)\n        };\n    }\n    static _dedupe(edges) {\n        let j = edges.length;\n        while (j > 1) {\n            let b = edges[--j];\n            let a = edges[--j];\n            let i = j;\n            while (i > 1) {\n                let n = edges[--i];\n                let m = edges[--i];\n                if ((a == m && b == n) || (a == n && b == m)) {\n                    edges.splice(j, 2);\n                    edges.splice(i, 2);\n                    break;\n                }\n            }\n        }\n        return edges;\n    }\n}\n//# sourceMappingURL=Create.js.map","import { Pt, Group } from \"./Pt\";\nimport { Util } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nexport class Color extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mode = \"rgb\";\n        this._isNorm = false;\n    }\n    static from(...args) {\n        let p = [1, 1, 1, 1];\n        let c = Util.getArgs(args);\n        for (let i = 0, len = p.length; i < len; i++) {\n            if (i < c.length)\n                p[i] = c[i];\n        }\n        return new Color(p);\n    }\n    static fromHex(hex) {\n        if (hex[0] == \"#\")\n            hex = hex.substr(1);\n        if (hex.length <= 3) {\n            let fn = (i) => hex[i] || \"F\";\n            hex = `${fn(0)}${fn(0)}${fn(1)}${fn(1)}${fn(2)}${fn(2)}`;\n        }\n        let alpha = 1;\n        if (hex.length === 8) {\n            alpha = hex.substr(6) && 0xFF / 255;\n            hex = hex.substring(0, 6);\n        }\n        let hexVal = parseInt(hex, 16);\n        return new Color(hexVal >> 16, hexVal >> 8 & 0xFF, hexVal & 0xFF, alpha);\n    }\n    static rgb(...args) { return Color.from(...args).toMode(\"rgb\"); }\n    static hsl(...args) { return Color.from(...args).toMode(\"hsl\"); }\n    static hsb(...args) { return Color.from(...args).toMode(\"hsb\"); }\n    static lab(...args) { return Color.from(...args).toMode(\"lab\"); }\n    static lch(...args) { return Color.from(...args).toMode(\"lch\"); }\n    static luv(...args) { return Color.from(...args).toMode(\"luv\"); }\n    static xyz(...args) { return Color.from(...args).toMode(\"xyz\"); }\n    static maxValues(mode) { return Color.ranges[mode].zipSlice(1).$take([0, 1, 2]); }\n    get hex() { return this.toString(\"hex\"); }\n    get rgb() { return this.toString(\"rgb\"); }\n    get rgba() { return this.toString(\"rgba\"); }\n    clone() {\n        let c = new Color(this);\n        c.toMode(this._mode);\n        return c;\n    }\n    toMode(mode, convert = false) {\n        if (convert) {\n            let fname = this._mode.toUpperCase() + \"to\" + mode.toUpperCase();\n            if (Color[fname]) {\n                this.to(Color[fname](this, this._isNorm, this._isNorm));\n            }\n            else {\n                throw new Error(\"Cannot convert color with \" + fname);\n            }\n        }\n        this._mode = mode;\n        return this;\n    }\n    get mode() { return this._mode; }\n    get r() { return this[0]; }\n    set r(n) { this[0] = n; }\n    get g() { return this[1]; }\n    set g(n) { this[1] = n; }\n    get b() { return this[2]; }\n    set b(n) { this[2] = n; }\n    get h() { return (this._mode == \"lch\") ? this[2] : this[0]; }\n    set h(n) {\n        let i = (this._mode == \"lch\") ? 2 : 0;\n        this[i] = n;\n    }\n    get s() { return this[1]; }\n    set s(n) { this[1] = n; }\n    get l() { return (this._mode == \"hsl\") ? this[2] : this[0]; }\n    set l(n) {\n        let i = (this._mode == \"hsl\") ? 2 : 0;\n        this[i] = n;\n    }\n    get a() { return this[1]; }\n    set a(n) { this[1] = n; }\n    get c() { return this[1]; }\n    set c(n) { this[1] = n; }\n    get u() { return this[1]; }\n    set u(n) { this[1] = n; }\n    get v() { return this[2]; }\n    set v(n) { this[2] = n; }\n    get alpha() { return (this.length > 3) ? this[3] : 1; }\n    get normalized() { return this._isNorm; }\n    set normalized(b) { this._isNorm = b; }\n    normalize(toNorm = true) {\n        if (this._isNorm == toNorm)\n            return this;\n        let ranges = Color.ranges[this._mode];\n        for (let i = 0; i < 3; i++) {\n            this[i] = (!toNorm)\n                ? Num.mapToRange(this[i], 0, 1, ranges[i][0], ranges[i][1])\n                : Num.mapToRange(this[i], ranges[i][0], ranges[i][1], 0, 1);\n        }\n        this._isNorm = toNorm;\n        return this;\n    }\n    $normalize(toNorm = true) { return this.clone().normalize(toNorm); }\n    toString(format = \"mode\") {\n        if (format == \"hex\") {\n            let _hex = (n) => {\n                let s = Math.floor(n).toString(16);\n                return (s.length < 2) ? '0' + s : s;\n            };\n            return `#${_hex(this[0])}${_hex(this[1])}${_hex(this[2])}`;\n        }\n        else if (format == \"rgba\") {\n            return `rgba(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])},${this.alpha}`;\n        }\n        else if (format == \"rgb\") {\n            return `rgb(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])}`;\n        }\n        else {\n            return `${this._mode}(${this[0]},${this[1]},${this[2]},${this.alpha})`;\n        }\n    }\n    static RGBtoHSL(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = h;\n        let l = h;\n        if (max == min) {\n            h = 0;\n            s = 0;\n        }\n        else {\n            let d = max - min;\n            s = (l > 0.5) ? d / (2 - max - min) : d / (max + min);\n            h = 0;\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsl(((normalizedOutput) ? h / 60 : h * 60), s, l, rgb.alpha);\n    }\n    static HSLtoRGB(hsl, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, l] = hsl;\n        if (!normalizedInput)\n            h = h / 360;\n        if (s == 0)\n            return Color.rgb(l * 255, l * 255, l * 255, hsl.alpha);\n        let q = (l <= 0.5) ? l * (1 + s) : l + s - (l * s);\n        let p = 2 * l - q;\n        let convert = (t) => {\n            t = (t < 0) ? t + 1 : (t > 1) ? t - 1 : t;\n            if (t * 6 < 1) {\n                return p + (q - p) * t * 6;\n            }\n            else if (t * 2 < 1) {\n                return q;\n            }\n            else if (t * 3 < 2) {\n                return p + (q - p) * ((2 / 3) - t) * 6;\n            }\n            else {\n                return p;\n            }\n        };\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * convert((h + 1 / 3)), sc * convert(h), sc * convert((h - 1 / 3)), hsl.alpha);\n    }\n    static RGBtoHSB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let d = max - min;\n        let h = 0;\n        let s = (max === 0) ? 0 : d / max;\n        let v = max;\n        if (max != min) {\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsb(((normalizedOutput) ? h / 60 : h * 60), s, v, rgb.alpha);\n    }\n    static HSBtoRGB(hsb, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, v] = hsb;\n        if (!normalizedInput)\n            h = h / 360;\n        let i = Math.floor(h * 6);\n        let f = h * 6 - i;\n        let p = v * (1 - s);\n        let q = v * (1 - f * s);\n        let t = v * (1 - (1 - f) * s);\n        let pick = [\n            [v, t, p], [q, v, p], [p, v, t],\n            [p, q, v], [t, p, v], [v, p, q]\n        ];\n        let c = pick[i % 6];\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * c[0], sc * c[1], sc * c[2], hsb.alpha);\n    }\n    static RGBtoLAB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLAB(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LABtoRGB(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        return Color.XYZtoRGB(Color.LABtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoLCH(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.LABtoLCH(Color.RGBtoLAB(c), false, normalizedOutput);\n    }\n    static LCHtoRGB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        return Color.LABtoRGB(Color.LCHtoLAB(c), false, normalizedOutput);\n    }\n    static RGBtoLUV(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLUV(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LUVtoRGB(luv, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? luv.$normalize(false) : luv;\n        return Color.XYZtoRGB(Color.LUVtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoXYZ(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (!normalizedInput) ? rgb.$normalize() : rgb.clone();\n        for (let i = 0; i < 3; i++) {\n            c[i] = (c[i] > 0.04045) ? Math.pow((c[i] + 0.055) / 1.055, 2.4) : c[i] / 12.92;\n            if (!normalizedOutput)\n                c[i] = c[i] * 100;\n        }\n        let cc = Color.xyz(c[0] * 0.4124564 + c[1] * 0.3575761 + c[2] * 0.1804375, c[0] * 0.2126729 + c[1] * 0.7151522 + c[2] * 0.0721750, c[0] * 0.0193339 + c[1] * 0.1191920 + c[2] * 0.9503041, rgb.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoRGB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (!normalizedInput) ? xyz.$normalize() : xyz;\n        let rgb = [\n            x * 3.2404542 + y * -1.5371385 + z * -0.4985314,\n            x * -0.9692660 + y * 1.8760108 + z * 0.0415560,\n            x * 0.0556434 + y * -0.2040259 + z * 1.0572252\n        ];\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = (rgb[i] < 0) ? 0 : (rgb[i] > 0.0031308) ? (1.055 * Math.pow(rgb[i], 1 / 2.4) - 0.055) : (12.92 * rgb[i]);\n            rgb[i] = Math.max(0, Math.min(1, rgb[i]));\n            if (!normalizedOutput)\n                rgb[i] = Math.round(rgb[i] * 255);\n        }\n        let cc = Color.rgb(rgb[0], rgb[1], rgb[2], xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLAB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? xyz.$normalize(false) : xyz.clone();\n        c.divide(Color.D65);\n        let fn = (n) => (n > 0.008856) ? Math.pow(n, 1 / 3) : (7.787 * n) + 16 / 116;\n        let cy = fn(c[1]);\n        let cc = Color.lab((116 * cy) - 16, 500 * (fn(c[0]) - cy), 200 * (cy - fn(c[2])), xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static LABtoXYZ(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let y = (c[0] + 16) / 116;\n        let x = (c[1] / 500) + y;\n        let z = y - c[2] / 200;\n        let fn = (n) => {\n            let nnn = n * n * n;\n            return (nnn > 0.008856) ? nnn : (n - 16 / 116) / 7.787;\n        };\n        let d = Color.D65;\n        let cc = Color.xyz(Math.max(0, d[0] * fn(x)), Math.max(0, d[1] * fn(y)), Math.max(0, d[2] * fn(z)), lab.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLUV(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (normalizedInput) ? xyz.$normalize(false) : xyz;\n        let u = (4 * x) / (x + (15 * y) + (3 * z));\n        let v = (9 * y) / (x + (15 * y) + (3 * z));\n        y = y / 100;\n        y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y + 16 / 116);\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let L = (116 * y) - 16;\n        return Color.luv(L, 13 * L * (u - refU), 13 * L * (v - refV), xyz.alpha);\n    }\n    static LUVtoXYZ(luv, normalizedInput = false, normalizedOutput = false) {\n        let [l, u, v] = (normalizedInput) ? luv.$normalize(false) : luv;\n        let y = (l + 16) / 116;\n        let cubeY = y * y * y;\n        y = (cubeY > 0.008856) ? cubeY : (y - 16 / 116) / 7.787;\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        u = u / (13 * l) + refU;\n        v = v / (13 * l) + refV;\n        y = y * 100;\n        let x = -1 * (9 * y * u) / ((u - 4) * v - u * v);\n        let z = (9 * y - (15 * v * y) - (v * x)) / (3 * v);\n        return Color.xyz(x, y, z, luv.alpha);\n    }\n    static LABtoLCH(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let h = Geom.toDegree(Geom.boundRadian(Math.atan2(c[2], c[1])));\n        return Color.lch(c[0], Math.sqrt(c[1] * c[1] + c[2] * c[2]), h, lab.alpha);\n    }\n    static LCHtoLAB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        let rad = Geom.toRadian(c[2]);\n        return Color.lab(c[0], Math.cos(rad) * c[1], Math.sin(rad) * c[1], lch.alpha);\n    }\n}\nColor.D65 = new Pt(95.047, 100, 108.883, 1);\nColor.ranges = {\n    rgb: new Group(new Pt(0, 255), new Pt(0, 255), new Pt(0, 255)),\n    hsl: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    hsb: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    lab: new Group(new Pt(0, 100), new Pt(-128, 127), new Pt(-128, 127)),\n    lch: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 360)),\n    luv: new Group(new Pt(0, 100), new Pt(-134, 220), new Pt(-140, 122)),\n    xyz: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 100))\n};\n//# sourceMappingURL=Color.js.map","import { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Util } from './Util';\nimport { Pt, Bound } from './Pt';\nexport class DOMSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this.id = \"domspace\";\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._css = {};\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pts\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            _selector = document.querySelector(elem);\n            _existed = true;\n            this.id = elem.substr(1);\n        }\n        if (!_selector) {\n            this._container = DOMSpace.createElement(\"div\", \"pts_container\");\n            this._canvas = DOMSpace.createElement(\"div\", \"pts_element\");\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n        }\n        setTimeout(this._ready.bind(this, callback), 50);\n    }\n    static createElement(elem = \"div\", id, appendTo) {\n        let d = document.createElement(elem);\n        if (id)\n            d.setAttribute(\"id\", id);\n        if (appendTo && appendTo.appendChild)\n            appendTo.appendChild(d);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this.refresh(false);\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor) {\n            this._bgcolor = opt.bgcolor;\n        }\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        return this;\n    }\n    getForm() {\n        return null;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            delete this._css['width'];\n            delete this._css['height'];\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = Bound.fromBoundingRect(this._container.getBoundingClientRect());\n        if (this._autoResize) {\n            this.styles({ width: \"100%\", height: \"100%\" }, true);\n        }\n        else {\n            this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        }\n        this.resize(b, evt);\n    }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() { return this._isReady; }\n    clear(bg) {\n        if (bg)\n            this.background = bg;\n        this._canvas.innerHTML = \"\";\n        return this;\n    }\n    set background(bg) {\n        this._bgcolor = bg;\n        this._container.style.backgroundColor = this._bgcolor;\n    }\n    get background() { return this._bgcolor; }\n    style(key, val, update = false) {\n        this._css[key] = val;\n        if (update)\n            this._canvas.style[key] = val;\n        return this;\n    }\n    styles(styles, update = false) {\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k))\n                this.style(k, styles[k], update);\n        }\n        return this;\n    }\n    static setAttr(elem, data) {\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                elem.setAttribute(k, data[k]);\n            }\n        }\n        return elem;\n    }\n    static getInlineStyles(data) {\n        let str = \"\";\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                if (data[k])\n                    str += `${k}: ${data[k]}; `;\n            }\n        }\n        return str;\n    }\n}\nexport class HTMLSpace extends DOMSpace {\n    getForm() {\n        return new HTMLForm(this);\n    }\n    static htmlElement(parent, name, id, autoClass = true) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElement(name);\n            elem.setAttribute(\"id\", id);\n            if (autoClass)\n                elem.setAttribute(\"class\", id.substring(0, id.indexOf(\"-\")));\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + HTMLForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class HTMLForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"background\": \"#f03\",\n                \"border-color\": \"#fff\",\n                \"color\": \"#000\",\n                \"border-width\": \"1px\",\n                \"border-radius\": \"0\",\n                \"border-style\": \"solid\",\n                \"position\": \"absolute\",\n                \"top\": 0,\n                \"left\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_dom_\" + (HTMLForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v, unit = '') {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = `${v}${unit}`;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n            if (!c)\n                this.styleTo(\"background\", \"transparent\");\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"background\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n            if (!c)\n                this.styleTo(\"border-width\", 0);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"border-color\", c);\n            this.styleTo(\"border-width\", (width || 1) + \"px\");\n        }\n        return this;\n    }\n    fillText(c) {\n        this.styleTo(\"color\", c);\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"background\": \"#f03\", \"border-color\": \"#fff\",\n            \"border-width\": \"1px\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(HTMLForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${HTMLForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"background: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"border: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('background') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('border-width') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return HTMLSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static rectStyle(ctx, pt, size) {\n        ctx.style[\"left\"] = pt[0] + \"px\";\n        ctx.style[\"top\"] = pt[1] + \"px\";\n        ctx.style[\"width\"] = size[0] + \"px\";\n        ctx.style[\"height\"] = size[1] + \"px\";\n        return ctx;\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return HTMLForm.circle(ctx, pt, radius);\n        }\n        else {\n            return HTMLForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        if (shape == \"circle\")\n            this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-circle ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(radius), new Pt(radius * 2, radius * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-square ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(halfsize), new Pt(halfsize * 2, halfsize * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        HTMLForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-rect ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, pts[0], pts[1]);\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"0\");\n        HTMLForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, {\n            position: 'absolute',\n            class: `pts-form pts-text ${ctx.currentClass}`,\n            left: pt[0],\n            top: pt[1],\n        });\n        elem.textContent = txt;\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        HTMLForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        Util.warn(\"arc is not implemented in HTMLForm\");\n        return this;\n    }\n    line(pts) {\n        Util.warn(\"line is not implemented in HTMLForm\");\n        return this;\n    }\n    polygon(pts) {\n        Util.warn(\"polygon is not implemented in HTMLForm\");\n        return this;\n    }\n}\nHTMLForm.groupID = 0;\nHTMLForm.domID = 0;\n//# sourceMappingURL=Dom.js.map","import { VisualForm, Font } from \"./Form\";\nimport { Geom } from './Num';\nimport { Const } from './Util';\nimport { Pt, Group } from './Pt';\nimport { Rectangle } from \"./Op\";\nimport { DOMSpace } from \"./Dom\";\nexport class SVGSpace extends DOMSpace {\n    constructor(elem, callback) {\n        super(elem, callback);\n        this.id = \"svgspace\";\n        this._bgcolor = \"#999\";\n        if (this._canvas.nodeName.toLowerCase() != \"svg\") {\n            let s = SVGSpace.svgElement(this._canvas, \"svg\", `${this.id}_svg`);\n            this._container = this._canvas;\n            this._canvas = s;\n        }\n    }\n    getForm() { return new SVGForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    resize(b, evt) {\n        super.resize(b, evt);\n        SVGSpace.setAttr(this.element, {\n            \"viewBox\": `0 0 ${this.bound.width} ${this.bound.height}`,\n            \"width\": `${this.bound.width}`,\n            \"height\": `${this.bound.height}`,\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"version\": \"1.1\"\n        });\n        return this;\n    }\n    static svgElement(parent, name, id) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n            elem.setAttribute(\"id\", id);\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + SVGForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class SVGForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"fill\": \"#f03\",\n                \"stroke\": \"#fff\",\n                \"stroke-width\": 1,\n                \"stroke-linejoin\": \"bevel\",\n                \"stroke-linecap\": \"sqaure\"\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_svg_\" + (SVGForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v) {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = v;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"fill\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"stroke\", c);\n            if (width)\n                this.styleTo(\"stroke-width\", width);\n            if (linejoin)\n                this.styleTo(\"stroke-linejoin\", linejoin);\n            if (linecap)\n                this.styleTo(\"stroke-linecap\", linecap);\n        }\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"fill\": \"#f03\", \"stroke\": \"#fff\",\n            \"stroke-width\": 1,\n            \"stroke-linejoin\": \"bevel\",\n            \"stroke-linecap\": \"sqaure\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(SVGForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${SVGForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"fill: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"stroke: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('fill') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('stroke') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return DOMSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return SVGForm.circle(ctx, pt, radius);\n        }\n        else {\n            return SVGForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        SVGForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = SVGSpace.svgElement(ctx.group, \"circle\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            cx: pt[0],\n            cy: pt[1],\n            r: radius,\n            'class': `pts-svgform pts-circle ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        SVGForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        let elem = SVGSpace.svgElement(ctx.group, \"path\", SVGForm.getID(ctx));\n        const start = new Pt(pt).toAngle(startAngle, radius, true);\n        const end = new Pt(pt).toAngle(endAngle, radius, true);\n        const diff = Geom.boundAngle(endAngle) - Geom.boundAngle(startAngle);\n        let largeArc = (diff > Const.pi) ? true : false;\n        if (cc)\n            largeArc = !largeArc;\n        const sweep = (cc) ? \"0\" : \"1\";\n        const d = `M ${start[0]} ${start[1]} A ${radius} ${radius} 0 ${largeArc ? \"1\" : \"0\"} ${sweep} ${end[0]} ${end[1]}`;\n        DOMSpace.setAttr(elem, {\n            d: d,\n            'class': `pts-svgform pts-arc ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        this.nextID();\n        SVGForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x: pt[0] - halfsize,\n            y: pt[1] - halfsize,\n            width: halfsize * 2,\n            height: halfsize * 2,\n            'class': `pts-svgform pts-square ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        SVGForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static line(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        if (pts.length > 2)\n            return SVGForm._poly(ctx, pts, false);\n        let elem = SVGSpace.svgElement(ctx.group, \"line\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x1: pts[0][0],\n            y1: pts[0][1],\n            x2: pts[1][0],\n            y2: pts[1][1],\n            'class': `pts-svgform pts-line ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    line(pts) {\n        this.nextID();\n        SVGForm.line(this._ctx, pts);\n        return this;\n    }\n    static _poly(ctx, pts, closePath = true) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, ((closePath) ? \"polygon\" : \"polyline\"), SVGForm.getID(ctx));\n        let points = pts.reduce((a, p) => a + `${p[0]},${p[1]} `, \"\");\n        DOMSpace.setAttr(elem, {\n            points: points,\n            'class': `pts-svgform pts-polygon ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    static polygon(ctx, pts) {\n        return SVGForm._poly(ctx, pts, true);\n    }\n    polygon(pts) {\n        this.nextID();\n        SVGForm.polygon(this._ctx, pts);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        let bound = Group.fromArray(pts).boundingBox();\n        let size = Rectangle.size(bound);\n        DOMSpace.setAttr(elem, {\n            x: bound[0][0],\n            y: bound[0][1],\n            width: size[0],\n            height: size[1],\n            'class': `pts-svgform pts-rect ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        SVGForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = SVGSpace.svgElement(ctx.group, \"text\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            \"pointer-events\": \"none\",\n            x: pt[0],\n            y: pt[1],\n            dx: 0, dy: 0,\n            'class': `pts-svgform pts-text ${ctx.currentClass}`,\n        });\n        elem.textContent = txt;\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        SVGForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n}\nSVGForm.groupID = 0;\nSVGForm.domID = 0;\n//# sourceMappingURL=Svg.js.map","import { Pt, Group, Bound } from \"./Pt\";\nimport { Polygon, Circle } from \"./Op\";\nexport class World {\n    constructor(bound, friction = 1, gravity = 0) {\n        this._lastTime = null;\n        this._gravity = new Pt();\n        this._friction = 1;\n        this._damping = 0.75;\n        this._particles = [];\n        this._bodies = [];\n        this._names = { p: {}, b: {} };\n        this._bound = Bound.fromGroup(bound);\n        this._friction = friction;\n        this._gravity = (typeof gravity === \"number\") ? new Pt(0, gravity) : new Pt(gravity);\n        return this;\n    }\n    get gravity() { return this._gravity; }\n    set gravity(g) { this._gravity = g; }\n    get friction() { return this._friction; }\n    set friction(f) { this._friction = f; }\n    get damping() { return this._damping; }\n    set damping(f) { this._damping = f; }\n    get bodyCount() { return this._bodies.length; }\n    get particleCount() { return this._particles.length; }\n    body(id) { return this._bodies[(typeof id === \"string\") ? this._names.b[id] : id]; }\n    particle(id) { return this._particles[(typeof id === \"string\") ? this._names.p[id] : id]; }\n    update(ms) {\n        let dt = ms / 1000;\n        this._updateParticles(dt);\n        this._updateBodies(dt);\n    }\n    drawParticles(fn) {\n        this._drawParticles = fn;\n    }\n    drawBodies(fn) {\n        this._drawBodies = fn;\n    }\n    add(p, name) {\n        if (p instanceof Body) {\n            this._bodies.push(p);\n            if (name)\n                this._names.b[name] = this._bodies.length - 1;\n        }\n        else {\n            this._particles.push(p);\n            if (name)\n                this._names.p[name] = this._particles.length - 1;\n        }\n        return this;\n    }\n    remove(which, index, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        if (which == \"body\") {\n            this._bodies.splice(param[0], param[1]);\n        }\n        else {\n            this._particles.splice(param[0], param[1]);\n        }\n        return this;\n    }\n    static edgeConstraint(p1, p2, dist, stiff = 1, precise = false) {\n        const m1 = 1 / (p1.mass || 1);\n        const m2 = 1 / (p2.mass || 1);\n        const mm = m1 + m2;\n        let delta = p2.$subtract(p1);\n        let distSq = dist * dist;\n        let d = (precise) ? (dist / delta.magnitude() - 1) : (distSq / (delta.dot(delta) + distSq) - 0.5);\n        let f = delta.$multiply(d * stiff);\n        p1.subtract(f.$multiply(m1 / mm));\n        p2.add(f.$multiply(m2 / mm));\n        return p1;\n    }\n    static boundConstraint(p, rect, damping = 0.75) {\n        let bound = rect.boundingBox();\n        let np = p.$min(bound[1].subtract(p.radius)).$max(bound[0].add(p.radius));\n        if (np[0] === bound[0][0] || np[0] === bound[1][0]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(-c[0], c[1]));\n        }\n        else if (np[1] === bound[0][1] || np[1] === bound[1][1]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(c[0], -c[1]));\n        }\n        p.to(np);\n    }\n    integrate(p, dt, prevDt) {\n        p.addForce(this._gravity);\n        p.verlet(dt, this._friction, prevDt);\n        return p;\n    }\n    _updateParticles(dt) {\n        for (let i = 0, len = this._particles.length; i < len; i++) {\n            let p = this._particles[i];\n            this.integrate(p, dt, this._lastTime);\n            World.boundConstraint(p, this._bound, this._damping);\n            for (let k = i + 1; k < len; k++) {\n                if (i !== k) {\n                    let p2 = this._particles[k];\n                    p.collide(p2, this._damping);\n                }\n            }\n            if (this._drawParticles)\n                this._drawParticles(p, i);\n        }\n        this._lastTime = dt;\n    }\n    _updateBodies(dt) {\n        for (let i = 0, len = this._bodies.length; i < len; i++) {\n            let b = this._bodies[i];\n            for (let k = 0, klen = b.length; k < klen; k++) {\n                let bk = b[k];\n                World.boundConstraint(bk, this._bound, this._damping);\n                this.integrate(bk, dt, this._lastTime);\n            }\n            for (let k = i + 1; k < len; k++) {\n                b.processBody(this._bodies[k]);\n            }\n            for (let m = 0, mlen = this._particles.length; m < mlen; m++) {\n                b.processParticle(this._particles[m]);\n            }\n            b.processEdges();\n            if (this._drawBodies)\n                this._drawBodies(b, i);\n        }\n    }\n}\nexport class Particle extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mass = 1;\n        this._radius = 0;\n        this._force = new Pt();\n        this._prev = new Pt();\n        this._lock = false;\n        this._prev = this.clone();\n    }\n    get mass() { return this._mass; }\n    set mass(m) { this._mass = m; }\n    get radius() { return this._radius; }\n    set radius(f) { this._radius = f; }\n    get previous() { return this._prev; }\n    set previous(p) { this._prev = p; }\n    get force() { return this._force; }\n    set force(g) { this._force = g; }\n    get body() { return this._body; }\n    set body(b) { this._body = b; }\n    get lock() { return this._lock; }\n    set lock(b) {\n        this._lock = b;\n        this._lockPt = new Pt(this);\n    }\n    get changed() { return this.$subtract(this._prev); }\n    set position(p) {\n        this.previous.to(this);\n        if (this._lock)\n            this._lockPt = p;\n        this.to(p);\n    }\n    size(r) {\n        this._mass = r;\n        this._radius = r;\n        return this;\n    }\n    addForce(...args) {\n        this._force.add(...args);\n        return this._force;\n    }\n    verlet(dt, friction, lastDt) {\n        if (this._lock) {\n            this.to(this._lockPt);\n        }\n        else {\n            let lt = (lastDt) ? lastDt : dt;\n            let a = this._force.multiply(dt * (dt + lt) / 2);\n            let v = this.changed.multiply(friction * dt / lt).add(a);\n            this._prev = this.clone();\n            this.add(v);\n            this._force = new Pt();\n        }\n        return this;\n    }\n    hit(...args) {\n        this._prev.subtract(new Pt(...args).$divide(Math.sqrt(this._mass)));\n        return this;\n    }\n    collide(p2, damp = 1) {\n        let p1 = this;\n        let dp = p1.$subtract(p2);\n        let distSq = dp.magnitudeSq();\n        let dr = p1.radius + p2.radius;\n        if (distSq < dr * dr) {\n            let c1 = p1.changed;\n            let c2 = p2.changed;\n            let dist = Math.sqrt(distSq);\n            let d = dp.$multiply(((dist - dr) / dist) / 2);\n            let np1 = p1.$subtract(d);\n            let np2 = p2.$add(d);\n            p1.to(np1);\n            p2.to(np2);\n            let f1 = damp * dp.dot(c1) / distSq;\n            let f2 = damp * dp.dot(c2) / distSq;\n            let dm1 = p1.mass / (p1.mass + p2.mass);\n            let dm2 = p2.mass / (p1.mass + p2.mass);\n            c1.add(new Pt(f2 * dp[0] - f1 * dp[0], f2 * dp[1] - f1 * dp[1]).$multiply(dm2));\n            c2.add(new Pt(f1 * dp[0] - f2 * dp[0], f1 * dp[1] - f2 * dp[1]).$multiply(dm1));\n            p1.previous = p1.$subtract(c1);\n            p2.previous = p2.$subtract(c2);\n        }\n    }\n    toString() {\n        return `Particle: ${this[0]} ${this[1]} | previous ${this._prev[0]} ${this._prev[1]} | mass ${this._mass}`;\n    }\n}\nexport class Body extends Group {\n    constructor() {\n        super();\n        this._cs = [];\n        this._stiff = 1;\n        this._locks = {};\n        this._mass = 1;\n    }\n    static fromGroup(list, stiff = 1, autoLink = true, autoMass = true) {\n        let b = new Body().init(list);\n        if (autoLink)\n            b.linkAll(stiff);\n        if (autoMass)\n            b.autoMass();\n        return b;\n    }\n    init(list, stiff = 1) {\n        let c = new Pt();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = new Particle(list[i]);\n            p.body = this;\n            c.add(list[i]);\n            this.push(p);\n        }\n        this._stiff = stiff;\n        return this;\n    }\n    get mass() { return this._mass; }\n    set mass(m) {\n        this._mass = m;\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i].mass = this._mass;\n        }\n    }\n    autoMass() {\n        this.mass = Math.sqrt(Polygon.area(this)) / 10;\n        return this;\n    }\n    link(index1, index2, stiff) {\n        if (index1 < 0 || index1 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        if (index2 < 0 || index2 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        let d = this[index1].$subtract(this[index2]).magnitude();\n        this._cs.push([index1, index2, d, stiff || this._stiff]);\n        return this;\n    }\n    linkAll(stiff) {\n        let half = this.length / 2;\n        for (let i = 0, len = this.length; i < len; i++) {\n            let n = (i >= len - 1) ? 0 : i + 1;\n            this.link(i, n, stiff);\n            if (len > 4) {\n                let nd = (Math.floor(half / 2)) + 1;\n                let n2 = (i >= len - nd) ? i % len : i + nd;\n                this.link(i, n2, stiff);\n            }\n            if (i <= half - 1) {\n                this.link(i, Math.min(this.length - 1, i + Math.floor(half)));\n            }\n        }\n    }\n    linksToLines() {\n        let gs = [];\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let ln = this._cs[i];\n            gs.push(new Group(this[ln[0]], this[ln[1]]));\n        }\n        return gs;\n    }\n    processEdges() {\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let [m, n, d, s] = this._cs[i];\n            World.edgeConstraint(this[m], this[n], d, s);\n        }\n    }\n    processBody(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectPolygon(b1, b2);\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.body.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            hit.vertex.add(cv.$multiply(mr1));\n        }\n    }\n    processParticle(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectCircle(b1, Circle.fromCenter(b, b.radius));\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.mass || b2.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            let c1 = b.changed.add(cv.$multiply(mr1));\n            b.previous = b.$subtract(c1);\n        }\n    }\n}\n//# sourceMappingURL=Physics.js.map","export * from \"./Canvas\";\nexport * from \"./Create\";\nexport * from \"./Form\";\nexport * from \"./LinearAlgebra\";\nexport * from \"./Num\";\nexport * from \"./Op\";\nexport * from \"./Pt\";\nexport * from \"./Space\";\nexport * from \"./Color\";\nexport * from \"./Util\";\nexport * from \"./Dom\";\nexport * from \"./Svg\";\nexport * from \"./Typography\";\nexport * from \"./Physics\";\n//# sourceMappingURL=_module.js.map"],"sourceRoot":""}