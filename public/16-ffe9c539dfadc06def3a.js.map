{"version":3,"sources":["webpack:///./node_modules/lodash/_nativeCreate.js","webpack:///./node_modules/lodash/_assocIndexOf.js","webpack:///./node_modules/lodash/_getMapData.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_getNative.js","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/gatsby/node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/lodash/get.js","webpack:///./node_modules/lodash/_baseGet.js","webpack:///./node_modules/lodash/_castPath.js","webpack:///./node_modules/lodash/_isKey.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/lodash/_stringToPath.js","webpack:///./node_modules/lodash/_memoizeCapped.js","webpack:///./node_modules/lodash/memoize.js","webpack:///./node_modules/lodash/_MapCache.js","webpack:///./node_modules/lodash/_mapCacheClear.js","webpack:///./node_modules/lodash/_Hash.js","webpack:///./node_modules/lodash/_hashClear.js","webpack:///./node_modules/lodash/_baseIsNative.js","webpack:///./node_modules/lodash/isFunction.js","webpack:///./node_modules/lodash/_isMasked.js","webpack:///./node_modules/lodash/_coreJsData.js","webpack:///./node_modules/lodash/_toSource.js","webpack:///./node_modules/lodash/_getValue.js","webpack:///./node_modules/lodash/_hashDelete.js","webpack:///./node_modules/lodash/_hashGet.js","webpack:///./node_modules/lodash/_hashHas.js","webpack:///./node_modules/lodash/_hashSet.js","webpack:///./node_modules/lodash/_ListCache.js","webpack:///./node_modules/lodash/_listCacheClear.js","webpack:///./node_modules/lodash/_listCacheDelete.js","webpack:///./node_modules/lodash/eq.js","webpack:///./node_modules/lodash/_listCacheGet.js","webpack:///./node_modules/lodash/_listCacheHas.js","webpack:///./node_modules/lodash/_listCacheSet.js","webpack:///./node_modules/lodash/_Map.js","webpack:///./node_modules/lodash/_mapCacheDelete.js","webpack:///./node_modules/lodash/_isKeyable.js","webpack:///./node_modules/lodash/_mapCacheGet.js","webpack:///./node_modules/lodash/_mapCacheHas.js","webpack:///./node_modules/lodash/_mapCacheSet.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/_arrayMap.js","webpack:///./node_modules/lodash/_toKey.js","webpack:///./node_modules/pts/dist/es2015/Util.js","webpack:///./node_modules/pts/dist/es2015/LinearAlgebra.js","webpack:///./node_modules/pts/dist/es2015/Op.js","webpack:///./node_modules/pts/dist/es2015/Num.js","webpack:///./node_modules/pts/dist/es2015/Pt.js","webpack:///./node_modules/pts/dist/es2015/UI.js","webpack:///./node_modules/pts/dist/es2015/Space.js","webpack:///./node_modules/pts/dist/es2015/Form.js","webpack:///./node_modules/pts/dist/es2015/Typography.js","webpack:///./node_modules/pts/dist/es2015/Canvas.js","webpack:///./node_modules/pts/dist/es2015/Create.js","webpack:///./node_modules/pts/dist/es2015/Color.js","webpack:///./node_modules/pts/dist/es2015/Dom.js","webpack:///./node_modules/pts/dist/es2015/Svg.js","webpack:///./node_modules/pts/dist/es2015/Physics.js","webpack:///./node_modules/pts/dist/es2015/_module.js"],"names":["nativeCreate","__webpack_require__","getNative","Object","module","exports","eq","array","key","length","isKeyable","map","data","__data__","isArray","Array","baseGetTag","isObjectLike","symbolTag","value","Symbol","freeGlobal","freeSelf","self","root","Function","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","toStringTag","undefined","baseIsNative","getValue","object","type","$export","aFunction","toObject","fails","$sort","sort","test","P","F","comparefn","call","this","baseGet","path","defaultValue","result","castPath","toKey","index","isKey","stringToPath","toString","isSymbol","reIsDeepProp","reIsPlainProp","global","objectProto","prototype","hasOwnProperty","nativeObjectToString","isOwn","tag","unmasked","e","memoizeCapped","rePropName","reEscapeChar","string","charCodeAt","push","replace","match","number","quote","subString","memoize","MAX_MEMOIZE_SIZE","func","cache","size","clear","MapCache","FUNC_ERROR_TEXT","resolver","TypeError","memoized","args","arguments","apply","has","get","set","Cache","mapCacheClear","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","entries","entry","Hash","ListCache","Map","hash","hashClear","hashDelete","hashGet","hashHas","hashSet","isFunction","isMasked","isObject","toSource","reIsHostCtor","funcProto","funcToString","reIsNative","RegExp","asyncTag","funcTag","genTag","proxyTag","uid","coreJsData","maskSrcKey","exec","keys","IE_PROTO","HASH_UNDEFINED","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","assocIndexOf","splice","pop","other","getMapData","baseToString","arrayMap","INFINITY","symbolProto","symbolToString","iteratee","Const","xy","yz","xz","xyz","horizontal","vertical","identical","right","bottom_right","bottom","bottom_left","left","top_left","top","top_right","epsilon","max","Number","MAX_VALUE","min","MIN_VALUE","pi","Math","PI","two_pi","half_pi","quarter_pi","one_degree","rad_to_deg","deg_to_rad","gravity","newton","gaussian","Util_Util","[object Object]","lv","_warnLevel","pos","ArrayBuffer","isView","slice","a","p","i","message","defaultReturn","warnLevel","Error","console","warn","range","start","floor","random","pts","stride","loopBack","st","chunks","g","concat","flattenAsGroup","arr","Pt_Group","b","op","len","k","lenB","arrays","z","callback","c","fn","step","temp","LinearAlgebra_Vec","d","Pt_Pt","sqrt","dot","magnitude","m","divide","abs","ceil","round","s","LinearAlgebra_Mat","isNum","$add","transposed","elementwise","ai","alen","$multiply","transpose","make","bi","blen","useLongest","ps","reduce","zipSlice","zip","pt","x","y","cosA","sinA","tanX","tanY","sx","sy","at","scale2DMatrix","rotate2DMatrix","shear2DMatrix","p1","p2","intercept","Op_Line","yi","ang2","atan","slope","cos","sin","_errorLength","obj","param","_errorOutofBound","anchor","angle","toAngle","xi","line","p3","threshold","to","$subtract","$cross","equals","magnitudeSq","asProjection","proj","$project","perpendicularFromPt","la","lb","pa","pb","y1","px","py","intersectRay2D","Num_Geom","withinBound","ray","lineOrRay","poly","sourceIsRay","intersectLineWithRay2D","intersectLine2D","next","lines1","lines2","isRay","group","lenk","_ip","gridPt","t","subtract","intersectGridWithRay2D","gg","rect","box","boundingBox","fromPtArray","Op_Rectangle","hasIntersectRect2D","intersectLines2D","sides","num","interpolate","cropAsCircle","ls","unit","multiply","fromCenter","sideIdx","graphic","atTail","perpendicular","add","$min","$max","topLeft","widthOrSize","height","fromTopLeft","center","half","within","Op_Circle","fromRect","enclose","maxValue","minValue","p0","corners","rects","merged","flatten","_center","ratio","asRows","mid","Num_Num","lerp","rect1","rect2","resetBoundingBox","r","radius","f","disc","discSqrt","t1","t2","circle","dv","dr2","dr","ar","br","ar2","br2","clone","h","ang","inc","Op_Triangle","toTriangle","fromCircle","Op_Polygon","midpoints","opp","oppositeSide","altitude","bisector","incenter","area","perimeter","total","md","medial","circumcenter","centroid","idx","closePath","sp","split","lines","gs","adjacentSides","mag","segments","det","sorted","dq","bot","hull","originIndex","_near","_item","unitAxis","n","poly1","poly2","projectAxis","ln","lineAt","info","which","dist","normal","edge","vertex","minDist","MAX_SAFE_INTEGER","axis","_axisOverlap","plen","b1","b2","c1","c2","smallest","lp","ins","intersectPolygon2D","polys","boxes","unshift","val","sum","currA","currB","targetA","targetB","normalizeValue","boundValue","radian","minPt","maxPt","average","ptOrIndex","direction","method","boundPt1","boundPt2","bounds","da","db","$cross2D","scale","scs","lenP","rotateAt2DMatrix","$take","transform2D","shearAt2DMatrix","tanx","tan","tany","mat","reflectAt2DMatrix","Float64Array","table","rad","boundAngle","toDegree","UIShape","PtBaseArray","Float32Array","super","getArgs","dimensions","randomize","fill","id","_id","w","anchorFromPt","change","params","fns","_ops","toArray","cross2D","cross","atan2","boundRadian","rotate2D","shear2D","reflect2D","join","p4","q1","q2","q3","q4","list","from","chunkSize","count","pts_per_segment","clamp","chunk","tc","moveBy","dim","desc","ptFn","forEachPt","Bound","_size","_topLeft","_bottomRight","_inited","init","width","_updateSize","_updateCenter","_updatePosFromTop","_updatePosFromCenter","bottomRight","depth","inited","UIPointerActions","up","down","move","drag","drop","over","out","Space_Space","bound","_time","prev","diff","end","players","playerCount","_animID","_pause","_refresh","_pointer","_isReady","_playing","player","animate","pid","animateID","resize","time","requestAnimationFrame","play","bind","playItems","err","cancelAnimationFrame","toggle","duration","stop","context","_renderFunc","customRendering","isPlaying","outerBound","innerBound","Space_MultiTouchSpace","_pressed","_dragged","_hasMouse","_hasTouch","pointer","evt","_canvas","addEventListener","removeEventListener","_bind","bindCanvas","_mouseDown","_mouseUp","_mouseOver","_mouseOut","_mouseMove","unbindCanvas","_touchMove","ts","item","pageX","pageY","MouseEvent","v","action","changedTouches","touch","_mouseAction","preventDefault","Form_Form","_ready","ready","required","VisualForm","_filled","_stroked","_font","Font","filled","stroked","currentFont","groups","shape","rest","stroke","linejoin","linecap","point","_multiple","face","weight","style","lineHeight","Typography_Typography","samples","distribution","avg","str","tail","trim","substr","byHeight","nh","defaultSize","Canvas_CanvasSpace","elem","_pixelScale","_autoResize","_bgcolor","_offscreen","_initialResize","_selector","Element","document","querySelector","nodeName","toLowerCase","_container","_createElement","appendChild","parentElement","body","setTimeout","_ctx","getContext","createElement","setAttribute","_resizeHandler","dispatchEvent","Event","opt","bgcolor","autoResize","retina","r1","window","devicePixelRatio","r2","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","offscreen","_offCanvas","_offCtx","auto","translate","render","playOnce","getBoundingClientRect","fromBoundingRect","pageXOffset","pageYOffset","background","bg","pixelScale","hasOffscreen","offscreenCtx","offscreenCanvas","Canvas_CanvasForm","element","parent","ctx","lastColor","fillStyle","fillRect","clearRect","save","restore","space","_style","strokeStyle","lineWidth","lineJoin","lineCap","_space","font","off","clearOffscreen","offset","drawImage","sizeOrFont","family","_estimateTextWidth","fontWidthEstimate","estimate","textWidthEstimator","measureText","truncate","getTextWidth","textAlign","_paint","beginPath","arc","startAngle","endAngle","cc","halfsize","x1","x2","y2","moveTo","lineTo","square","polygon","img","target","orig","original","image","txt","maxWidth","fillText","text","verticalAlign","overrideBaseline","textBaseline","_textTruncate","_textAlign","crop","lstep","nextLine","sub","buffer","newln","indexOf","dt","lastIndexOf","lsize","lbox","lpad","alignment","baseline","Create_Create","subpoints","columns","rows","orientation","$divide","dx","dy","seed","np","Create_Noise","initNoise","Create_Delaunay","grad3","permTable","perm","_n","j","n00","n01","n10","n11","_fade","tx","_mesh","triangleOnly","indices","_superTriangle","opened","_circum","closed","tris","edges","circum","triangle","_dedupe","o","_cache","vs","neighborPts","cs","sortEdges","dmax","tri","_triangle","circumcircle","Color_Color","_mode","_isNorm","hex","alpha","substring","hexVal","parseInt","toMode","mode","ranges","rgb","rgba","convert","fname","toUpperCase","l","u","normalized","toNorm","mapToRange","normalize","format","_hex","normalizedInput","normalizedOutput","$normalize","hsl","q","sc","hsb","XYZtoLAB","RGBtoXYZ","lab","XYZtoRGB","LABtoXYZ","LABtoLCH","RGBtoLAB","lch","LABtoRGB","LCHtoLAB","XYZtoLUV","luv","LUVtoXYZ","pow","D65","cy","nnn","refU","refV","L","cubeY","toRadian","Dom_DOMSpace","_css","appendTo","refresh","styles","innerHTML","backgroundColor","update","HTMLSpace","Dom_HTMLForm","name","autoClass","querySelectorAll","scopeID","forEach","el","parentNode","removeChild","remove","removeAll","groupID","groupCount","currentID","currentClass","border-color","color","border-width","border-radius","border-style","position","fontSize","fontFamily","styleTo","group_id","nextID","updateScope","domID","setAttr","htmlElement","getID","class","rectStyle","_checkSize","textContent","Svg_SVGSpace","svgElement","Svg_SVGForm","viewBox","xmlns","version","createElementNS","stroke-width","stroke-linejoin","stroke-linecap","cx","largeArc","sweep","_poly","points","fromArray","pointer-events","Physics_World","friction","_lastTime","_gravity","_friction","_damping","_particles","_bodies","_names","_bound","fromGroup","damping","bodyCount","particleCount","ms","_updateParticles","_updateBodies","_drawParticles","_drawBodies","Physics_Body","stiff","precise","m1","mass","m2","mm","delta","distSq","changed","previous","prevDt","addForce","verlet","integrate","boundConstraint","collide","klen","bk","processBody","mlen","processParticle","processEdges","Physics_Particle","_mass","_radius","_force","_prev","_lock","force","_body","lock","_lockPt","lastDt","lt","damp","dp","np1","np2","f1","f2","dm1","dm2","_cs","_stiff","_locks","autoLink","autoMass","linkAll","index1","index2","link","nd","n2","edgeConstraint","hit","hasIntersectPolygon","cv","eg","lambda","m0","mr0","mr1","hasIntersectCircle","__webpack_exports__"],"mappings":"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","file":"16-ffe9c539dfadc06def3a.js","sourcesContent":["var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","import { Group } from \"./Pt\";\nexport const Const = {\n    xy: \"xy\",\n    yz: \"yz\",\n    xz: \"xz\",\n    xyz: \"xyz\",\n    horizontal: 0,\n    vertical: 1,\n    identical: 0,\n    right: 4,\n    bottom_right: 5,\n    bottom: 6,\n    bottom_left: 7,\n    left: 8,\n    top_left: 1,\n    top: 2,\n    top_right: 3,\n    epsilon: 0.0001,\n    max: Number.MAX_VALUE,\n    min: Number.MIN_VALUE,\n    pi: Math.PI,\n    two_pi: 6.283185307179586,\n    half_pi: 1.5707963267948966,\n    quarter_pi: 0.7853981633974483,\n    one_degree: 0.017453292519943295,\n    rad_to_deg: 57.29577951308232,\n    deg_to_rad: 0.017453292519943295,\n    gravity: 9.81,\n    newton: 0.10197,\n    gaussian: 0.3989422804014327\n};\nexport class Util {\n    static warnLevel(lv) {\n        if (lv) {\n            Util._warnLevel = lv;\n        }\n        return Util._warnLevel;\n    }\n    static getArgs(args) {\n        if (args.length < 1)\n            return [];\n        let pos = [];\n        let isArray = Array.isArray(args[0]) || ArrayBuffer.isView(args[0]);\n        if (typeof args[0] === 'number') {\n            pos = Array.prototype.slice.call(args);\n        }\n        else if (typeof args[0] === 'object' && !isArray) {\n            let a = [\"x\", \"y\", \"z\", \"w\"];\n            let p = args[0];\n            for (let i = 0; i < a.length; i++) {\n                if ((p.length && i >= p.length) || !(a[i] in p))\n                    break;\n                pos.push(p[a[i]]);\n            }\n        }\n        else if (isArray) {\n            pos = [].slice.call(args[0]);\n        }\n        return pos;\n    }\n    static warn(message = \"error\", defaultReturn = undefined) {\n        if (Util.warnLevel() == \"error\") {\n            throw new Error(message);\n        }\n        else if (Util.warnLevel() == \"warn\") {\n            console.warn(message);\n        }\n        return defaultReturn;\n    }\n    static randomInt(range, start = 0) {\n        return Math.floor(Math.random() * range) + start;\n    }\n    static split(pts, size, stride, loopBack = false) {\n        let st = stride || size;\n        let chunks = [];\n        for (let i = 0; i < pts.length; i++) {\n            if (i * st + size > pts.length) {\n                if (loopBack) {\n                    let g = pts.slice(i * st);\n                    g = g.concat(pts.slice(0, (i * st + size) % size));\n                    chunks.push(g);\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                chunks.push(pts.slice(i * st, i * st + size));\n            }\n        }\n        return chunks;\n    }\n    static flatten(pts, flattenAsGroup = true) {\n        let arr = (flattenAsGroup) ? new Group() : new Array();\n        return arr.concat.apply(arr, pts);\n    }\n    static combine(a, b, op) {\n        let result = [];\n        for (let i = 0, len = a.length; i < len; i++) {\n            for (let k = 0, lenB = b.length; k < lenB; k++) {\n                result.push(op(a[i], b[k]));\n            }\n        }\n        return result;\n    }\n    static zip(arrays) {\n        let z = [];\n        for (let i = 0, len = arrays[0].length; i < len; i++) {\n            let p = [];\n            for (let k = 0; k < arrays.length; k++) {\n                p.push(arrays[k][i]);\n            }\n            z.push(p);\n        }\n        return z;\n    }\n    static stepper(max, min = 0, stride = 1, callback) {\n        let c = min;\n        return function () {\n            c += stride;\n            if (c >= max) {\n                c = min + (c - max);\n            }\n            if (callback)\n                callback(c);\n            return c;\n        };\n    }\n    static forRange(fn, range, start = 0, step = 1) {\n        let temp = [];\n        for (let i = start, len = range; i < len; i += step) {\n            temp[i] = fn(i);\n        }\n        return temp;\n    }\n}\nUtil._warnLevel = \"mute\";\n//# sourceMappingURL=Util.js.map","import { Pt, Group } from \"./Pt\";\nimport { Line } from \"./Op\";\nexport class Vec {\n    static add(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] += b[i] || 0;\n        }\n        return a;\n    }\n    static subtract(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b;\n        }\n        else {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] -= b[i] || 0;\n        }\n        return a;\n    }\n    static multiply(a, b) {\n        if (typeof b == \"number\") {\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise multiply since the array lengths don't match: ${a.toString()} multiply-with ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] *= b[i];\n        }\n        return a;\n    }\n    static divide(a, b) {\n        if (typeof b == \"number\") {\n            if (b === 0)\n                throw new Error(\"Cannot divide by zero\");\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b;\n        }\n        else {\n            if (a.length != b.length) {\n                throw new Error(`Cannot do element-wise divide since the array lengths don't match. ${a.toString()} divide-by ${b.toString()}`);\n            }\n            for (let i = 0, len = a.length; i < len; i++)\n                a[i] /= b[i];\n        }\n        return a;\n    }\n    static dot(a, b) {\n        if (a.length != b.length)\n            throw new Error(\"Array lengths don't match\");\n        let d = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            d += a[i] * b[i];\n        }\n        return d;\n    }\n    static cross2D(a, b) {\n        return a[0] * b[1] - a[1] * b[0];\n    }\n    static cross(a, b) {\n        return new Pt((a[1] * b[2] - a[2] * b[1]), (a[2] * b[0] - a[0] * b[2]), (a[0] * b[1] - a[1] * b[0]));\n    }\n    static magnitude(a) {\n        return Math.sqrt(Vec.dot(a, a));\n    }\n    static unit(a, magnitude = undefined) {\n        let m = (magnitude === undefined) ? Vec.magnitude(a) : magnitude;\n        if (m === 0)\n            throw new Error(\"Cannot calculate unit vector because magnitude is 0\");\n        return Vec.divide(a, m);\n    }\n    static abs(a) {\n        return Vec.map(a, Math.abs);\n    }\n    static floor(a) {\n        return Vec.map(a, Math.floor);\n    }\n    static ceil(a) {\n        return Vec.map(a, Math.ceil);\n    }\n    static round(a) {\n        return Vec.map(a, Math.round);\n    }\n    static max(a) {\n        let m = Number.MIN_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.max(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static min(a) {\n        let m = Number.MAX_VALUE;\n        let index = 0;\n        for (let i = 0, len = a.length; i < len; i++) {\n            m = Math.min(m, a[i]);\n            if (m === a[i])\n                index = i;\n        }\n        return { value: m, index: index };\n    }\n    static sum(a) {\n        let s = 0;\n        for (let i = 0, len = a.length; i < len; i++)\n            s += a[i];\n        return s;\n    }\n    static map(a, fn) {\n        for (let i = 0, len = a.length; i < len; i++) {\n            a[i] = fn(a[i], i, a);\n        }\n        return a;\n    }\n}\nexport class Mat {\n    static add(a, b) {\n        if (typeof b != \"number\") {\n            if (a[0].length != b[0].length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n            if (a.length != b.length)\n                throw new Error(\"Cannot add matrix if rows' and columns' size don't match.\");\n        }\n        let g = new Group();\n        let isNum = typeof b == \"number\";\n        for (let i = 0, len = a.length; i < len; i++) {\n            g.push(a[i].$add((isNum) ? b : b[i]));\n        }\n        return g;\n    }\n    static multiply(a, b, transposed = false, elementwise = false) {\n        let g = new Group();\n        if (typeof b != \"number\") {\n            if (elementwise) {\n                if (a.length != b.length)\n                    throw new Error(\"Cannot multiply matrix element-wise because the matrices' sizes don't match.\");\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    g.push(a[ai].$multiply(b[ai]));\n                }\n            }\n            else {\n                if (!transposed && a[0].length != b.length)\n                    throw new Error(\"Cannot multiply matrix if rows in matrix-a don't match columns in matrix-b.\");\n                if (transposed && a[0].length != b[0].length)\n                    throw new Error(\"Cannot multiply matrix if transposed and the columns in both matrices don't match.\");\n                if (!transposed)\n                    b = Mat.transpose(b);\n                for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                    let p = Pt.make(b.length, 0);\n                    for (let bi = 0, blen = b.length; bi < blen; bi++) {\n                        p[bi] = Vec.dot(a[ai], b[bi]);\n                    }\n                    g.push(p);\n                }\n            }\n        }\n        else {\n            for (let ai = 0, alen = a.length; ai < alen; ai++) {\n                g.push(a[ai].$multiply(b));\n            }\n        }\n        return g;\n    }\n    static zipSlice(g, index, defaultValue = false) {\n        let z = [];\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (g[i].length - 1 < index && defaultValue === false)\n                throw `Index ${index} is out of bounds`;\n            z.push(g[i][index] || defaultValue);\n        }\n        return new Pt(z);\n    }\n    static zip(g, defaultValue = false, useLongest = false) {\n        let ps = new Group();\n        let len = (useLongest) ? g.reduce((a, b) => Math.max(a, b.length), 0) : g[0].length;\n        for (let i = 0; i < len; i++) {\n            ps.push(Mat.zipSlice(g, i, defaultValue));\n        }\n        return ps;\n    }\n    static transpose(g, defaultValue = false, useLongest = false) {\n        return Mat.zip(g, defaultValue, useLongest);\n    }\n    static transform2D(pt, m) {\n        let x = pt[0] * m[0][0] + pt[1] * m[1][0] + m[2][0];\n        let y = pt[0] * m[0][1] + pt[1] * m[1][1] + m[2][1];\n        return new Pt(x, y);\n    }\n    static scale2DMatrix(x, y) {\n        return new Group(new Pt(x, 0, 0), new Pt(0, y, 0), new Pt(0, 0, 1));\n    }\n    static rotate2DMatrix(cosA, sinA) {\n        return new Group(new Pt(cosA, sinA, 0), new Pt(-sinA, cosA, 0), new Pt(0, 0, 1));\n    }\n    static shear2DMatrix(tanX, tanY) {\n        return new Group(new Pt(1, tanX, 0), new Pt(tanY, 1, 0), new Pt(0, 0, 1));\n    }\n    static translate2DMatrix(x, y) {\n        return new Group(new Pt(1, 0, 0), new Pt(0, 1, 0), new Pt(x, y, 1));\n    }\n    static scaleAt2DMatrix(sx, sy, at) {\n        let m = Mat.scale2DMatrix(sx, sy);\n        m[2][0] = -at[0] * sx + at[0];\n        m[2][1] = -at[1] * sy + at[1];\n        return m;\n    }\n    static rotateAt2DMatrix(cosA, sinA, at) {\n        let m = Mat.rotate2DMatrix(cosA, sinA);\n        m[2][0] = at[0] * (1 - cosA) + at[1] * sinA;\n        m[2][1] = at[1] * (1 - cosA) - at[0] * sinA;\n        return m;\n    }\n    static shearAt2DMatrix(tanX, tanY, at) {\n        let m = Mat.shear2DMatrix(tanX, tanY);\n        m[2][0] = -at[1] * tanY;\n        m[2][1] = -at[0] * tanX;\n        return m;\n    }\n    static reflectAt2DMatrix(p1, p2) {\n        let intercept = Line.intercept(p1, p2);\n        if (intercept == undefined) {\n            return [\n                new Pt([-1, 0, 0]),\n                new Pt([0, 1, 0]),\n                new Pt([p1[0] + p2[0], 0, 1])\n            ];\n        }\n        else {\n            let yi = intercept.yi;\n            let ang2 = Math.atan(intercept.slope) * 2;\n            let cosA = Math.cos(ang2);\n            let sinA = Math.sin(ang2);\n            return [\n                new Pt([cosA, sinA, 0]),\n                new Pt([sinA, -cosA, 0]),\n                new Pt([-yi * sinA, yi + yi * cosA, 1])\n            ];\n        }\n    }\n}\n//# sourceMappingURL=LinearAlgebra.js.map","import { Util } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Pt, Group } from \"./Pt\";\nimport { Mat } from \"./LinearAlgebra\";\nlet _errorLength = (obj, param = \"expected\") => Util.warn(\"Group's length is less than \" + param, obj);\nlet _errorOutofBound = (obj, param = \"\") => Util.warn(`Index ${param} is out of bound in Group`, obj);\nexport class Line {\n    static fromAngle(anchor, angle, magnitude) {\n        let g = new Group(new Pt(anchor), new Pt(anchor));\n        g[1].toAngle(angle, magnitude, true);\n        return g;\n    }\n    static slope(p1, p2) {\n        return (p2[0] - p1[0] === 0) ? undefined : (p2[1] - p1[1]) / (p2[0] - p1[0]);\n    }\n    static intercept(p1, p2) {\n        if (p2[0] - p1[0] === 0) {\n            return undefined;\n        }\n        else {\n            let m = (p2[1] - p1[1]) / (p2[0] - p1[0]);\n            let c = p1[1] - m * p1[0];\n            return { slope: m, yi: c, xi: (m === 0) ? undefined : -c / m };\n        }\n    }\n    static sideOfPt2D(line, pt) {\n        return (line[1][0] - line[0][0]) * (pt[1] - line[0][1]) - (pt[0] - line[0][0]) * (line[1][1] - line[0][1]);\n    }\n    static collinear(p1, p2, p3, threshold = 0.01) {\n        let a = new Pt(0, 0, 0).to(p1).$subtract(p2);\n        let b = new Pt(0, 0, 0).to(p1).$subtract(p3);\n        return a.$cross(b).divide(1000).equals(new Pt(0, 0, 0), threshold);\n    }\n    static magnitude(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitude() : 0;\n    }\n    static magnitudeSq(line) {\n        return (line.length >= 2) ? line[1].$subtract(line[0]).magnitudeSq() : 0;\n    }\n    static perpendicularFromPt(line, pt, asProjection = false) {\n        if (line[0].equals(line[1]))\n            return undefined;\n        let a = line[0].$subtract(line[1]);\n        let b = line[1].$subtract(pt);\n        let proj = b.$subtract(a.$project(b));\n        return (asProjection) ? proj : proj.$add(pt);\n    }\n    static distanceFromPt(line, pt) {\n        return Line.perpendicularFromPt(line, pt, true).magnitude();\n    }\n    static intersectRay2D(la, lb) {\n        let a = Line.intercept(la[0], la[1]);\n        let b = Line.intercept(lb[0], lb[1]);\n        let pa = la[0];\n        let pb = lb[0];\n        if (a == undefined) {\n            if (b == undefined)\n                return undefined;\n            let y1 = -b.slope * (pb[0] - pa[0]) + pb[1];\n            return new Pt(pa[0], y1);\n        }\n        else {\n            if (b == undefined) {\n                let y1 = -a.slope * (pa[0] - pb[0]) + pa[1];\n                return new Pt(pb[0], y1);\n            }\n            else if (b.slope != a.slope) {\n                let px = (a.slope * pa[0] - b.slope * pb[0] + pb[1] - pa[1]) / (a.slope - b.slope);\n                let py = a.slope * (px - pa[0]) + pa[1];\n                return new Pt(px, py);\n            }\n            else {\n                if (a.yi == b.yi) {\n                    return new Pt(pa[0], pa[1]);\n                }\n                else {\n                    return undefined;\n                }\n            }\n        }\n    }\n    static intersectLine2D(la, lb) {\n        let pt = Line.intersectRay2D(la, lb);\n        return (pt && Geom.withinBound(pt, la[0], la[1]) && Geom.withinBound(pt, lb[0], lb[1])) ? pt : undefined;\n    }\n    static intersectLineWithRay2D(line, ray) {\n        let pt = Line.intersectRay2D(line, ray);\n        return (pt && Geom.withinBound(pt, line[0], line[1])) ? pt : undefined;\n    }\n    static intersectPolygon2D(lineOrRay, poly, sourceIsRay = false) {\n        let fn = sourceIsRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        let pts = new Group();\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let next = (i === len - 1) ? 0 : i + 1;\n            let d = fn([poly[i], poly[next]], lineOrRay);\n            if (d)\n                pts.push(d);\n        }\n        return (pts.length > 0) ? pts : undefined;\n    }\n    static intersectLines2D(lines1, lines2, isRay = false) {\n        let group = new Group();\n        let fn = isRay ? Line.intersectLineWithRay2D : Line.intersectLine2D;\n        for (let i = 0, len = lines1.length; i < len; i++) {\n            for (let k = 0, lenk = lines2.length; k < lenk; k++) {\n                let _ip = fn(lines1[i], lines2[k]);\n                if (_ip)\n                    group.push(_ip);\n            }\n        }\n        return group;\n    }\n    static intersectGridWithRay2D(ray, gridPt) {\n        let t = Line.intercept(new Pt(ray[0]).subtract(gridPt), new Pt(ray[1]).subtract(gridPt));\n        let g = new Group();\n        if (t && t.xi)\n            g.push(new Pt(gridPt[0] + t.xi, gridPt[1]));\n        if (t && t.yi)\n            g.push(new Pt(gridPt[0], gridPt[1] + t.yi));\n        return g;\n    }\n    static intersectGridWithLine2D(line, gridPt) {\n        let g = Line.intersectGridWithRay2D(line, gridPt);\n        let gg = new Group();\n        for (let i = 0, len = g.length; i < len; i++) {\n            if (Geom.withinBound(g[i], line[0], line[1]))\n                gg.push(g[i]);\n        }\n        return gg;\n    }\n    static intersectRect2D(line, rect) {\n        let box = Geom.boundingBox(Group.fromPtArray(line));\n        if (!Rectangle.hasIntersectRect2D(box, rect))\n            return new Group();\n        return Line.intersectLines2D([line], Rectangle.sides(rect));\n    }\n    static subpoints(line, num) {\n        let pts = new Group();\n        for (let i = 1; i <= num; i++) {\n            pts.push(Geom.interpolate(line[0], line[1], i / (num + 1)));\n        }\n        return pts;\n    }\n    static crop(line, size, index = 0, cropAsCircle = true) {\n        let tdx = (index === 0) ? 1 : 0;\n        let ls = line[tdx].$subtract(line[index]);\n        if (ls[0] === 0 || size[0] === 0)\n            return line[index];\n        if (cropAsCircle) {\n            let d = ls.unit().multiply(size[1]);\n            return line[index].$add(d);\n        }\n        else {\n            let rect = Rectangle.fromCenter(line[index], size);\n            let sides = Rectangle.sides(rect);\n            let sideIdx = 0;\n            if (Math.abs(ls[1] / ls[0]) > Math.abs(size[1] / size[0])) {\n                sideIdx = (ls[1] < 0) ? 0 : 2;\n            }\n            else {\n                sideIdx = (ls[0] < 0) ? 3 : 1;\n            }\n            return Line.intersectRay2D(sides[sideIdx], line);\n        }\n    }\n    static marker(line, size, graphic = (\"arrow\" || \"line\"), atTail = true) {\n        let h = atTail ? 0 : 1;\n        let t = atTail ? 1 : 0;\n        let unit = line[h].$subtract(line[t]);\n        if (unit.magnitudeSq() === 0)\n            return new Group();\n        unit.unit();\n        let ps = Geom.perpendicular(unit).multiply(size[0]).add(line[t]);\n        if (graphic == \"arrow\") {\n            ps.add(unit.$multiply(size[1]));\n            return new Group(line[t], ps[0], ps[1]);\n        }\n        else {\n            return new Group(ps[0], ps[1]);\n        }\n    }\n    static toRect(line) {\n        return new Group(line[0].$min(line[1]), line[0].$max(line[1]));\n    }\n}\nexport class Rectangle {\n    static from(topLeft, widthOrSize, height) {\n        return Rectangle.fromTopLeft(topLeft, widthOrSize, height);\n    }\n    static fromTopLeft(topLeft, widthOrSize, height) {\n        let size = (typeof widthOrSize == \"number\") ? [widthOrSize, (height || widthOrSize)] : widthOrSize;\n        return new Group(new Pt(topLeft), new Pt(topLeft).add(size));\n    }\n    static fromCenter(center, widthOrSize, height) {\n        let half = (typeof widthOrSize == \"number\") ? [widthOrSize / 2, (height || widthOrSize) / 2] : new Pt(widthOrSize).divide(2);\n        return new Group(new Pt(center).subtract(half), new Pt(center).add(half));\n    }\n    static toCircle(pts, within = true) {\n        return Circle.fromRect(pts, within);\n    }\n    static toSquare(pts, enclose = false) {\n        let s = Rectangle.size(pts);\n        let m = (enclose) ? s.maxValue().value : s.minValue().value;\n        return Rectangle.fromCenter(Rectangle.center(pts), m, m);\n    }\n    static size(pts) {\n        return pts[0].$max(pts[1]).subtract(pts[0].$min(pts[1]));\n    }\n    static center(pts) {\n        let min = pts[0].$min(pts[1]);\n        let max = pts[0].$max(pts[1]);\n        return min.add(max.$subtract(min).divide(2));\n    }\n    static corners(rect) {\n        let p0 = rect[0].$min(rect[1]);\n        let p2 = rect[0].$max(rect[1]);\n        return new Group(p0, new Pt(p2.x, p0.y), p2, new Pt(p0.x, p2.y));\n    }\n    static sides(rect) {\n        let [p0, p1, p2, p3] = Rectangle.corners(rect);\n        return [\n            new Group(p0, p1), new Group(p1, p2),\n            new Group(p2, p3), new Group(p3, p0)\n        ];\n    }\n    static boundingBox(rects) {\n        let merged = Util.flatten(rects, false);\n        let min = Pt.make(2, Number.MAX_VALUE);\n        let max = Pt.make(2, Number.MIN_VALUE);\n        for (let i = 0, len = merged.length; i < len; i++) {\n            for (let k = 0; k < 2; k++) {\n                min[k] = Math.min(min[k], merged[i][k]);\n                max[k] = Math.max(max[k], merged[i][k]);\n            }\n        }\n        return new Group(min, max);\n    }\n    static polygon(rect) {\n        return Rectangle.corners(rect);\n    }\n    static quadrants(rect, center) {\n        let corners = Rectangle.corners(rect);\n        let _center = (center != undefined) ? new Pt(center) : Rectangle.center(rect);\n        return corners.map((c) => new Group(c, _center).boundingBox());\n    }\n    static halves(rect, ratio = 0.5, asRows = false) {\n        let min = rect[0].$min(rect[1]);\n        let max = rect[0].$max(rect[1]);\n        let mid = (asRows) ? Num.lerp(min[1], max[1], ratio) : Num.lerp(min[0], max[0], ratio);\n        return (asRows)\n            ? [new Group(min, new Pt(max[0], mid)), new Group(new Pt(min[0], mid), max)]\n            : [new Group(min, new Pt(mid, max[1])), new Group(new Pt(mid, min[1]), max)];\n    }\n    static withinBound(rect, pt) {\n        return Geom.withinBound(pt, rect[0], rect[1]);\n    }\n    static hasIntersectRect2D(rect1, rect2, resetBoundingBox = false) {\n        if (resetBoundingBox) {\n            rect1 = Geom.boundingBox(rect1);\n            rect2 = Geom.boundingBox(rect2);\n        }\n        if (rect1[0][0] > rect2[1][0] || rect2[0][0] > rect1[1][0])\n            return false;\n        if (rect1[0][1] > rect2[1][1] || rect2[0][1] > rect1[1][1])\n            return false;\n        return true;\n    }\n    static intersectRect2D(rect1, rect2) {\n        if (!Rectangle.hasIntersectRect2D(rect1, rect2))\n            return new Group();\n        return Line.intersectLines2D(Rectangle.sides(rect1), Rectangle.sides(rect2));\n    }\n}\nexport class Circle {\n    static fromRect(pts, enclose = false) {\n        let r = 0;\n        let min = r = Rectangle.size(pts).minValue().value / 2;\n        if (enclose) {\n            let max = Rectangle.size(pts).maxValue().value / 2;\n            r = Math.sqrt(min * min + max * max);\n        }\n        else {\n            r = min;\n        }\n        return new Group(Rectangle.center(pts), new Pt(r, r));\n    }\n    static fromCenter(pt, radius) {\n        return new Group(new Pt(pt), new Pt(radius, radius));\n    }\n    static withinBound(pts, pt, threshold = 0) {\n        let d = pts[0].$subtract(pt);\n        return d.dot(d) + threshold < pts[1].x * pts[1].x;\n    }\n    static intersectRay2D(pts, ray) {\n        let d = ray[0].$subtract(ray[1]);\n        let f = pts[0].$subtract(ray[0]);\n        let a = d.dot(d);\n        let b = f.dot(d);\n        let c = f.dot(f) - pts[1].x * pts[1].x;\n        let p = b / a;\n        let q = c / a;\n        let disc = p * p - q;\n        if (disc < 0) {\n            return new Group();\n        }\n        else {\n            let discSqrt = Math.sqrt(disc);\n            let t1 = -p + discSqrt;\n            let p1 = ray[0].$subtract(d.$multiply(t1));\n            if (disc === 0)\n                return new Group(p1);\n            let t2 = -p - discSqrt;\n            let p2 = ray[0].$subtract(d.$multiply(t2));\n            return new Group(p1, p2);\n        }\n    }\n    static intersectLine2D(pts, line) {\n        let ps = Circle.intersectRay2D(pts, line);\n        let g = new Group();\n        if (ps.length > 0) {\n            for (let i = 0, len = ps.length; i < len; i++) {\n                if (Rectangle.withinBound(line, ps[i]))\n                    g.push(ps[i]);\n            }\n        }\n        return g;\n    }\n    static intersectCircle2D(pts, circle) {\n        let dv = circle[0].$subtract(pts[0]);\n        let dr2 = dv.magnitudeSq();\n        let dr = Math.sqrt(dr2);\n        let ar = pts[1].x;\n        let br = circle[1].x;\n        let ar2 = ar * ar;\n        let br2 = br * br;\n        if (dr > ar + br) {\n            return new Group();\n        }\n        else if (dr < Math.abs(ar - br)) {\n            return new Group(pts[0].clone());\n        }\n        else {\n            let a = (ar2 - br2 + dr2) / (2 * dr);\n            let h = Math.sqrt(ar2 - a * a);\n            let p = dv.$multiply(a / dr).add(pts[0]);\n            return new Group(new Pt(p.x + h * dv.y / dr, p.y - h * dv.x / dr), new Pt(p.x - h * dv.y / dr, p.y + h * dv.x / dr));\n        }\n    }\n    static intersectRect2D(pts, rect) {\n        let sides = Rectangle.sides(rect);\n        let g = [];\n        for (let i = 0, len = sides.length; i < len; i++) {\n            let ps = Circle.intersectLine2D(pts, sides[i]);\n            if (ps.length > 0)\n                g.push(ps);\n        }\n        return Util.flatten(g);\n    }\n    static toRect(pts, within = false) {\n        let r = pts[1][0];\n        if (within) {\n            let half = Math.sqrt(r * r) / 2;\n            return new Group(pts[0].$subtract(half), pts[0].$add(half));\n        }\n        else {\n            return new Group(pts[0].$subtract(r), pts[0].$add(r));\n        }\n    }\n    static toTriangle(pts, within = true) {\n        if (within) {\n            let ang = -Math.PI / 2;\n            let inc = Math.PI * 2 / 3;\n            let g = new Group();\n            for (let i = 0; i < 3; i++) {\n                g.push(pts[0].clone().toAngle(ang, pts[1][0], true));\n                ang += inc;\n            }\n            return g;\n        }\n        else {\n            return Triangle.fromCenter(pts[0], pts[1][0]);\n        }\n    }\n}\nexport class Triangle {\n    static fromRect(rect) {\n        let top = rect[0].$add(rect[1]).divide(2);\n        top.y = rect[0][1];\n        let left = rect[1].clone();\n        left.x = rect[0][0];\n        return new Group(top, rect[1].clone(), left);\n    }\n    static fromCircle(circle) {\n        return Circle.toTriangle(circle, true);\n    }\n    static fromCenter(pt, size) {\n        return Triangle.fromCircle(Circle.fromCenter(pt, size));\n    }\n    static medial(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        return Polygon.midpoints(pts, true);\n    }\n    static oppositeSide(pts, index) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (index === 0) {\n            return Group.fromPtArray([pts[1], pts[2]]);\n        }\n        else if (index === 1) {\n            return Group.fromPtArray([pts[0], pts[2]]);\n        }\n        else {\n            return Group.fromPtArray([pts[0], pts[1]]);\n        }\n    }\n    static altitude(pts, index) {\n        let opp = Triangle.oppositeSide(pts, index);\n        if (opp.length > 1) {\n            return new Group(pts[index], Line.perpendicularFromPt(opp, pts[index]));\n        }\n        else {\n            return new Group();\n        }\n    }\n    static orthocenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Triangle.altitude(pts, 0);\n        let b = Triangle.altitude(pts, 1);\n        return Line.intersectRay2D(a, b);\n    }\n    static incenter(pts) {\n        if (pts.length < 3)\n            return _errorLength(undefined, 3);\n        let a = Polygon.bisector(pts, 0).add(pts[0]);\n        let b = Polygon.bisector(pts, 1).add(pts[1]);\n        return Line.intersectRay2D(new Group(pts[0], a), new Group(pts[1], b));\n    }\n    static incircle(pts, center) {\n        let c = (center) ? center : Triangle.incenter(pts);\n        let area = Polygon.area(pts);\n        let perim = Polygon.perimeter(pts, true);\n        let r = 2 * area / perim.total;\n        return Circle.fromCenter(c, r);\n    }\n    static circumcenter(pts) {\n        let md = Triangle.medial(pts);\n        let a = [md[0], Geom.perpendicular(pts[0].$subtract(md[0])).p1.$add(md[0])];\n        let b = [md[1], Geom.perpendicular(pts[1].$subtract(md[1])).p1.$add(md[1])];\n        return Line.intersectRay2D(a, b);\n    }\n    static circumcircle(pts, center) {\n        let c = (center) ? center : Triangle.circumcenter(pts);\n        let r = pts[0].$subtract(c).magnitude();\n        return Circle.fromCenter(c, r);\n    }\n}\nexport class Polygon {\n    static centroid(pts) {\n        return Geom.centroid(pts);\n    }\n    static rectangle(center, widthOrSize, height) {\n        return Rectangle.corners(Rectangle.fromCenter(center, widthOrSize, height));\n    }\n    static fromCenter(center, radius, sides) {\n        let g = new Group();\n        for (let i = 0; i < sides; i++) {\n            let ang = Math.PI * 2 * i / sides;\n            g.push(new Pt(Math.cos(ang) * radius, Math.sin(ang) * radius).add(center));\n        }\n        return g;\n    }\n    static lineAt(pts, idx) {\n        if (idx < 0 || idx >= pts.length)\n            throw new Error(\"index out of the Polygon's range\");\n        return new Group(pts[idx], (idx === pts.length - 1) ? pts[0] : pts[idx + 1]);\n    }\n    static lines(pts, closePath = true) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sp = Util.split(pts, 2, 1);\n        if (closePath)\n            sp.push(new Group(pts[pts.length - 1], pts[0]));\n        return sp.map((g) => g);\n    }\n    static midpoints(pts, closePath = false, t = 0.5) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let sides = Polygon.lines(pts, closePath);\n        let mids = sides.map((s) => Geom.interpolate(s[0], s[1], t));\n        return mids;\n    }\n    static adjacentSides(pts, index, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        if (index < 0 || index >= pts.length)\n            return _errorOutofBound(new Group(), index);\n        let gs = [];\n        let left = index - 1;\n        if (closePath && left < 0)\n            left = pts.length - 1;\n        if (left >= 0)\n            gs.push(new Group(pts[index], pts[left]));\n        let right = index + 1;\n        if (closePath && right > pts.length - 1)\n            right = 0;\n        if (right <= pts.length - 1)\n            gs.push(new Group(pts[index], pts[right]));\n        return gs;\n    }\n    static bisector(pts, index) {\n        let sides = Polygon.adjacentSides(pts, index, true);\n        if (sides.length >= 2) {\n            let a = sides[0][1].$subtract(sides[0][0]).unit();\n            let b = sides[1][1].$subtract(sides[1][0]).unit();\n            return a.add(b).divide(2);\n        }\n        else {\n            return undefined;\n        }\n    }\n    static perimeter(pts, closePath = false) {\n        if (pts.length < 2)\n            return _errorLength(new Group(), 2);\n        let lines = Polygon.lines(pts, closePath);\n        let mag = 0;\n        let p = Pt.make(lines.length, 0);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            let m = Line.magnitude(lines[i]);\n            mag += m;\n            p[i] = m;\n        }\n        return {\n            total: mag,\n            segments: p\n        };\n    }\n    static area(pts) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        let det = (a, b) => a[0] * b[1] - a[1] * b[0];\n        let area = 0;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i < pts.length - 1) {\n                area += det(pts[i], pts[i + 1]);\n            }\n            else {\n                area += det(pts[i], pts[0]);\n            }\n        }\n        return Math.abs(area / 2);\n    }\n    static convexHull(pts, sorted = false) {\n        if (pts.length < 3)\n            return _errorLength(new Group(), 3);\n        if (!sorted) {\n            pts = pts.slice();\n            pts.sort((a, b) => a[0] - b[0]);\n        }\n        let left = (a, b, c) => {\n            return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]) > 0;\n        };\n        let dq = [];\n        let bot = pts.length - 2;\n        let top = bot + 3;\n        dq[bot] = pts[2];\n        dq[top] = pts[2];\n        if (left(pts[0], pts[1], pts[2])) {\n            dq[bot + 1] = pts[0];\n            dq[bot + 2] = pts[1];\n        }\n        else {\n            dq[bot + 1] = pts[1];\n            dq[bot + 2] = pts[0];\n        }\n        for (let i = 3, len = pts.length; i < len; i++) {\n            let pt = pts[i];\n            if (left(dq[bot], dq[bot + 1], pt) && left(dq[top - 1], dq[top], pt)) {\n                continue;\n            }\n            while (!left(dq[bot], dq[bot + 1], pt)) {\n                bot += 1;\n            }\n            bot -= 1;\n            dq[bot] = pt;\n            while (!left(dq[top - 1], dq[top], pt)) {\n                top -= 1;\n            }\n            top += 1;\n            dq[top] = pt;\n        }\n        let hull = new Group();\n        for (let h = 0; h < (top - bot); h++) {\n            hull.push(dq[bot + h]);\n        }\n        return hull;\n    }\n    static network(pts, originIndex = 0) {\n        let g = [];\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (i != originIndex)\n                g.push(new Group(pts[originIndex], pts[i]));\n        }\n        return g;\n    }\n    static nearestPt(pts, pt) {\n        let _near = Number.MAX_VALUE;\n        let _item = -1;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let d = pts[i].$subtract(pt).magnitudeSq();\n            if (d < _near) {\n                _near = d;\n                _item = i;\n            }\n        }\n        return _item;\n    }\n    static projectAxis(poly, unitAxis) {\n        let dot = unitAxis.dot(poly[0]);\n        let d = new Pt(dot, dot);\n        for (let n = 1, len = poly.length; n < len; n++) {\n            dot = unitAxis.dot(poly[n]);\n            d = new Pt(Math.min(dot, d[0]), Math.max(dot, d[1]));\n        }\n        return d;\n    }\n    static _axisOverlap(poly1, poly2, unitAxis) {\n        let pa = Polygon.projectAxis(poly1, unitAxis);\n        let pb = Polygon.projectAxis(poly2, unitAxis);\n        return (pa[0] < pb[0]) ? pb[0] - pa[1] : pa[0] - pb[1];\n    }\n    static hasIntersectPoint(poly, pt) {\n        let c = false;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let ln = Polygon.lineAt(poly, i);\n            if (((ln[0][1] > pt[1]) != (ln[1][1] > pt[1])) &&\n                (pt[0] < (ln[1][0] - ln[0][0]) * (pt[1] - ln[0][1]) / (ln[1][1] - ln[0][1]) + ln[0][0])) {\n                c = !c;\n            }\n        }\n        return c;\n    }\n    static hasIntersectCircle(poly, circle) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: null,\n            edge: null,\n            vertex: null,\n        };\n        let c = circle[0];\n        let r = circle[1][0];\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = poly.length; i < len; i++) {\n            let edge = Polygon.lineAt(poly, i);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let poly2 = new Group(c.$add(axis.$multiply(r)), c.$subtract(axis.$multiply(r)));\n            let dist = Polygon._axisOverlap(poly, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                let check = Rectangle.withinBound(edge, Line.perpendicularFromPt(edge, c)) || Circle.intersectLine2D(circle, edge).length > 0;\n                if (check) {\n                    info.edge = edge;\n                    info.normal = axis;\n                    minDist = Math.abs(dist);\n                    info.which = i;\n                }\n            }\n        }\n        if (!info.edge)\n            return null;\n        let dir = c.$subtract(Polygon.centroid(poly)).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        info.dist = minDist;\n        info.vertex = c;\n        return info;\n    }\n    static hasIntersectPolygon(poly1, poly2) {\n        let info = {\n            which: -1,\n            dist: 0,\n            normal: new Pt(),\n            edge: new Group(),\n            vertex: new Pt()\n        };\n        let minDist = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, plen = (poly1.length + poly2.length); i < plen; i++) {\n            let edge = (i < poly1.length) ? Polygon.lineAt(poly1, i) : Polygon.lineAt(poly2, i - poly1.length);\n            let axis = new Pt(edge[0].y - edge[1].y, edge[1].x - edge[0].x).unit();\n            let dist = Polygon._axisOverlap(poly1, poly2, axis);\n            if (dist > 0) {\n                return null;\n            }\n            else if (Math.abs(dist) < minDist) {\n                info.edge = edge;\n                info.normal = axis;\n                minDist = Math.abs(dist);\n                info.which = (i < poly1.length) ? 0 : 1;\n            }\n        }\n        info.dist = minDist;\n        let b1 = (info.which === 0) ? poly2 : poly1;\n        let b2 = (info.which === 0) ? poly1 : poly2;\n        let c1 = Polygon.centroid(b1);\n        let c2 = Polygon.centroid(b2);\n        let dir = c1.$subtract(c2).dot(info.normal);\n        if (dir < 0)\n            info.normal.multiply(-1);\n        let smallest = Number.MAX_SAFE_INTEGER;\n        for (let i = 0, len = b1.length; i < len; i++) {\n            let d = info.normal.dot(b1[i].$subtract(c2));\n            if (d < smallest) {\n                smallest = d;\n                info.vertex = b1[i];\n            }\n        }\n        return info;\n    }\n    static intersectPolygon2D(poly1, poly2) {\n        let lp = Polygon.lines(poly1);\n        let g = [];\n        for (let i = 0, len = lp.length; i < len; i++) {\n            let ins = Line.intersectPolygon2D(lp[i], poly2, false);\n            if (ins)\n                g.push(ins);\n        }\n        return Util.flatten(g, true);\n    }\n    static toRects(polys) {\n        let boxes = polys.map((g) => Geom.boundingBox(g));\n        let merged = Util.flatten(boxes, false);\n        boxes.unshift(Geom.boundingBox(merged));\n        return boxes;\n    }\n}\nexport class Curve {\n    static getSteps(steps) {\n        let ts = new Group();\n        for (let i = 0; i <= steps; i++) {\n            let t = i / steps;\n            ts.push(new Pt(t * t * t, t * t, t, 1));\n        }\n        return ts;\n    }\n    static controlPoints(pts, index = 0, copyStart = false) {\n        if (index > pts.length - 1)\n            return new Group();\n        let _index = (i) => (i < pts.length - 1) ? i : pts.length - 1;\n        let p0 = pts[index];\n        index = (copyStart) ? index : index + 1;\n        return new Group(p0, pts[_index(index++)], pts[_index(index++)], pts[_index(index++)]);\n    }\n    static _calcPt(ctrls, params) {\n        let x = ctrls.reduce((a, c, i) => a + c.x * params[i], 0);\n        let y = ctrls.reduce((a, c, i) => a + c.y * params[i], 0);\n        if (ctrls[0].length > 2) {\n            let z = ctrls.reduce((a, c, i) => a + c.z * params[i], 0);\n            return new Pt(x, y, z);\n        }\n        return new Pt(x, y);\n    }\n    static catmullRom(pts, steps = 10) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.catmullRomStep(ts[i], c));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.catmullRomStep(ts[i], cp));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static catmullRomStep(step, ctrls) {\n        let m = new Group(new Pt(-0.5, 1, -0.5, 0), new Pt(1.5, -2.5, 0, 1), new Pt(-1.5, 2, 0.5, 0), new Pt(0.5, -0.5, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static cardinal(pts, steps = 10, tension = 0.5) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let c = Curve.controlPoints(pts, 0, true);\n        for (let i = 0; i <= steps; i++) {\n            ps.push(Curve.cardinalStep(ts[i], c, tension));\n        }\n        let k = 0;\n        while (k < pts.length - 2) {\n            let cp = Curve.controlPoints(pts, k);\n            if (cp.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.cardinalStep(ts[i], cp, tension));\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static cardinalStep(step, ctrls, tension = 0.5) {\n        let m = new Group(new Pt(-1, 2, -1, 0), new Pt(-1, 1, 0, 0), new Pt(1, -2, 1, 0), new Pt(1, -1, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n    static bezier(pts, steps = 10) {\n        if (pts.length < 4)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                for (let i = 0; i <= steps; i++) {\n                    ps.push(Curve.bezierStep(ts[i], c));\n                }\n                k += 3;\n            }\n        }\n        return ps;\n    }\n    static bezierStep(step, ctrls) {\n        let m = new Group(new Pt(-1, 3, -3, 1), new Pt(3, -6, 3, 0), new Pt(-3, 3, 0, 0), new Pt(1, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bspline(pts, steps = 10, tension = 1) {\n        if (pts.length < 2)\n            return new Group();\n        let ps = new Group();\n        let ts = Curve.getSteps(steps);\n        let k = 0;\n        while (k < pts.length - 3) {\n            let c = Curve.controlPoints(pts, k);\n            if (c.length > 0) {\n                if (tension !== 1) {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineTensionStep(ts[i], c, tension));\n                    }\n                }\n                else {\n                    for (let i = 0; i <= steps; i++) {\n                        ps.push(Curve.bsplineStep(ts[i], c));\n                    }\n                }\n                k++;\n            }\n        }\n        return ps;\n    }\n    static bsplineStep(step, ctrls) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(0.5, -1, 0, 0.6666666666666666), new Pt(-0.5, 0.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        return Curve._calcPt(ctrls, Mat.multiply([step], m, true)[0]);\n    }\n    static bsplineTensionStep(step, ctrls, tension = 1) {\n        let m = new Group(new Pt(-0.16666666666666666, 0.5, -0.5, 0.16666666666666666), new Pt(-1.5, 2, 0, -0.3333333333333333), new Pt(1.5, -2.5, 0.5, 0.16666666666666666), new Pt(0.16666666666666666, 0, 0, 0));\n        let h = Mat.multiply([step], m, true)[0].multiply(tension);\n        let h2 = (2 * step[0] - 3 * step[1] + 1);\n        let h3 = -2 * step[0] + 3 * step[1];\n        let pt = Curve._calcPt(ctrls, h);\n        pt.x += h2 * ctrls[1].x + h3 * ctrls[2].x;\n        pt.y += h2 * ctrls[1].y + h3 * ctrls[2].y;\n        if (pt.length > 2)\n            pt.z += h2 * ctrls[1].z + h3 * ctrls[2].z;\n        return pt;\n    }\n}\n//# sourceMappingURL=Op.js.map","import { Const } from \"./Util\";\nimport { Curve } from \"./Op\";\nimport { Pt, Group } from \"./Pt\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport class Num {\n    static equals(a, b, threshold = 0.00001) {\n        return Math.abs(a - b) < threshold;\n    }\n    static lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n    static clamp(val, min, max) {\n        return Math.max(min, Math.min(max, val));\n    }\n    static boundValue(val, min, max) {\n        let len = Math.abs(max - min);\n        let a = val % len;\n        if (a > max)\n            a -= len;\n        else if (a < min)\n            a += len;\n        return a;\n    }\n    static within(p, a, b) {\n        return p >= Math.min(a, b) && p <= Math.max(a, b);\n    }\n    static randomRange(a, b = 0) {\n        let r = (a > b) ? (a - b) : (b - a);\n        return a + Math.random() * r;\n    }\n    static normalizeValue(n, a, b) {\n        let min = Math.min(a, b);\n        let max = Math.max(a, b);\n        return (n - min) / (max - min);\n    }\n    static sum(pts) {\n        let c = new Pt(pts[0]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            Vec.add(c, pts[i]);\n        }\n        return c;\n    }\n    static average(pts) {\n        return Num.sum(pts).divide(pts.length);\n    }\n    static cycle(t) {\n        return (Math.sin(Math.PI * 2 * t) + 1) / 2;\n    }\n    static mapToRange(n, currA, currB, targetA, targetB) {\n        if (currA == currB)\n            throw new Error(\"[currMin, currMax] must define a range that is not zero\");\n        let min = Math.min(targetA, targetB);\n        let max = Math.max(targetA, targetB);\n        return Num.normalizeValue(n, currA, currB) * (max - min) + min;\n    }\n}\nexport class Geom {\n    static boundAngle(angle) {\n        return Num.boundValue(angle, 0, 360);\n    }\n    static boundRadian(radian) {\n        return Num.boundValue(radian, 0, Const.two_pi);\n    }\n    static toRadian(angle) {\n        return angle * Const.deg_to_rad;\n    }\n    static toDegree(radian) {\n        return radian * Const.rad_to_deg;\n    }\n    static boundingBox(pts) {\n        let minPt = pts.reduce((a, p) => a.$min(p));\n        let maxPt = pts.reduce((a, p) => a.$max(p));\n        return new Group(minPt, maxPt);\n    }\n    static centroid(pts) {\n        return Num.average(pts);\n    }\n    static anchor(pts, ptOrIndex = 0, direction = \"to\") {\n        let method = (direction == \"to\") ? \"subtract\" : \"add\";\n        for (let i = 0, len = pts.length; i < len; i++) {\n            if (typeof ptOrIndex == \"number\") {\n                if (ptOrIndex !== i)\n                    pts[i][method](pts[ptOrIndex]);\n            }\n            else {\n                pts[i][method](ptOrIndex);\n            }\n        }\n    }\n    static interpolate(a, b, t = 0.5) {\n        let len = Math.min(a.length, b.length);\n        let d = Pt.make(len);\n        for (let i = 0; i < len; i++) {\n            d[i] = a[i] * (1 - t) + b[i] * t;\n        }\n        return d;\n    }\n    static perpendicular(pt, axis = Const.xy) {\n        let y = axis[1];\n        let x = axis[0];\n        let p = new Pt(pt);\n        let pa = new Pt(p);\n        pa[x] = -p[y];\n        pa[y] = p[x];\n        let pb = new Pt(p);\n        pb[x] = p[y];\n        pb[y] = -p[x];\n        return new Group(pa, pb);\n    }\n    static isPerpendicular(p1, p2) {\n        return new Pt(p1).dot(p2) === 0;\n    }\n    static withinBound(pt, boundPt1, boundPt2) {\n        for (let i = 0, len = Math.min(pt.length, boundPt1.length, boundPt2.length); i < len; i++) {\n            if (!Num.within(pt[i], boundPt1[i], boundPt2[i]))\n                return false;\n        }\n        return true;\n    }\n    static sortEdges(pts) {\n        let bounds = Geom.boundingBox(pts);\n        let center = bounds[1].add(bounds[0]).divide(2);\n        let fn = (a, b) => {\n            if (a.length < 2 || b.length < 2)\n                throw new Error(\"Pt dimension cannot be less than 2\");\n            let da = a.$subtract(center);\n            let db = b.$subtract(center);\n            if (da[0] >= 0 && db[0] < 0)\n                return 1;\n            if (da[0] < 0 && db[0] >= 0)\n                return -1;\n            if (da[0] == 0 && db[0] == 0) {\n                if (da[1] >= 0 || db[1] >= 0)\n                    return (da[1] > db[1]) ? 1 : -1;\n                return (db[1] > da[1]) ? 1 : -1;\n            }\n            let det = da.$cross2D(db);\n            if (det < 0)\n                return 1;\n            if (det > 0)\n                return -1;\n            return (da[0] * da[0] + da[1] * da[1] > db[0] * db[0] + db[1] * db[1]) ? 1 : -1;\n        };\n        return pts.sort(fn);\n    }\n    static scale(ps, scale, anchor) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let scs = (typeof scale == \"number\") ? Pt.make(pts[0].length, scale) : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = pts[i];\n            for (let k = 0, lenP = p.length; k < lenP; k++) {\n                p[k] = (anchor && anchor[k]) ? anchor[k] + (p[k] - anchor[k]) * scs[k] : p[k] * scs[k];\n            }\n        }\n        return Geom;\n    }\n    static rotate2D(ps, angle, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let fn = (anchor) ? Mat.rotateAt2DMatrix : Mat.rotate2DMatrix;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(cos, sin, anchor)));\n        }\n        return Geom;\n    }\n    static shear2D(ps, scale, anchor, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let s = (typeof scale == \"number\") ? [scale, scale] : scale;\n        if (!anchor)\n            anchor = Pt.make(pts[0].length, 0);\n        let fn = (anchor) ? Mat.shearAt2DMatrix : Mat.shear2DMatrix;\n        let tanx = Math.tan(s[0]);\n        let tany = Math.tan(s[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, fn(tanx, tany, anchor)));\n        }\n        return Geom;\n    }\n    static reflect2D(ps, line, axis) {\n        let pts = (!Array.isArray(ps)) ? [ps] : ps;\n        let mat = Mat.reflectAt2DMatrix(line[0], line[1]);\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let p = (axis) ? pts[i].$take(axis) : pts[i];\n            p.to(Mat.transform2D(p, mat));\n        }\n        return Geom;\n    }\n    static cosTable() {\n        let cos = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            cos[i] = Math.cos(i * Math.PI / 180);\n        let find = (rad) => cos[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: cos, cos: find };\n    }\n    static sinTable() {\n        let sin = new Float64Array(360);\n        for (let i = 0; i < 360; i++)\n            sin[i] = Math.sin(i * Math.PI / 180);\n        let find = (rad) => sin[Math.floor(Geom.boundAngle(Geom.toDegree(rad)))];\n        return { table: sin, sin: find };\n    }\n}\nexport class Shaping {\n    static linear(t, c = 1) {\n        return c * t;\n    }\n    static quadraticIn(t, c = 1) {\n        return c * t * t;\n    }\n    static quadraticOut(t, c = 1) {\n        return -c * t * (t - 2);\n    }\n    static quadraticInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * t * t * 4 : -c / 2 * ((dt - 1) * (dt - 3) - 1);\n    }\n    static cubicIn(t, c = 1) {\n        return c * t * t * t;\n    }\n    static cubicOut(t, c = 1) {\n        let dt = t - 1;\n        return c * (dt * dt * dt + 1);\n    }\n    static cubicInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? c / 2 * dt * dt * dt : c / 2 * ((dt - 2) * (dt - 2) * (dt - 2) + 2);\n    }\n    static exponentialIn(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, 1 / p);\n    }\n    static exponentialOut(t, c = 1, p = 0.25) {\n        return c * Math.pow(t, p);\n    }\n    static sineIn(t, c = 1) {\n        return -c * Math.cos(t * Const.half_pi) + c;\n    }\n    static sineOut(t, c = 1) {\n        return c * Math.sin(t * Const.half_pi);\n    }\n    static sineInOut(t, c = 1) {\n        return -c / 2 * (Math.cos(Math.PI * t) - 1);\n    }\n    static cosineApprox(t, c = 1) {\n        let t2 = t * t;\n        let t4 = t2 * t2;\n        let t6 = t4 * t2;\n        return c * (4 * t6 / 9 - 17 * t4 / 9 + 22 * t2 / 9);\n    }\n    static circularIn(t, c = 1) {\n        return -c * (Math.sqrt(1 - t * t) - 1);\n    }\n    static circularOut(t, c = 1) {\n        let dt = t - 1;\n        return c * Math.sqrt(1 - dt * dt);\n    }\n    static circularInOut(t, c = 1) {\n        let dt = t * 2;\n        return (t < 0.5) ? -c / 2 * (Math.sqrt(1 - dt * dt) - 1) : c / 2 * (Math.sqrt(1 - (dt - 2) * (dt - 2)) + 1);\n    }\n    static elasticIn(t, c = 1, p = 0.7) {\n        let dt = t - 1;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (-Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p));\n    }\n    static elasticOut(t, c = 1, p = 0.7) {\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        return c * (Math.pow(2, -10 * t) * Math.sin((t - s) * Const.two_pi / p)) + c;\n    }\n    static elasticInOut(t, c = 1, p = 0.6) {\n        let dt = t * 2;\n        let s = (p / Const.two_pi) * 1.5707963267948966;\n        if (t < 0.5) {\n            dt -= 1;\n            return c * (-0.5 * (Math.pow(2, 10 * dt) * Math.sin((dt - s) * Const.two_pi / p)));\n        }\n        else {\n            dt -= 1;\n            return c * (0.5 * (Math.pow(2, -10 * dt) * Math.sin((dt - s) * Const.two_pi / p))) + c;\n        }\n    }\n    static bounceIn(t, c = 1) {\n        return c - Shaping.bounceOut((1 - t), c);\n    }\n    static bounceOut(t, c = 1) {\n        if (t < (1 / 2.75)) {\n            return c * (7.5625 * t * t);\n        }\n        else if (t < (2 / 2.75)) {\n            t -= 1.5 / 2.75;\n            return c * (7.5625 * t * t + 0.75);\n        }\n        else if (t < (2.5 / 2.75)) {\n            t -= 2.25 / 2.75;\n            return c * (7.5625 * t * t + 0.9375);\n        }\n        else {\n            t -= 2.625 / 2.75;\n            return c * (7.5625 * t * t + 0.984375);\n        }\n    }\n    static bounceInOut(t, c = 1) {\n        return (t < 0.5) ? Shaping.bounceIn(t * 2, c) / 2 : Shaping.bounceOut(t * 2 - 1, c) / 2 + c / 2;\n    }\n    static sigmoid(t, c = 1, p = 10) {\n        let d = p * (t - 0.5);\n        return c / (1 + Math.exp(-d));\n    }\n    static logSigmoid(t, c = 1, p = 0.7) {\n        p = Math.max(Const.epsilon, Math.min(1 - Const.epsilon, p));\n        p = 1 / (1 - p);\n        let A = 1 / (1 + Math.exp(((t - 0.5) * p * -2)));\n        let B = 1 / (1 + Math.exp(p));\n        let C = 1 / (1 + Math.exp(-p));\n        return c * (A - B) / (C - B);\n    }\n    static seat(t, c = 1, p = 0.5) {\n        if ((t < 0.5)) {\n            return c * (Math.pow(2 * t, 1 - p)) / 2;\n        }\n        else {\n            return c * (1 - (Math.pow(2 * (1 - t), 1 - p)) / 2);\n        }\n    }\n    static quadraticBezier(t, c = 1, p = [0.05, 0.95]) {\n        let a = (typeof p != \"number\") ? p[0] : p;\n        let b = (typeof p != \"number\") ? p[1] : 0.5;\n        let om2a = 1 - 2 * a;\n        if (om2a === 0) {\n            om2a = Const.epsilon;\n        }\n        let d = (Math.sqrt(a * a + om2a * t) - a) / om2a;\n        return c * ((1 - 2 * b) * (d * d) + (2 * b) * d);\n    }\n    static cubicBezier(t, c = 1, p1 = [0.1, 0.7], p2 = [0.9, 0.2]) {\n        let curve = new Group(new Pt(0, 0), new Pt(p1), new Pt(p2), new Pt(1, 1));\n        return c * Curve.bezierStep(new Pt(t * t * t, t * t, t, 1), Curve.controlPoints(curve)).y;\n    }\n    static quadraticTarget(t, c = 1, p1 = [0.2, 0.35]) {\n        let a = Math.min(1 - Const.epsilon, Math.max(Const.epsilon, p1[0]));\n        let b = Math.min(1, Math.max(0, p1[1]));\n        let A = (1 - b) / (1 - a) - (b / a);\n        let B = (A * (a * a) - b) / a;\n        let y = A * (t * t) - B * t;\n        return c * Math.min(1, Math.max(0, y));\n    }\n    static cliff(t, c = 1, p = 0.5) {\n        return (t > p) ? c : 0;\n    }\n    static step(fn, steps, t, c, ...args) {\n        let s = 1 / steps;\n        let tt = Math.floor(t / s) * s;\n        return fn(tt, c, ...args);\n    }\n}\nexport class Range {\n    constructor(g) {\n        this._dims = 0;\n        this._source = Group.fromPtArray(g);\n        this.calc();\n    }\n    get max() { return this._max.clone(); }\n    get min() { return this._min.clone(); }\n    get magnitude() { return this._mag.clone(); }\n    calc() {\n        if (!this._source)\n            return;\n        let dims = this._source[0].length;\n        this._dims = dims;\n        let max = new Pt(dims);\n        let min = new Pt(dims);\n        let mag = new Pt(dims);\n        for (let i = 0; i < dims; i++) {\n            max[i] = Const.min;\n            min[i] = Const.max;\n            mag[i] = 0;\n            let s = this._source.zipSlice(i);\n            for (let k = 0, len = s.length; k < len; k++) {\n                max[i] = Math.max(max[i], s[k]);\n                min[i] = Math.min(min[i], s[k]);\n                mag[i] = max[i] - min[i];\n            }\n        }\n        this._max = max;\n        this._min = min;\n        this._mag = mag;\n        return this;\n    }\n    mapTo(min, max, exclude) {\n        let target = new Group();\n        for (let i = 0, len = this._source.length; i < len; i++) {\n            let g = this._source[i];\n            let n = new Pt(this._dims);\n            for (let k = 0; k < this._dims; k++) {\n                n[k] = (exclude && exclude[k]) ? g[k] : Num.mapToRange(g[k], this._min[k], this._max[k], min, max);\n            }\n            target.push(n);\n        }\n        return target;\n    }\n    append(g, update = true) {\n        if (g[0].length !== this._dims)\n            throw new Error(`Dimensions don't match. ${this._dims} dimensions in Range and ${g[0].length} provided in parameter. `);\n        this._source = this._source.concat(g);\n        if (update)\n            this.calc();\n        return this;\n    }\n    ticks(count) {\n        let g = new Group();\n        for (let i = 0; i <= count; i++) {\n            let p = new Pt(this._dims);\n            for (let k = 0, len = this._max.length; k < len; k++) {\n                p[k] = Num.lerp(this._min[k], this._max[k], i / count);\n            }\n            g.push(p);\n        }\n        return g;\n    }\n}\n//# sourceMappingURL=Num.js.map","import { Util, Const } from \"./Util\";\nimport { Geom, Num } from \"./Num\";\nimport { Vec, Mat } from \"./LinearAlgebra\";\nexport var PtBaseArray = Float32Array;\nexport class Pt extends PtBaseArray {\n    constructor(...args) {\n        if (args.length === 1 && typeof args[0] == \"number\") {\n            super(args[0]);\n        }\n        else {\n            super((args.length > 0) ? Util.getArgs(args) : [0, 0]);\n        }\n    }\n    static make(dimensions, defaultValue = 0, randomize = false) {\n        let p = new PtBaseArray(dimensions);\n        if (defaultValue)\n            p.fill(defaultValue);\n        if (randomize) {\n            for (let i = 0, len = p.length; i < len; i++) {\n                p[i] = p[i] * Math.random();\n            }\n        }\n        return new Pt(p);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get x() { return this[0]; }\n    set x(n) { this[0] = n; }\n    get y() { return this[1]; }\n    set y(n) { this[1] = n; }\n    get z() { return this[2]; }\n    set z(n) { this[2] = n; }\n    get w() { return this[3]; }\n    set w(n) { this[3] = n; }\n    clone() {\n        return new Pt(this);\n    }\n    equals(p, threshold = 0.000001) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            if (Math.abs(this[i] - p[i]) > threshold)\n                return false;\n        }\n        return true;\n    }\n    to(...args) {\n        let p = Util.getArgs(args);\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            this[i] = p[i];\n        }\n        return this;\n    }\n    $to(...args) {\n        return this.clone().to(...args);\n    }\n    toAngle(radian, magnitude, anchorFromPt = false) {\n        let m = (magnitude != undefined) ? magnitude : this.magnitude();\n        let change = [Math.cos(radian) * m, Math.sin(radian) * m];\n        return (anchorFromPt) ? this.add(change) : this.to(change);\n    }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    $take(axis) {\n        let p = [];\n        for (let i = 0, len = axis.length; i < len; i++) {\n            p.push(this[axis[i]] || 0);\n        }\n        return new Pt(p);\n    }\n    $concat(...args) {\n        return new Pt(this.toArray().concat(Util.getArgs(args)));\n    }\n    add(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.add(this, args[0]) : Vec.add(this, Util.getArgs(args));\n        return this;\n    }\n    $add(...args) { return this.clone().add(...args); }\n    subtract(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.subtract(this, args[0]) : Vec.subtract(this, Util.getArgs(args));\n        return this;\n    }\n    $subtract(...args) { return this.clone().subtract(...args); }\n    multiply(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.multiply(this, args[0]) : Vec.multiply(this, Util.getArgs(args));\n        return this;\n    }\n    $multiply(...args) { return this.clone().multiply(...args); }\n    divide(...args) {\n        (args.length === 1 && typeof args[0] == \"number\") ? Vec.divide(this, args[0]) : Vec.divide(this, Util.getArgs(args));\n        return this;\n    }\n    $divide(...args) { return this.clone().divide(...args); }\n    magnitudeSq() { return Vec.dot(this, this); }\n    magnitude() { return Vec.magnitude(this); }\n    unit(magnitude = undefined) {\n        Vec.unit(this, magnitude);\n        return this;\n    }\n    $unit(magnitude = undefined) { return this.clone().unit(magnitude); }\n    dot(...args) { return Vec.dot(this, Util.getArgs(args)); }\n    $cross2D(...args) { return Vec.cross2D(this, Util.getArgs(args)); }\n    $cross(...args) { return Vec.cross(this, Util.getArgs(args)); }\n    $project(...args) {\n        return this.$multiply(this.dot(...args) / this.magnitudeSq());\n    }\n    projectScalar(...args) {\n        return this.dot(...args) / this.magnitude();\n    }\n    abs() {\n        Vec.abs(this);\n        return this;\n    }\n    $abs() {\n        return this.clone().abs();\n    }\n    floor() {\n        Vec.floor(this);\n        return this;\n    }\n    $floor() {\n        return this.clone().floor();\n    }\n    ceil() {\n        Vec.ceil(this);\n        return this;\n    }\n    $ceil() {\n        return this.clone().ceil();\n    }\n    round() {\n        Vec.round(this);\n        return this;\n    }\n    $round() {\n        return this.clone().round();\n    }\n    minValue() {\n        return Vec.min(this);\n    }\n    maxValue() {\n        return Vec.max(this);\n    }\n    $min(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.min(this[i], p[i]);\n        }\n        return m;\n    }\n    $max(...args) {\n        let p = Util.getArgs(args);\n        let m = this.clone();\n        for (let i = 0, len = Math.min(this.length, p.length); i < len; i++) {\n            m[i] = Math.max(this[i], p[i]);\n        }\n        return m;\n    }\n    angle(axis = Const.xy) {\n        return Math.atan2(this[axis[1]], this[axis[0]]);\n    }\n    angleBetween(p, axis = Const.xy) {\n        return Geom.boundRadian(this.angle(axis)) - Geom.boundRadian(p.angle(axis));\n    }\n    scale(scale, anchor) {\n        Geom.scale(this, scale, anchor || Pt.make(this.length, 0));\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        Geom.rotate2D(this, angle, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        Geom.shear2D(this, scale, anchor || Pt.make(this.length, 0), axis);\n        return this;\n    }\n    reflect2D(line, axis) {\n        Geom.reflect2D(this, line, axis);\n        return this;\n    }\n    toString() {\n        return `Pt(${this.join(\", \")})`;\n    }\n    toArray() {\n        return [].slice.call(this);\n    }\n}\nexport class Group extends Array {\n    constructor(...args) {\n        super(...args);\n    }\n    get id() { return this._id; }\n    set id(s) { this._id = s; }\n    get p1() { return this[0]; }\n    get p2() { return this[1]; }\n    get p3() { return this[2]; }\n    get p4() { return this[3]; }\n    get q1() { return this[this.length - 1]; }\n    get q2() { return this[this.length - 2]; }\n    get q3() { return this[this.length - 3]; }\n    get q4() { return this[this.length - 4]; }\n    clone() {\n        let group = new Group();\n        for (let i = 0, len = this.length; i < len; i++) {\n            group.push(this[i].clone());\n        }\n        return group;\n    }\n    static fromArray(list) {\n        let g = new Group();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = (list[i] instanceof Pt) ? list[i] : new Pt(list[i]);\n            g.push(p);\n        }\n        return g;\n    }\n    static fromPtArray(list) {\n        return Group.from(list);\n    }\n    split(chunkSize, stride, loopBack = false) {\n        let sp = Util.split(this, chunkSize, stride, loopBack);\n        return sp;\n    }\n    insert(pts, index = 0) {\n        Group.prototype.splice.apply(this, [index, 0, ...pts]);\n        return this;\n    }\n    remove(index = 0, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        return Group.prototype.splice.apply(this, param);\n    }\n    segments(pts_per_segment = 2, stride = 1, loopBack = false) {\n        return this.split(pts_per_segment, stride, loopBack);\n    }\n    lines() { return this.segments(2, 1); }\n    centroid() {\n        return Geom.centroid(this);\n    }\n    boundingBox() {\n        return Geom.boundingBox(this);\n    }\n    anchorTo(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"to\"); }\n    anchorFrom(ptOrIndex = 0) { Geom.anchor(this, ptOrIndex, \"from\"); }\n    op(fn) {\n        let self = this;\n        return (...params) => {\n            return fn(self, ...params);\n        };\n    }\n    ops(fns) {\n        let _ops = [];\n        for (let i = 0, len = fns.length; i < len; i++) {\n            _ops.push(this.op(fns[i]));\n        }\n        return _ops;\n    }\n    interpolate(t) {\n        t = Num.clamp(t, 0, 1);\n        let chunk = this.length - 1;\n        let tc = 1 / (this.length - 1);\n        let idx = Math.floor(t / tc);\n        return Geom.interpolate(this[idx], this[Math.min(this.length - 1, idx + 1)], (t - idx * tc) * chunk);\n    }\n    moveBy(...args) {\n        return this.add(...args);\n    }\n    moveTo(...args) {\n        let d = new Pt(Util.getArgs(args)).subtract(this[0]);\n        this.moveBy(d);\n        return this;\n    }\n    scale(scale, anchor) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.scale(this[i], scale, anchor || this[0]);\n        }\n        return this;\n    }\n    rotate2D(angle, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.rotate2D(this[i], angle, anchor || this[0], axis);\n        }\n        return this;\n    }\n    shear2D(scale, anchor, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.shear2D(this[i], scale, anchor || this[0], axis);\n        }\n        return this;\n    }\n    reflect2D(line, axis) {\n        for (let i = 0, len = this.length; i < len; i++) {\n            Geom.reflect2D(this[i], line, axis);\n        }\n        return this;\n    }\n    sortByDimension(dim, desc = false) {\n        return this.sort((a, b) => (desc) ? b[dim] - a[dim] : a[dim] - b[dim]);\n    }\n    forEachPt(ptFn, ...args) {\n        if (!this[0][ptFn]) {\n            Util.warn(`${ptFn} is not a function of Pt`);\n            return this;\n        }\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i] = this[i][ptFn](...args);\n        }\n        return this;\n    }\n    add(...args) {\n        return this.forEachPt(\"add\", ...args);\n    }\n    subtract(...args) {\n        return this.forEachPt(\"subtract\", ...args);\n    }\n    multiply(...args) {\n        return this.forEachPt(\"multiply\", ...args);\n    }\n    divide(...args) {\n        return this.forEachPt(\"divide\", ...args);\n    }\n    $matrixAdd(g) {\n        return Mat.add(this, g);\n    }\n    $matrixMultiply(g, transposed = false, elementwise = false) {\n        return Mat.multiply(this, g, transposed, elementwise);\n    }\n    zipSlice(index, defaultValue = false) {\n        return Mat.zipSlice(this, index, defaultValue);\n    }\n    $zip(defaultValue = undefined, useLongest = false) {\n        return Mat.zip(this, defaultValue, useLongest);\n    }\n    toString() {\n        return \"Group[ \" + this.reduce((p, c) => p + c.toString() + \" \", \"\") + \" ]\";\n    }\n}\nexport class Bound extends Group {\n    constructor(...args) {\n        super(...args);\n        this._center = new Pt();\n        this._size = new Pt();\n        this._topLeft = new Pt();\n        this._bottomRight = new Pt();\n        this._inited = false;\n        this.init();\n    }\n    static fromBoundingRect(rect) {\n        let b = new Bound(new Pt(rect.left || 0, rect.top || 0), new Pt(rect.right || 0, rect.bottom || 0));\n        if (rect.width && rect.height)\n            b.size = new Pt(rect.width, rect.height);\n        return b;\n    }\n    static fromGroup(g) {\n        if (g.length < 2)\n            throw new Error(\"Cannot create a Bound from a group that has less than 2 Pt\");\n        return new Bound(g[0], g[g.length - 1]);\n    }\n    init() {\n        if (this.p1) {\n            this._size = this.p1.clone();\n            this._inited = true;\n        }\n        if (this.p1 && this.p2) {\n            let a = this.p1;\n            let b = this.p2;\n            this.topLeft = a.$min(b);\n            this._bottomRight = a.$max(b);\n            this._updateSize();\n            this._inited = true;\n        }\n    }\n    clone() {\n        return new Bound(this._topLeft.clone(), this._bottomRight.clone());\n    }\n    _updateSize() {\n        this._size = this._bottomRight.$subtract(this._topLeft).abs();\n        this._updateCenter();\n    }\n    _updateCenter() {\n        this._center = this._size.$multiply(0.5).add(this._topLeft);\n    }\n    _updatePosFromTop() {\n        this._bottomRight = this._topLeft.$add(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromBottom() {\n        this._topLeft = this._bottomRight.$subtract(this._size);\n        this._updateCenter();\n    }\n    _updatePosFromCenter() {\n        let half = this._size.$multiply(0.5);\n        this._topLeft = this._center.$subtract(half);\n        this._bottomRight = this._center.$add(half);\n    }\n    get size() { return new Pt(this._size); }\n    set size(p) {\n        this._size = new Pt(p);\n        this._updatePosFromTop();\n    }\n    get center() { return new Pt(this._center); }\n    set center(p) {\n        this._center = new Pt(p);\n        this._updatePosFromCenter();\n    }\n    get topLeft() { return new Pt(this._topLeft); }\n    set topLeft(p) {\n        this._topLeft = new Pt(p);\n        this[0] = this._topLeft;\n        this._updateSize();\n    }\n    get bottomRight() { return new Pt(this._bottomRight); }\n    set bottomRight(p) {\n        this._bottomRight = new Pt(p);\n        this[1] = this._bottomRight;\n        this._updateSize();\n    }\n    get width() { return (this._size.length > 0) ? this._size.x : 0; }\n    set width(w) {\n        this._size.x = w;\n        this._updatePosFromTop();\n    }\n    get height() { return (this._size.length > 1) ? this._size.y : 0; }\n    set height(h) {\n        this._size.y = h;\n        this._updatePosFromTop();\n    }\n    get depth() { return (this._size.length > 2) ? this._size.z : 0; }\n    set depth(d) {\n        this._size.z = d;\n        this._updatePosFromTop();\n    }\n    get x() { return this.topLeft.x; }\n    get y() { return this.topLeft.y; }\n    get z() { return this.topLeft.z; }\n    get inited() { return this._inited; }\n    update() {\n        this._topLeft = this[0];\n        this._bottomRight = this[1];\n        this._updateSize();\n        return this;\n    }\n}\n//# sourceMappingURL=Pt.js.map","import { Rectangle, Circle } from \"./Op\";\nexport var UIShape;\n(function (UIShape) {\n    UIShape[UIShape[\"Rectangle\"] = 0] = \"Rectangle\";\n    UIShape[UIShape[\"Circle\"] = 1] = \"Circle\";\n    UIShape[UIShape[\"Polygon\"] = 2] = \"Polygon\";\n    UIShape[UIShape[\"Polyline\"] = 3] = \"Polyline\";\n    UIShape[UIShape[\"Line\"] = 4] = \"Line\";\n})(UIShape || (UIShape = {}));\nexport const UIPointerActions = {\n    up: \"up\", down: \"down\", move: \"move\", drag: \"drag\", drop: \"drop\", over: \"over\", out: \"out\"\n};\nexport class UI {\n    constructor(group, shape, states, id) {\n        this.group = group;\n        this.shape = shape;\n        this._id = id;\n        this._states = states;\n        this._actions = {};\n    }\n    get id() { return this._id; }\n    set id(d) { this._id = d; }\n    state(key) {\n        return this._states[key] || false;\n    }\n    on(key, fn) {\n        this._actions[key] = fn;\n        return this;\n    }\n    off(key) {\n        delete this._actions[key];\n        return this;\n    }\n    listen(key, p) {\n        if (this._actions[key] !== undefined) {\n            if (this._trigger(p)) {\n                this._actions[key](p, this, key);\n                return true;\n            }\n        }\n        return false;\n    }\n    render(fn) {\n        fn(this.group, this._states);\n    }\n    _trigger(p) {\n        let fn = null;\n        if (this.shape === UIShape.Rectangle) {\n            fn = Rectangle.withinBound;\n        }\n        else if (this.shape === UIShape.Circle) {\n            fn = Circle.withinBound;\n        }\n        else if (this.shape === UIShape.Polygon) {\n            fn = Rectangle.withinBound;\n        }\n        else {\n            return false;\n        }\n        return fn(this.group, p);\n    }\n}\nexport class UIButton extends UI {\n    constructor(group, shape, states, id) {\n        super(group, shape, states, id);\n        this._clicks = 0;\n    }\n    get clicks() { return this._clicks; }\n    onClick(fn) {\n        this._clicks++;\n        this.on(UIPointerActions.up, fn);\n    }\n    onHover(over, out) {\n        this.on(UIPointerActions.over, over);\n        this.on(UIPointerActions.out, out);\n    }\n}\n//# sourceMappingURL=UI.js.map","import { Pt, Bound } from \"./Pt\";\nimport { UIPointerActions as UIA } from \"./UI\";\nexport class Space {\n    constructor() {\n        this.id = \"space\";\n        this.bound = new Bound();\n        this._time = { prev: 0, diff: 0, end: -1 };\n        this.players = {};\n        this.playerCount = 0;\n        this._animID = -1;\n        this._pause = false;\n        this._refresh = undefined;\n        this._pointer = new Pt();\n        this._isReady = false;\n        this._playing = false;\n    }\n    refresh(b) {\n        this._refresh = b;\n        return this;\n    }\n    add(p) {\n        let player = (typeof p == \"function\") ? { animate: p } : p;\n        let k = this.playerCount++;\n        let pid = this.id + k;\n        this.players[pid] = player;\n        player.animateID = pid;\n        if (player.resize && this.bound.inited)\n            player.resize(this.bound);\n        if (this._refresh === undefined)\n            this._refresh = true;\n        return this;\n    }\n    remove(player) {\n        delete this.players[player.animateID];\n        return this;\n    }\n    removeAll() {\n        this.players = {};\n        return this;\n    }\n    play(time = 0) {\n        this._animID = requestAnimationFrame(this.play.bind(this));\n        if (this._pause)\n            return this;\n        this._time.diff = time - this._time.prev;\n        this._time.prev = time;\n        try {\n            this.playItems(time);\n        }\n        catch (err) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n            throw err;\n        }\n        return this;\n    }\n    replay() {\n        this._time.end = -1;\n        this.play();\n    }\n    playItems(time) {\n        this._playing = true;\n        if (this._refresh)\n            this.clear();\n        if (this._isReady) {\n            for (let k in this.players) {\n                if (this.players[k].animate)\n                    this.players[k].animate(time, this._time.diff, this);\n            }\n        }\n        if (this._time.end >= 0 && time > this._time.end) {\n            cancelAnimationFrame(this._animID);\n            this._playing = false;\n        }\n    }\n    pause(toggle = false) {\n        this._pause = (toggle) ? !this._pause : true;\n        return this;\n    }\n    resume() {\n        this._pause = false;\n        return this;\n    }\n    stop(t = 0) {\n        this._time.end = t;\n        return this;\n    }\n    playOnce(duration = 5000) {\n        this.play();\n        this.stop(duration);\n        return this;\n    }\n    render(context) {\n        if (this._renderFunc)\n            this._renderFunc(context, this);\n        return this;\n    }\n    set customRendering(f) { this._renderFunc = f; }\n    get customRendering() { return this._renderFunc; }\n    get isPlaying() { return this._playing; }\n    get outerBound() { return this.bound.clone(); }\n    get innerBound() { return new Bound(Pt.make(this.size.length, 0), this.size.clone()); }\n    get size() { return this.bound.size.clone(); }\n    get center() { return this.size.divide(2); }\n    get width() { return this.bound.width; }\n    get height() { return this.bound.height; }\n}\nexport class MultiTouchSpace extends Space {\n    constructor() {\n        super(...arguments);\n        this._pressed = false;\n        this._dragged = false;\n        this._hasMouse = false;\n        this._hasTouch = false;\n    }\n    get pointer() {\n        let p = this._pointer.clone();\n        p.id = this._pointer.id;\n        return p;\n    }\n    bindCanvas(evt, callback) {\n        this._canvas.addEventListener(evt, callback);\n    }\n    unbindCanvas(evt, callback) {\n        this._canvas.removeEventListener(evt, callback);\n    }\n    bindMouse(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.bindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.bindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.bindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.bindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = true;\n        }\n        else {\n            this.unbindCanvas(\"mousedown\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"mouseup\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"mouseover\", this._mouseOver.bind(this));\n            this.unbindCanvas(\"mouseout\", this._mouseOut.bind(this));\n            this.unbindCanvas(\"mousemove\", this._mouseMove.bind(this));\n            this._hasMouse = false;\n        }\n        return this;\n    }\n    bindTouch(_bind = true) {\n        if (_bind) {\n            this.bindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.bindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.bindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.bindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = true;\n        }\n        else {\n            this.unbindCanvas(\"touchstart\", this._mouseDown.bind(this));\n            this.unbindCanvas(\"touchend\", this._mouseUp.bind(this));\n            this.unbindCanvas(\"touchmove\", this._touchMove.bind(this));\n            this.unbindCanvas(\"touchcancel\", this._mouseOut.bind(this));\n            this._hasTouch = false;\n        }\n        return this;\n    }\n    touchesToPoints(evt, which = \"touches\") {\n        if (!evt || !evt[which])\n            return [];\n        let ts = [];\n        for (var i = 0; i < evt[which].length; i++) {\n            let t = evt[which].item(i);\n            ts.push(new Pt(t.pageX - this.bound.topLeft.x, t.pageY - this.bound.topLeft.y));\n        }\n        return ts;\n    }\n    _mouseAction(type, evt) {\n        let px = 0, py = 0;\n        if (evt instanceof MouseEvent) {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    px = evt.pageX - this.outerBound.x;\n                    py = evt.pageY - this.outerBound.y;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        else {\n            for (let k in this.players) {\n                if (this.players.hasOwnProperty(k)) {\n                    let v = this.players[k];\n                    let c = evt.changedTouches && evt.changedTouches.length > 0;\n                    let touch = evt.changedTouches.item(0);\n                    px = (c) ? touch.pageX - this.outerBound.x : 0;\n                    py = (c) ? touch.pageY - this.outerBound.y : 0;\n                    if (v.action)\n                        v.action(type, px, py, evt);\n                }\n            }\n        }\n        if (type) {\n            this._pointer.to(px, py);\n            this._pointer.id = type;\n        }\n    }\n    _mouseDown(evt) {\n        this._mouseAction(UIA.down, evt);\n        this._pressed = true;\n        return false;\n    }\n    _mouseUp(evt) {\n        this._mouseAction(UIA.up, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.down, evt);\n        this._pressed = false;\n        this._dragged = false;\n        return false;\n    }\n    _mouseMove(evt) {\n        this._mouseAction(UIA.move, evt);\n        if (this._pressed) {\n            this._dragged = true;\n            this._mouseAction(UIA.drag, evt);\n        }\n        return false;\n    }\n    _mouseOver(evt) {\n        this._mouseAction(UIA.over, evt);\n        return false;\n    }\n    _mouseOut(evt) {\n        this._mouseAction(UIA.out, evt);\n        if (this._dragged)\n            this._mouseAction(UIA.drop, evt);\n        this._dragged = false;\n        return false;\n    }\n    _touchMove(evt) {\n        this._mouseMove(evt);\n        evt.preventDefault();\n        return false;\n    }\n}\n//# sourceMappingURL=Space.js.map","import { Util } from \"./Util\";\nexport class Form {\n    constructor() {\n        this._ready = false;\n    }\n    get ready() { return this._ready; }\n    static _checkSize(pts, required = 2) {\n        if (pts.length < required) {\n            Util.warn(\"Requires 2 or more Pts in this Group.\");\n            return false;\n        }\n        return true;\n    }\n}\nexport class VisualForm extends Form {\n    constructor() {\n        super(...arguments);\n        this._filled = true;\n        this._stroked = true;\n        this._font = new Font(14, \"sans-serif\");\n    }\n    get filled() { return this._filled; }\n    set filled(b) { this._filled = b; }\n    get stroked() { return this._stroked; }\n    set stroked(b) { this._stroked = b; }\n    get currentFont() { return this._font; }\n    _multiple(groups, shape, ...rest) {\n        if (!groups)\n            return this;\n        for (let i = 0, len = groups.length; i < len; i++) {\n            this[shape](groups[i], ...rest);\n        }\n        return this;\n    }\n    fill(c) {\n        return this;\n    }\n    fillOnly(c) {\n        this.stroke(false);\n        return this.fill(c);\n    }\n    stroke(c, width, linejoin, linecap) {\n        return this;\n    }\n    strokeOnly(c, width, linejoin, linecap) {\n        this.fill(false);\n        return this.stroke(c, width, linejoin, linecap);\n    }\n    points(pts, radius, shape) {\n        if (!pts)\n            return;\n        for (let i = 0, len = pts.length; i < len; i++) {\n            this.point(pts[i], radius, shape);\n        }\n        return this;\n    }\n    circles(groups) {\n        return this._multiple(groups, \"circle\");\n    }\n    squares(groups) {\n        return this._multiple(groups, \"square\");\n    }\n    lines(groups) {\n        return this._multiple(groups, \"line\");\n    }\n    polygons(groups) {\n        return this._multiple(groups, \"polygon\");\n    }\n    rects(groups) {\n        return this._multiple(groups, \"rect\");\n    }\n}\nexport class Font {\n    constructor(size = 12, face = \"sans-serif\", weight = \"\", style = \"\", lineHeight = 1.5) {\n        this.size = size;\n        this.face = face;\n        this.style = style;\n        this.weight = weight;\n        this.lineHeight = lineHeight;\n    }\n    get value() { return `${this.style} ${this.weight} ${this.size}px/${this.lineHeight} ${this.face}`; }\n    toString() { return this.value; }\n}\n//# sourceMappingURL=Form.js.map","import { Pt } from \"./Pt\";\nexport class Typography {\n    static textWidthEstimator(fn, samples = [\"M\", \"n\", \".\"], distribution = [0.06, 0.8, 0.14]) {\n        let m = samples.map(fn);\n        let avg = new Pt(distribution).dot(m);\n        return (str) => str.length * avg;\n    }\n    static truncate(fn, str, width, tail = \"\") {\n        let trim = Math.floor(str.length * Math.min(1, width / fn(str)));\n        if (trim < str.length) {\n            trim = Math.max(0, trim - tail.length);\n            return [str.substr(0, trim) + tail, trim];\n        }\n        else {\n            return [str, str.length];\n        }\n    }\n    static fontSizeToBox(box, ratio = 1, byHeight = true) {\n        let i = byHeight ? 1 : 0;\n        let h = (box[1][i] - box[0][i]);\n        let f = ratio * h;\n        return function (b) {\n            let nh = (b[1][i] - b[0][i]) / h;\n            return f * nh;\n        };\n    }\n    static fontSizeToThreshold(threshold, direction = 0) {\n        return function (defaultSize, val) {\n            let d = defaultSize * val / threshold;\n            if (direction < 0)\n                return Math.min(d, defaultSize);\n            if (direction > 0)\n                return Math.max(d, defaultSize);\n            return d;\n        };\n    }\n}\n//# sourceMappingURL=Typography.js.map","import { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Pt, Group, Bound } from \"./Pt\";\nimport { Const } from \"./Util\";\nimport { Typography as Typo } from \"./Typography\";\nimport { Rectangle } from './Op';\nexport class CanvasSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this._pixelScale = 1;\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._offscreen = false;\n        this._initialResize = false;\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pt\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            let id = elem;\n            id = (elem[0] === \"#\" || elem[0] === \".\") ? elem : \"#\" + elem;\n            _selector = document.querySelector(id);\n            _existed = true;\n            this.id = id.substr(1);\n        }\n        if (!_selector) {\n            this._container = this._createElement(\"div\", this.id + \"_container\");\n            this._canvas = this._createElement(\"canvas\", this.id);\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else if (_selector.nodeName.toLowerCase() != \"canvas\") {\n            this._container = _selector;\n            this._canvas = this._createElement(\"canvas\", this.id + \"_canvas\");\n            this._container.appendChild(this._canvas);\n            this._initialResize = true;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n            this._autoResize = false;\n        }\n        setTimeout(this._ready.bind(this, callback), 100);\n        this._ctx = this._canvas.getContext('2d');\n    }\n    _createElement(elem = \"div\", id) {\n        let d = document.createElement(elem);\n        d.setAttribute(\"id\", id);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this._initialResize = false;\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor)\n            this._bgcolor = opt.bgcolor;\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        if (opt.retina !== false) {\n            let r1 = window.devicePixelRatio || 1;\n            let r2 = this._ctx.webkitBackingStorePixelRatio || this._ctx.mozBackingStorePixelRatio || this._ctx.msBackingStorePixelRatio || this._ctx.oBackingStorePixelRatio || this._ctx.backingStorePixelRatio || 1;\n            this._pixelScale = Math.max(1, r1 / r2);\n        }\n        if (opt.offscreen) {\n            this._offscreen = true;\n            this._offCanvas = this._createElement(\"canvas\", this.id + \"_offscreen\");\n            this._offCtx = this._offCanvas.getContext('2d');\n        }\n        else {\n            this._offscreen = false;\n        }\n        return this;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this._canvas.width = this.bound.size.x * this._pixelScale;\n        this._canvas.height = this.bound.size.y * this._pixelScale;\n        this._canvas.style.width = Math.floor(this.bound.size.x) + \"px\";\n        this._canvas.style.height = Math.floor(this.bound.size.y) + \"px\";\n        if (this._offscreen) {\n            this._offCanvas.width = this.bound.size.x * this._pixelScale;\n            this._offCanvas.height = this.bound.size.y * this._pixelScale;\n        }\n        if (this._pixelScale != 1) {\n            this._ctx.scale(this._pixelScale, this._pixelScale);\n            this._ctx.translate(0.5, 0.5);\n            if (this._offscreen) {\n                this._offCtx.scale(this._pixelScale, this._pixelScale);\n                this._offCtx.translate(0.5, 0.5);\n            }\n        }\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        this.render(this._ctx);\n        if (evt && !this.isPlaying)\n            this.playOnce(0);\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = (this._autoResize || this._initialResize) ? this._container.getBoundingClientRect() : this._canvas.getBoundingClientRect();\n        if (b) {\n            let box = Bound.fromBoundingRect(b);\n            box.center = box.center.add(window.pageXOffset, window.pageYOffset);\n            this.resize(box, evt);\n        }\n    }\n    set background(bg) { this._bgcolor = bg; }\n    get background() { return this._bgcolor; }\n    get pixelScale() {\n        return this._pixelScale;\n    }\n    get hasOffscreen() {\n        return this._offscreen;\n    }\n    get offscreenCtx() { return this._offCtx; }\n    get offscreenCanvas() { return this._offCanvas; }\n    getForm() { return new CanvasForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() {\n        return this._isReady;\n    }\n    get ctx() { return this._ctx; }\n    clear(bg) {\n        if (bg)\n            this._bgcolor = bg;\n        let lastColor = this._ctx.fillStyle;\n        if (this._bgcolor && this._bgcolor != \"transparent\") {\n            this._ctx.fillStyle = this._bgcolor;\n            this._ctx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        else {\n            this._ctx.clearRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n        }\n        this._ctx.fillStyle = lastColor;\n        return this;\n    }\n    clearOffscreen(bg) {\n        if (this._offscreen) {\n            if (bg) {\n                this._offCtx.fillStyle = bg;\n                this._offCtx.fillRect(-1, -1, this._canvas.width + 1, this._canvas.height + 1);\n            }\n            else {\n                this._offCtx.clearRect(-1, -1, this._offCanvas.width + 1, this._offCanvas.height + 1);\n            }\n        }\n        return this;\n    }\n    playItems(time) {\n        if (this._isReady) {\n            this._ctx.save();\n            if (this._offscreen)\n                this._offCtx.save();\n            super.playItems(time);\n            this._ctx.restore();\n            if (this._offscreen)\n                this._offCtx.restore();\n            this.render(this._ctx);\n        }\n    }\n}\nexport class CanvasForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._style = {\n            fillStyle: \"#f03\", strokeStyle: \"#fff\",\n            lineWidth: 1, lineJoin: \"bevel\", lineCap: \"butt\",\n        };\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx = this._space.ctx;\n                this._ctx.fillStyle = this._style.fillStyle;\n                this._ctx.strokeStyle = this._style.strokeStyle;\n                this._ctx.lineJoin = \"bevel\";\n                this._ctx.font = this._font.value;\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    useOffscreen(off = true, clear = false) {\n        if (clear)\n            this._space.clearOffscreen((typeof clear == \"string\") ? clear : null);\n        this._ctx = (this._space.hasOffscreen && off) ? this._space.offscreenCtx : this._space.ctx;\n        return this;\n    }\n    renderOffscreen(offset = [0, 0]) {\n        if (this._space.hasOffscreen) {\n            this._space.ctx.drawImage(this._space.offscreenCanvas, offset[0], offset[1], this._space.width, this._space.height);\n        }\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.filled = c;\n        }\n        else {\n            this.filled = true;\n            this._style.fillStyle = c;\n            this._ctx.fillStyle = c;\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.stroked = c;\n        }\n        else {\n            this.stroked = true;\n            this._style.strokeStyle = c;\n            this._ctx.strokeStyle = c;\n            if (width) {\n                this._ctx.lineWidth = width;\n                this._style.lineWidth = width;\n            }\n            if (linejoin) {\n                this._ctx.lineJoin = linejoin;\n                this._style.lineJoin = linejoin;\n            }\n            if (linecap) {\n                this._ctx.lineCap = linecap;\n                this._style.lineCap = linecap;\n            }\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        if (this._estimateTextWidth)\n            this.fontWidthEstimate(true);\n        return this;\n    }\n    fontWidthEstimate(estimate = true) {\n        this._estimateTextWidth = (estimate) ? Typo.textWidthEstimator(((c) => this._ctx.measureText(c).width)) : undefined;\n        return this;\n    }\n    getTextWidth(c) {\n        return (!this._estimateTextWidth) ? this._ctx.measureText(c + \" .\").width : this._estimateTextWidth(c);\n    }\n    _textTruncate(str, width, tail = \"\") {\n        return Typo.truncate(this.getTextWidth.bind(this), str, width, tail);\n    }\n    _textAlign(box, vertical, offset, center) {\n        if (!center)\n            center = Rectangle.center(box);\n        var px = box[0][0];\n        if (this._ctx.textAlign == \"end\" || this._ctx.textAlign == \"right\") {\n            px = box[1][0];\n        }\n        else if (this._ctx.textAlign == \"center\" || this._ctx.textAlign == \"middle\") {\n            px = center[0];\n        }\n        var py = center[1];\n        if (vertical == \"top\" || vertical == \"start\") {\n            py = box[0][1];\n        }\n        else if (vertical == \"end\" || vertical == \"bottom\") {\n            py = box[1][1];\n        }\n        return (offset) ? new Pt(px + offset[0], py + offset[1]) : new Pt(px, py);\n    }\n    reset() {\n        for (let k in this._style) {\n            if (this._style.hasOwnProperty(k)) {\n                this._ctx[k] = this._style[k];\n            }\n        }\n        this._font = new Font();\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    _paint() {\n        if (this._filled)\n            this._ctx.fill();\n        if (this._stroked)\n            this._ctx.stroke();\n    }\n    point(p, radius = 5, shape = \"square\") {\n        if (!p)\n            return;\n        if (!CanvasForm[shape])\n            throw new Error(`${shape} is not a static function of CanvasForm`);\n        CanvasForm[shape](this._ctx, p, radius);\n        this._paint();\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, 0, Const.two_pi, false);\n        ctx.closePath();\n    }\n    circle(pts) {\n        CanvasForm.circle(this._ctx, pts[0], pts[1][0]);\n        this._paint();\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        if (!pt)\n            return;\n        ctx.beginPath();\n        ctx.arc(pt[0], pt[1], radius, startAngle, endAngle, cc);\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        CanvasForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        this._paint();\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        if (!pt)\n            return;\n        let x1 = pt[0] - halfsize;\n        let y1 = pt[1] - halfsize;\n        let x2 = pt[0] + halfsize;\n        let y2 = pt[1] + halfsize;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x1, y2);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x2, y1);\n        ctx.closePath();\n    }\n    square(pt, halfsize) {\n        CanvasForm.square(this._ctx, pt, halfsize);\n        this._paint();\n        return this;\n    }\n    static line(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n    }\n    line(pts) {\n        CanvasForm.line(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static polygon(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        for (let i = 1, len = pts.length; i < len; i++) {\n            if (pts[i])\n                ctx.lineTo(pts[i][0], pts[i][1]);\n        }\n        ctx.closePath();\n    }\n    polygon(pts) {\n        CanvasForm.polygon(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (pts.length < 2)\n            return;\n        ctx.beginPath();\n        ctx.moveTo(pts[0][0], pts[0][1]);\n        ctx.lineTo(pts[0][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[1][1]);\n        ctx.lineTo(pts[1][0], pts[0][1]);\n        ctx.closePath();\n    }\n    rect(pts) {\n        CanvasForm.rect(this._ctx, pts);\n        this._paint();\n        return this;\n    }\n    static image(ctx, img, target = new Pt(), orig) {\n        if (typeof target[0] === \"number\") {\n            ctx.drawImage(img, target[0], target[1]);\n        }\n        else {\n            let t = target;\n            if (orig) {\n                ctx.drawImage(img, orig[0][0], orig[0][1], orig[1][0] - orig[0][0], orig[1][1] - orig[0][1], t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n            else {\n                ctx.drawImage(img, t[0][0], t[0][1], t[1][0] - t[0][0], t[1][1] - t[0][1]);\n            }\n        }\n    }\n    image(img, target, original) {\n        CanvasForm.image(this._ctx, img, target, original);\n        return this;\n    }\n    static text(ctx, pt, txt, maxWidth) {\n        if (!pt)\n            return;\n        ctx.fillText(txt, pt[0], pt[1], maxWidth);\n    }\n    text(pt, txt, maxWidth) {\n        CanvasForm.text(this._ctx, pt, txt, maxWidth);\n        return this;\n    }\n    textBox(box, txt, verticalAlign = \"middle\", tail = \"\", overrideBaseline = true) {\n        if (overrideBaseline)\n            this._ctx.textBaseline = verticalAlign;\n        let size = Rectangle.size(box);\n        let t = this._textTruncate(txt, size[0], tail);\n        this.text(this._textAlign(box, verticalAlign), t[0]);\n        return this;\n    }\n    paragraphBox(box, txt, lineHeight = 1.2, verticalAlign = \"top\", crop = true) {\n        let size = Rectangle.size(box);\n        this._ctx.textBaseline = \"top\";\n        let lstep = this._font.size * lineHeight;\n        let nextLine = (sub, buffer = [], cc = 0) => {\n            if (!sub)\n                return buffer;\n            if (crop && cc * lstep > size[1] - lstep * 2)\n                return buffer;\n            if (cc > 10000)\n                throw new Error(\"max recursion reached (10000)\");\n            let t = this._textTruncate(sub, size[0], \"\");\n            let newln = t[0].indexOf(\"\\n\");\n            if (newln >= 0) {\n                buffer.push(t[0].substr(0, newln));\n                return nextLine(sub.substr(newln + 1), buffer, cc + 1);\n            }\n            let dt = t[0].lastIndexOf(\" \") + 1;\n            if (dt <= 0 || t[1] === sub.length)\n                dt = undefined;\n            let line = t[0].substr(0, dt);\n            buffer.push(line);\n            return (t[1] <= 0 || t[1] === sub.length) ? buffer : nextLine(sub.substr((dt || t[1])), buffer, cc + 1);\n        };\n        let lines = nextLine(txt);\n        let lsize = lines.length * lstep;\n        let lbox = box;\n        if (verticalAlign == \"middle\" || verticalAlign == \"center\") {\n            let lpad = (size[1] - lsize) / 2;\n            if (crop)\n                lpad = Math.max(0, lpad);\n            lbox = new Group(box[0].$add(0, lpad), box[1].$subtract(0, lpad));\n        }\n        else if (verticalAlign == \"bottom\") {\n            lbox = new Group(box[0].$add(0, size[1] - lsize), box[1]);\n        }\n        else {\n            lbox = new Group(box[0], box[0].$add(size[0], lsize));\n        }\n        let center = Rectangle.center(lbox);\n        for (let i = 0, len = lines.length; i < len; i++) {\n            this.text(this._textAlign(lbox, \"top\", [0, i * lstep], center), lines[i]);\n        }\n        return this;\n    }\n    alignText(alignment = \"left\", baseline = \"alphabetic\") {\n        if (baseline == \"center\")\n            baseline = \"middle\";\n        if (baseline == \"baseline\")\n            baseline = \"alphabetic\";\n        this._ctx.textAlign = alignment;\n        this._ctx.textBaseline = baseline;\n        return this;\n    }\n    log(txt) {\n        let w = this._ctx.measureText(txt).width + 20;\n        this.stroke(false).fill(\"rgba(0,0,0,.4)\").rect([[0, 0], [w, 20]]);\n        this.fill(\"#fff\").text([10, 14], txt);\n        return this;\n    }\n}\n//# sourceMappingURL=Canvas.js.map","import { Pt, Group } from \"./Pt\";\nimport { Line, Triangle } from \"./Op\";\nimport { Const } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nimport { Vec } from \"./LinearAlgebra\";\nexport class Create {\n    static distributeRandom(bound, count, dimensions = 2) {\n        let pts = new Group();\n        for (let i = 0; i < count; i++) {\n            let p = [bound.x + Math.random() * bound.width];\n            if (dimensions > 1)\n                p.push(bound.y + Math.random() * bound.height);\n            if (dimensions > 2)\n                p.push(bound.z + Math.random() * bound.depth);\n            pts.push(new Pt(p));\n        }\n        return pts;\n    }\n    static distributeLinear(line, count) {\n        let ln = Line.subpoints(line, count - 2);\n        ln.unshift(line[0]);\n        ln.push(line[line.length - 1]);\n        return ln;\n    }\n    static gridPts(bound, columns, rows, orientation = [0.5, 0.5]) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).$divide(columns, rows);\n        let offset = unit.$multiply(orientation);\n        let g = new Group();\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(bound.topLeft.$add(unit.$multiply(c, r)).add(offset));\n            }\n        }\n        return g;\n    }\n    static gridCells(bound, columns, rows) {\n        if (columns === 0 || rows === 0)\n            throw new Error(\"grid columns and rows cannot be 0\");\n        let unit = bound.size.$subtract(1).divide(columns, rows);\n        let g = [];\n        for (let r = 0; r < rows; r++) {\n            for (let c = 0; c < columns; c++) {\n                g.push(new Group(bound.topLeft.$add(unit.$multiply(c, r)), bound.topLeft.$add(unit.$multiply(c, r).add(unit))));\n            }\n        }\n        return g;\n    }\n    static radialPts(center, radius, count) {\n        let g = new Group();\n        let a = Const.two_pi / count;\n        for (let i = 0; i < count; i++) {\n            g.push(new Pt(center).toAngle(a * i - Const.half_pi, radius, true));\n        }\n        return g;\n    }\n    static noisePts(pts, dx = 0.01, dy = 0.01, rows = 0, columns = 0) {\n        let seed = Math.random();\n        let g = new Group();\n        for (let i = 0, len = pts.length; i < len; i++) {\n            let np = new Noise(pts[i]);\n            let r = (rows && rows > 0) ? Math.floor(i / rows) : i;\n            let c = (columns && columns > 0) ? i % columns : i;\n            np.initNoise(dx * c, dy * r);\n            np.seed(seed);\n            g.push(np);\n        }\n        return g;\n    }\n    static delaunay(pts) {\n        return Delaunay.from(pts);\n    }\n}\nconst grad3 = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n];\nconst permTable = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 9, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\nexport class Noise extends Pt {\n    constructor(...args) {\n        super(...args);\n        this.perm = [];\n        this._n = new Pt(0.01, 0.01);\n        this.perm = permTable.concat(permTable);\n    }\n    initNoise(...args) {\n        this._n = new Pt(...args);\n    }\n    step(x = 0, y = 0) {\n        this._n.add(x, y);\n    }\n    seed(s) {\n        if (s > 0 && s < 1)\n            s *= 65536;\n        s = Math.floor(s);\n        if (s < 256)\n            s |= s << 8;\n        for (let i = 0; i < 255; i++) {\n            let v = (i & 1) ? permTable[i] ^ (s & 255) : permTable[i] ^ ((s >> 8) & 255);\n            this.perm[i] = this.perm[i + 256] = v;\n        }\n    }\n    noise2D() {\n        let i = Math.max(0, Math.floor(this._n[0])) % 255;\n        let j = Math.max(0, Math.floor(this._n[1])) % 255;\n        let x = (this._n[0] % 255) - i;\n        let y = (this._n[1] % 255) - j;\n        let n00 = Vec.dot(grad3[(i + this.perm[j]) % 12], [x, y, 0]);\n        let n01 = Vec.dot(grad3[(i + this.perm[j + 1]) % 12], [x, y - 1, 0]);\n        let n10 = Vec.dot(grad3[(i + 1 + this.perm[j]) % 12], [x - 1, y, 0]);\n        let n11 = Vec.dot(grad3[(i + 1 + this.perm[j + 1]) % 12], [x - 1, y - 1, 0]);\n        let _fade = (f) => f * f * f * (f * (f * 6 - 15) + 10);\n        let tx = _fade(x);\n        return Num.lerp(Num.lerp(n00, n10, tx), Num.lerp(n01, n11, tx), _fade(y));\n    }\n}\nexport class Delaunay extends Group {\n    constructor() {\n        super(...arguments);\n        this._mesh = [];\n    }\n    delaunay(triangleOnly = true) {\n        if (this.length < 3)\n            return [];\n        this._mesh = [];\n        let n = this.length;\n        let indices = [];\n        for (let i = 0; i < n; i++)\n            indices[i] = i;\n        indices.sort((i, j) => this[j][0] - this[i][0]);\n        let pts = this.slice();\n        let st = this._superTriangle();\n        pts = pts.concat(st);\n        let opened = [this._circum(n, n + 1, n + 2, st)];\n        let closed = [];\n        let tris = [];\n        for (let i = 0, len = indices.length; i < len; i++) {\n            let c = indices[i];\n            let edges = [];\n            let j = opened.length;\n            if (!this._mesh[c])\n                this._mesh[c] = {};\n            while (j--) {\n                let circum = opened[j];\n                let radius = circum.circle[1][0];\n                let d = pts[c].$subtract(circum.circle[0]);\n                if (d[0] > 0 && d[0] * d[0] > radius * radius) {\n                    closed.push(circum);\n                    tris.push(circum.triangle);\n                    opened.splice(j, 1);\n                    continue;\n                }\n                if (d[0] * d[0] + d[1] * d[1] - radius * radius > Const.epsilon) {\n                    continue;\n                }\n                edges.push(circum.i, circum.j, circum.j, circum.k, circum.k, circum.i);\n                opened.splice(j, 1);\n            }\n            Delaunay._dedupe(edges);\n            j = edges.length;\n            while (j > 1) {\n                opened.push(this._circum(edges[--j], edges[--j], c, false, pts));\n            }\n        }\n        for (let i = 0, len = opened.length; i < len; i++) {\n            let o = opened[i];\n            if (o.i < n && o.j < n && o.k < n) {\n                closed.push(o);\n                tris.push(o.triangle);\n                this._cache(o);\n            }\n        }\n        return (triangleOnly) ? tris : closed;\n    }\n    voronoi() {\n        let vs = [];\n        let n = this._mesh;\n        for (let i = 0, len = n.length; i < len; i++) {\n            vs.push(this.neighborPts(i, true));\n        }\n        return vs;\n    }\n    mesh() {\n        return this._mesh;\n    }\n    neighborPts(i, sort = false) {\n        let cs = new Group();\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k].circle[0]);\n        }\n        return (sort) ? Geom.sortEdges(cs) : cs;\n    }\n    neighbors(i) {\n        let cs = [];\n        let n = this._mesh;\n        for (let k in n[i]) {\n            if (n[i].hasOwnProperty(k))\n                cs.push(n[i][k]);\n        }\n        return cs;\n    }\n    _cache(o) {\n        this._mesh[o.i][`${Math.min(o.j, o.k)}-${Math.max(o.j, o.k)}`] = o;\n        this._mesh[o.j][`${Math.min(o.i, o.k)}-${Math.max(o.i, o.k)}`] = o;\n        this._mesh[o.k][`${Math.min(o.i, o.j)}-${Math.max(o.i, o.j)}`] = o;\n    }\n    _superTriangle() {\n        let minPt = this[0];\n        let maxPt = this[0];\n        for (let i = 1, len = this.length; i < len; i++) {\n            minPt = minPt.$min(this[i]);\n            maxPt = maxPt.$max(this[i]);\n        }\n        let d = maxPt.$subtract(minPt);\n        let mid = minPt.$add(maxPt).divide(2);\n        let dmax = Math.max(d[0], d[1]);\n        return new Group(mid.$subtract(20 * dmax, dmax), mid.$add(0, 20 * dmax), mid.$add(20 * dmax, -dmax));\n    }\n    _triangle(i, j, k, pts = this) {\n        return new Group(pts[i], pts[j], pts[k]);\n    }\n    _circum(i, j, k, tri, pts = this) {\n        let t = tri || this._triangle(i, j, k, pts);\n        return {\n            i: i,\n            j: j,\n            k: k,\n            triangle: t,\n            circle: Triangle.circumcircle(t)\n        };\n    }\n    static _dedupe(edges) {\n        let j = edges.length;\n        while (j > 1) {\n            let b = edges[--j];\n            let a = edges[--j];\n            let i = j;\n            while (i > 1) {\n                let n = edges[--i];\n                let m = edges[--i];\n                if ((a == m && b == n) || (a == n && b == m)) {\n                    edges.splice(j, 2);\n                    edges.splice(i, 2);\n                    break;\n                }\n            }\n        }\n        return edges;\n    }\n}\n//# sourceMappingURL=Create.js.map","import { Pt, Group } from \"./Pt\";\nimport { Util } from \"./Util\";\nimport { Num, Geom } from \"./Num\";\nexport class Color extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mode = \"rgb\";\n        this._isNorm = false;\n    }\n    static from(...args) {\n        let p = [1, 1, 1, 1];\n        let c = Util.getArgs(args);\n        for (let i = 0, len = p.length; i < len; i++) {\n            if (i < c.length)\n                p[i] = c[i];\n        }\n        return new Color(p);\n    }\n    static fromHex(hex) {\n        if (hex[0] == \"#\")\n            hex = hex.substr(1);\n        if (hex.length <= 3) {\n            let fn = (i) => hex[i] || \"F\";\n            hex = `${fn(0)}${fn(0)}${fn(1)}${fn(1)}${fn(2)}${fn(2)}`;\n        }\n        let alpha = 1;\n        if (hex.length === 8) {\n            alpha = hex.substr(6) && 0xFF / 255;\n            hex = hex.substring(0, 6);\n        }\n        let hexVal = parseInt(hex, 16);\n        return new Color(hexVal >> 16, hexVal >> 8 & 0xFF, hexVal & 0xFF, alpha);\n    }\n    static rgb(...args) { return Color.from(...args).toMode(\"rgb\"); }\n    static hsl(...args) { return Color.from(...args).toMode(\"hsl\"); }\n    static hsb(...args) { return Color.from(...args).toMode(\"hsb\"); }\n    static lab(...args) { return Color.from(...args).toMode(\"lab\"); }\n    static lch(...args) { return Color.from(...args).toMode(\"lch\"); }\n    static luv(...args) { return Color.from(...args).toMode(\"luv\"); }\n    static xyz(...args) { return Color.from(...args).toMode(\"xyz\"); }\n    static maxValues(mode) { return Color.ranges[mode].zipSlice(1).$take([0, 1, 2]); }\n    get hex() { return this.toString(\"hex\"); }\n    get rgb() { return this.toString(\"rgb\"); }\n    get rgba() { return this.toString(\"rgba\"); }\n    clone() {\n        let c = new Color(this);\n        c.toMode(this._mode);\n        return c;\n    }\n    toMode(mode, convert = false) {\n        if (convert) {\n            let fname = this._mode.toUpperCase() + \"to\" + mode.toUpperCase();\n            if (Color[fname]) {\n                this.to(Color[fname](this, this._isNorm, this._isNorm));\n            }\n            else {\n                throw new Error(\"Cannot convert color with \" + fname);\n            }\n        }\n        this._mode = mode;\n        return this;\n    }\n    get mode() { return this._mode; }\n    get r() { return this[0]; }\n    set r(n) { this[0] = n; }\n    get g() { return this[1]; }\n    set g(n) { this[1] = n; }\n    get b() { return this[2]; }\n    set b(n) { this[2] = n; }\n    get h() { return (this._mode == \"lch\") ? this[2] : this[0]; }\n    set h(n) {\n        let i = (this._mode == \"lch\") ? 2 : 0;\n        this[i] = n;\n    }\n    get s() { return this[1]; }\n    set s(n) { this[1] = n; }\n    get l() { return (this._mode == \"hsl\") ? this[2] : this[0]; }\n    set l(n) {\n        let i = (this._mode == \"hsl\") ? 2 : 0;\n        this[i] = n;\n    }\n    get a() { return this[1]; }\n    set a(n) { this[1] = n; }\n    get c() { return this[1]; }\n    set c(n) { this[1] = n; }\n    get u() { return this[1]; }\n    set u(n) { this[1] = n; }\n    get v() { return this[2]; }\n    set v(n) { this[2] = n; }\n    get alpha() { return (this.length > 3) ? this[3] : 1; }\n    get normalized() { return this._isNorm; }\n    set normalized(b) { this._isNorm = b; }\n    normalize(toNorm = true) {\n        if (this._isNorm == toNorm)\n            return this;\n        let ranges = Color.ranges[this._mode];\n        for (let i = 0; i < 3; i++) {\n            this[i] = (!toNorm)\n                ? Num.mapToRange(this[i], 0, 1, ranges[i][0], ranges[i][1])\n                : Num.mapToRange(this[i], ranges[i][0], ranges[i][1], 0, 1);\n        }\n        this._isNorm = toNorm;\n        return this;\n    }\n    $normalize(toNorm = true) { return this.clone().normalize(toNorm); }\n    toString(format = \"mode\") {\n        if (format == \"hex\") {\n            let _hex = (n) => {\n                let s = Math.floor(n).toString(16);\n                return (s.length < 2) ? '0' + s : s;\n            };\n            return `#${_hex(this[0])}${_hex(this[1])}${_hex(this[2])}`;\n        }\n        else if (format == \"rgba\") {\n            return `rgba(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])},${this.alpha}`;\n        }\n        else if (format == \"rgb\") {\n            return `rgb(${Math.floor(this[0])},${Math.floor(this[1])},${Math.floor(this[2])}`;\n        }\n        else {\n            return `${this._mode}(${this[0]},${this[1]},${this[2]},${this.alpha})`;\n        }\n    }\n    static RGBtoHSL(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = h;\n        let l = h;\n        if (max == min) {\n            h = 0;\n            s = 0;\n        }\n        else {\n            let d = max - min;\n            s = (l > 0.5) ? d / (2 - max - min) : d / (max + min);\n            h = 0;\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsl(((normalizedOutput) ? h / 60 : h * 60), s, l, rgb.alpha);\n    }\n    static HSLtoRGB(hsl, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, l] = hsl;\n        if (!normalizedInput)\n            h = h / 360;\n        if (s == 0)\n            return Color.rgb(l * 255, l * 255, l * 255, hsl.alpha);\n        let q = (l <= 0.5) ? l * (1 + s) : l + s - (l * s);\n        let p = 2 * l - q;\n        let convert = (t) => {\n            t = (t < 0) ? t + 1 : (t > 1) ? t - 1 : t;\n            if (t * 6 < 1) {\n                return p + (q - p) * t * 6;\n            }\n            else if (t * 2 < 1) {\n                return q;\n            }\n            else if (t * 3 < 2) {\n                return p + (q - p) * ((2 / 3) - t) * 6;\n            }\n            else {\n                return p;\n            }\n        };\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * convert((h + 1 / 3)), sc * convert(h), sc * convert((h - 1 / 3)), hsl.alpha);\n    }\n    static RGBtoHSB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let [r, g, b] = (!normalizedInput) ? rgb.$normalize() : rgb;\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let d = max - min;\n        let h = 0;\n        let s = (max === 0) ? 0 : d / max;\n        let v = max;\n        if (max != min) {\n            if (max === r) {\n                h = (g - b) / d + ((g < b) ? 6 : 0);\n            }\n            else if (max === g) {\n                h = (b - r) / d + 2;\n            }\n            else if (max === b) {\n                h = (r - g) / d + 4;\n            }\n        }\n        return Color.hsb(((normalizedOutput) ? h / 60 : h * 60), s, v, rgb.alpha);\n    }\n    static HSBtoRGB(hsb, normalizedInput = false, normalizedOutput = false) {\n        let [h, s, v] = hsb;\n        if (!normalizedInput)\n            h = h / 360;\n        let i = Math.floor(h * 6);\n        let f = h * 6 - i;\n        let p = v * (1 - s);\n        let q = v * (1 - f * s);\n        let t = v * (1 - (1 - f) * s);\n        let pick = [\n            [v, t, p], [q, v, p], [p, v, t],\n            [p, q, v], [t, p, v], [v, p, q]\n        ];\n        let c = pick[i % 6];\n        let sc = (normalizedOutput) ? 1 : 255;\n        return Color.rgb(sc * c[0], sc * c[1], sc * c[2], hsb.alpha);\n    }\n    static RGBtoLAB(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLAB(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LABtoRGB(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        return Color.XYZtoRGB(Color.LABtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoLCH(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.LABtoLCH(Color.RGBtoLAB(c), false, normalizedOutput);\n    }\n    static LCHtoRGB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        return Color.LABtoRGB(Color.LCHtoLAB(c), false, normalizedOutput);\n    }\n    static RGBtoLUV(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? rgb.$normalize(false) : rgb;\n        return Color.XYZtoLUV(Color.RGBtoXYZ(c), false, normalizedOutput);\n    }\n    static LUVtoRGB(luv, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? luv.$normalize(false) : luv;\n        return Color.XYZtoRGB(Color.LUVtoXYZ(c), false, normalizedOutput);\n    }\n    static RGBtoXYZ(rgb, normalizedInput = false, normalizedOutput = false) {\n        let c = (!normalizedInput) ? rgb.$normalize() : rgb.clone();\n        for (let i = 0; i < 3; i++) {\n            c[i] = (c[i] > 0.04045) ? Math.pow((c[i] + 0.055) / 1.055, 2.4) : c[i] / 12.92;\n            if (!normalizedOutput)\n                c[i] = c[i] * 100;\n        }\n        let cc = Color.xyz(c[0] * 0.4124564 + c[1] * 0.3575761 + c[2] * 0.1804375, c[0] * 0.2126729 + c[1] * 0.7151522 + c[2] * 0.0721750, c[0] * 0.0193339 + c[1] * 0.1191920 + c[2] * 0.9503041, rgb.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoRGB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (!normalizedInput) ? xyz.$normalize() : xyz;\n        let rgb = [\n            x * 3.2404542 + y * -1.5371385 + z * -0.4985314,\n            x * -0.9692660 + y * 1.8760108 + z * 0.0415560,\n            x * 0.0556434 + y * -0.2040259 + z * 1.0572252\n        ];\n        for (let i = 0; i < 3; i++) {\n            rgb[i] = (rgb[i] < 0) ? 0 : (rgb[i] > 0.0031308) ? (1.055 * Math.pow(rgb[i], 1 / 2.4) - 0.055) : (12.92 * rgb[i]);\n            rgb[i] = Math.max(0, Math.min(1, rgb[i]));\n            if (!normalizedOutput)\n                rgb[i] = Math.round(rgb[i] * 255);\n        }\n        let cc = Color.rgb(rgb[0], rgb[1], rgb[2], xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLAB(xyz, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? xyz.$normalize(false) : xyz.clone();\n        c.divide(Color.D65);\n        let fn = (n) => (n > 0.008856) ? Math.pow(n, 1 / 3) : (7.787 * n) + 16 / 116;\n        let cy = fn(c[1]);\n        let cc = Color.lab((116 * cy) - 16, 500 * (fn(c[0]) - cy), 200 * (cy - fn(c[2])), xyz.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static LABtoXYZ(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let y = (c[0] + 16) / 116;\n        let x = (c[1] / 500) + y;\n        let z = y - c[2] / 200;\n        let fn = (n) => {\n            let nnn = n * n * n;\n            return (nnn > 0.008856) ? nnn : (n - 16 / 116) / 7.787;\n        };\n        let d = Color.D65;\n        let cc = Color.xyz(Math.max(0, d[0] * fn(x)), Math.max(0, d[1] * fn(y)), Math.max(0, d[2] * fn(z)), lab.alpha);\n        return (normalizedOutput) ? cc.normalize() : cc;\n    }\n    static XYZtoLUV(xyz, normalizedInput = false, normalizedOutput = false) {\n        let [x, y, z] = (normalizedInput) ? xyz.$normalize(false) : xyz;\n        let u = (4 * x) / (x + (15 * y) + (3 * z));\n        let v = (9 * y) / (x + (15 * y) + (3 * z));\n        y = y / 100;\n        y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y + 16 / 116);\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let L = (116 * y) - 16;\n        return Color.luv(L, 13 * L * (u - refU), 13 * L * (v - refV), xyz.alpha);\n    }\n    static LUVtoXYZ(luv, normalizedInput = false, normalizedOutput = false) {\n        let [l, u, v] = (normalizedInput) ? luv.$normalize(false) : luv;\n        let y = (l + 16) / 116;\n        let cubeY = y * y * y;\n        y = (cubeY > 0.008856) ? cubeY : (y - 16 / 116) / 7.787;\n        let refU = (4 * Color.D65[0]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        let refV = (9 * Color.D65[1]) / (Color.D65[0] + (15 * Color.D65[1]) + (3 * Color.D65[2]));\n        u = u / (13 * l) + refU;\n        v = v / (13 * l) + refV;\n        y = y * 100;\n        let x = -1 * (9 * y * u) / ((u - 4) * v - u * v);\n        let z = (9 * y - (15 * v * y) - (v * x)) / (3 * v);\n        return Color.xyz(x, y, z, luv.alpha);\n    }\n    static LABtoLCH(lab, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lab.$normalize(false) : lab;\n        let h = Geom.toDegree(Geom.boundRadian(Math.atan2(c[2], c[1])));\n        return Color.lch(c[0], Math.sqrt(c[1] * c[1] + c[2] * c[2]), h, lab.alpha);\n    }\n    static LCHtoLAB(lch, normalizedInput = false, normalizedOutput = false) {\n        let c = (normalizedInput) ? lch.$normalize(false) : lch;\n        let rad = Geom.toRadian(c[2]);\n        return Color.lab(c[0], Math.cos(rad) * c[1], Math.sin(rad) * c[1], lch.alpha);\n    }\n}\nColor.D65 = new Pt(95.047, 100, 108.883, 1);\nColor.ranges = {\n    rgb: new Group(new Pt(0, 255), new Pt(0, 255), new Pt(0, 255)),\n    hsl: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    hsb: new Group(new Pt(0, 360), new Pt(0, 1), new Pt(0, 1)),\n    lab: new Group(new Pt(0, 100), new Pt(-128, 127), new Pt(-128, 127)),\n    lch: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 360)),\n    luv: new Group(new Pt(0, 100), new Pt(-134, 220), new Pt(-140, 122)),\n    xyz: new Group(new Pt(0, 100), new Pt(0, 100), new Pt(0, 100))\n};\n//# sourceMappingURL=Color.js.map","import { MultiTouchSpace } from './Space';\nimport { VisualForm, Font } from \"./Form\";\nimport { Util } from './Util';\nimport { Pt, Bound } from './Pt';\nexport class DOMSpace extends MultiTouchSpace {\n    constructor(elem, callback) {\n        super();\n        this.id = \"domspace\";\n        this._autoResize = true;\n        this._bgcolor = \"#e1e9f0\";\n        this._css = {};\n        var _selector = null;\n        var _existed = false;\n        this.id = \"pts\";\n        if (elem instanceof Element) {\n            _selector = elem;\n            this.id = \"pts_existing_space\";\n        }\n        else {\n            _selector = document.querySelector(elem);\n            _existed = true;\n            this.id = elem.substr(1);\n        }\n        if (!_selector) {\n            this._container = DOMSpace.createElement(\"div\", \"pts_container\");\n            this._canvas = DOMSpace.createElement(\"div\", \"pts_element\");\n            this._container.appendChild(this._canvas);\n            document.body.appendChild(this._container);\n            _existed = false;\n        }\n        else {\n            this._canvas = _selector;\n            this._container = _selector.parentElement;\n        }\n        setTimeout(this._ready.bind(this, callback), 50);\n    }\n    static createElement(elem = \"div\", id, appendTo) {\n        let d = document.createElement(elem);\n        if (id)\n            d.setAttribute(\"id\", id);\n        if (appendTo && appendTo.appendChild)\n            appendTo.appendChild(d);\n        return d;\n    }\n    _ready(callback) {\n        if (!this._container)\n            throw new Error(`Cannot initiate #${this.id} element`);\n        this._isReady = true;\n        this._resizeHandler(null);\n        this.clear(this._bgcolor);\n        this._canvas.dispatchEvent(new Event(\"ready\"));\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                if (this.players[k].start)\n                    this.players[k].start(this.bound.clone(), this);\n            }\n        }\n        this._pointer = this.center;\n        this.refresh(false);\n        if (callback)\n            callback(this.bound, this._canvas);\n    }\n    setup(opt) {\n        if (opt.bgcolor) {\n            this._bgcolor = opt.bgcolor;\n        }\n        this.autoResize = (opt.resize != undefined) ? opt.resize : false;\n        return this;\n    }\n    getForm() {\n        return null;\n    }\n    set autoResize(auto) {\n        this._autoResize = auto;\n        if (auto) {\n            window.addEventListener('resize', this._resizeHandler.bind(this));\n        }\n        else {\n            delete this._css['width'];\n            delete this._css['height'];\n            window.removeEventListener('resize', this._resizeHandler.bind(this));\n        }\n    }\n    get autoResize() { return this._autoResize; }\n    resize(b, evt) {\n        this.bound = b;\n        this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        for (let k in this.players) {\n            if (this.players.hasOwnProperty(k)) {\n                let p = this.players[k];\n                if (p.resize)\n                    p.resize(this.bound, evt);\n            }\n        }\n        return this;\n    }\n    _resizeHandler(evt) {\n        let b = Bound.fromBoundingRect(this._container.getBoundingClientRect());\n        if (this._autoResize) {\n            this.styles({ width: \"100%\", height: \"100%\" }, true);\n        }\n        else {\n            this.styles({ width: `${b.width}px`, height: `${b.height}px` }, true);\n        }\n        this.resize(b, evt);\n    }\n    get element() {\n        return this._canvas;\n    }\n    get parent() {\n        return this._container;\n    }\n    get ready() { return this._isReady; }\n    clear(bg) {\n        if (bg)\n            this.background = bg;\n        this._canvas.innerHTML = \"\";\n        return this;\n    }\n    set background(bg) {\n        this._bgcolor = bg;\n        this._container.style.backgroundColor = this._bgcolor;\n    }\n    get background() { return this._bgcolor; }\n    style(key, val, update = false) {\n        this._css[key] = val;\n        if (update)\n            this._canvas.style[key] = val;\n        return this;\n    }\n    styles(styles, update = false) {\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k))\n                this.style(k, styles[k], update);\n        }\n        return this;\n    }\n    static setAttr(elem, data) {\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                elem.setAttribute(k, data[k]);\n            }\n        }\n        return elem;\n    }\n    static getInlineStyles(data) {\n        let str = \"\";\n        for (let k in data) {\n            if (data.hasOwnProperty(k)) {\n                if (data[k])\n                    str += `${k}: ${data[k]}; `;\n            }\n        }\n        return str;\n    }\n}\nexport class HTMLSpace extends DOMSpace {\n    getForm() {\n        return new HTMLForm(this);\n    }\n    static htmlElement(parent, name, id, autoClass = true) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElement(name);\n            elem.setAttribute(\"id\", id);\n            if (autoClass)\n                elem.setAttribute(\"class\", id.substring(0, id.indexOf(\"-\")));\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + HTMLForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class HTMLForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"background\": \"#f03\",\n                \"border-color\": \"#fff\",\n                \"color\": \"#000\",\n                \"border-width\": \"1px\",\n                \"border-radius\": \"0\",\n                \"border-style\": \"solid\",\n                \"position\": \"absolute\",\n                \"top\": 0,\n                \"left\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_dom_\" + (HTMLForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v, unit = '') {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = `${v}${unit}`;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n            if (!c)\n                this.styleTo(\"background\", \"transparent\");\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"background\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n            if (!c)\n                this.styleTo(\"border-width\", 0);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"border-color\", c);\n            this.styleTo(\"border-width\", (width || 1) + \"px\");\n        }\n        return this;\n    }\n    fillText(c) {\n        this.styleTo(\"color\", c);\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"background\": \"#f03\", \"border-color\": \"#fff\",\n            \"border-width\": \"1px\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(HTMLForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${HTMLForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"background: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"border: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('background') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('border-width') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return HTMLSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static rectStyle(ctx, pt, size) {\n        ctx.style[\"left\"] = pt[0] + \"px\";\n        ctx.style[\"top\"] = pt[1] + \"px\";\n        ctx.style[\"width\"] = size[0] + \"px\";\n        ctx.style[\"height\"] = size[1] + \"px\";\n        return ctx;\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return HTMLForm.circle(ctx, pt, radius);\n        }\n        else {\n            return HTMLForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        if (shape == \"circle\")\n            this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-circle ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(radius), new Pt(radius * 2, radius * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"100%\");\n        HTMLForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-square ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, new Pt(pt).$subtract(halfsize), new Pt(halfsize * 2, halfsize * 2));\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        HTMLForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, { class: `pts-form pts-rect ${ctx.currentClass}` });\n        HTMLForm.rectStyle(ctx, pts[0], pts[1]);\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        this.styleTo(\"border-radius\", \"0\");\n        HTMLForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = HTMLSpace.htmlElement(ctx.group, \"div\", HTMLForm.getID(ctx));\n        HTMLSpace.setAttr(elem, {\n            position: 'absolute',\n            class: `pts-form pts-text ${ctx.currentClass}`,\n            left: pt[0],\n            top: pt[1],\n        });\n        elem.textContent = txt;\n        HTMLForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        HTMLForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        Util.warn(\"arc is not implemented in HTMLForm\");\n        return this;\n    }\n    line(pts) {\n        Util.warn(\"line is not implemented in HTMLForm\");\n        return this;\n    }\n    polygon(pts) {\n        Util.warn(\"polygon is not implemented in HTMLForm\");\n        return this;\n    }\n}\nHTMLForm.groupID = 0;\nHTMLForm.domID = 0;\n//# sourceMappingURL=Dom.js.map","import { VisualForm, Font } from \"./Form\";\nimport { Geom } from './Num';\nimport { Const } from './Util';\nimport { Pt, Group } from './Pt';\nimport { Rectangle } from \"./Op\";\nimport { DOMSpace } from \"./Dom\";\nexport class SVGSpace extends DOMSpace {\n    constructor(elem, callback) {\n        super(elem, callback);\n        this.id = \"svgspace\";\n        this._bgcolor = \"#999\";\n        if (this._canvas.nodeName.toLowerCase() != \"svg\") {\n            let s = SVGSpace.svgElement(this._canvas, \"svg\", `${this.id}_svg`);\n            this._container = this._canvas;\n            this._canvas = s;\n        }\n    }\n    getForm() { return new SVGForm(this); }\n    get element() {\n        return this._canvas;\n    }\n    resize(b, evt) {\n        super.resize(b, evt);\n        SVGSpace.setAttr(this.element, {\n            \"viewBox\": `0 0 ${this.bound.width} ${this.bound.height}`,\n            \"width\": `${this.bound.width}`,\n            \"height\": `${this.bound.height}`,\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"version\": \"1.1\"\n        });\n        return this;\n    }\n    static svgElement(parent, name, id) {\n        if (!parent || !parent.appendChild)\n            throw new Error(\"parent is not a valid DOM element\");\n        let elem = document.querySelector(`#${id}`);\n        if (!elem) {\n            elem = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\n            elem.setAttribute(\"id\", id);\n            parent.appendChild(elem);\n        }\n        return elem;\n    }\n    remove(player) {\n        let temp = this._container.querySelectorAll(\".\" + SVGForm.scopeID(player));\n        temp.forEach((el) => {\n            el.parentNode.removeChild(el);\n        });\n        return super.remove(player);\n    }\n    removeAll() {\n        this._container.innerHTML = \"\";\n        return super.removeAll();\n    }\n}\nexport class SVGForm extends VisualForm {\n    constructor(space) {\n        super();\n        this._ctx = {\n            group: null,\n            groupID: \"pts\",\n            groupCount: 0,\n            currentID: \"pts0\",\n            currentClass: \"\",\n            style: {\n                \"filled\": true,\n                \"stroked\": true,\n                \"fill\": \"#f03\",\n                \"stroke\": \"#fff\",\n                \"stroke-width\": 1,\n                \"stroke-linejoin\": \"bevel\",\n                \"stroke-linecap\": \"sqaure\"\n            },\n            font: \"11px sans-serif\",\n            fontSize: 11,\n            fontFamily: \"sans-serif\"\n        };\n        this._ready = false;\n        this._space = space;\n        this._space.add({ start: () => {\n                this._ctx.group = this._space.element;\n                this._ctx.groupID = \"pts_svg_\" + (SVGForm.groupID++);\n                this._ready = true;\n            } });\n    }\n    get space() { return this._space; }\n    styleTo(k, v) {\n        if (this._ctx.style[k] === undefined)\n            throw new Error(`${k} style property doesn't exist`);\n        this._ctx.style[k] = v;\n    }\n    fill(c) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"filled\", c);\n        }\n        else {\n            this.styleTo(\"filled\", true);\n            this.styleTo(\"fill\", c);\n        }\n        return this;\n    }\n    stroke(c, width, linejoin, linecap) {\n        if (typeof c == \"boolean\") {\n            this.styleTo(\"stroked\", c);\n        }\n        else {\n            this.styleTo(\"stroked\", true);\n            this.styleTo(\"stroke\", c);\n            if (width)\n                this.styleTo(\"stroke-width\", width);\n            if (linejoin)\n                this.styleTo(\"stroke-linejoin\", linejoin);\n            if (linecap)\n                this.styleTo(\"stroke-linecap\", linecap);\n        }\n        return this;\n    }\n    cls(c) {\n        if (typeof c == \"boolean\") {\n            this._ctx.currentClass = \"\";\n        }\n        else {\n            this._ctx.currentClass = c;\n        }\n        return this;\n    }\n    font(sizeOrFont, weight, style, lineHeight, family) {\n        if (typeof sizeOrFont == \"number\") {\n            this._font.size = sizeOrFont;\n            if (family)\n                this._font.face = family;\n            if (weight)\n                this._font.weight = weight;\n            if (style)\n                this._font.style = style;\n            if (lineHeight)\n                this._font.lineHeight = lineHeight;\n            this._ctx.font = this._font.value;\n        }\n        else {\n            this._font = sizeOrFont;\n        }\n        return this;\n    }\n    reset() {\n        this._ctx.style = {\n            \"filled\": true, \"stroked\": true,\n            \"fill\": \"#f03\", \"stroke\": \"#fff\",\n            \"stroke-width\": 1,\n            \"stroke-linejoin\": \"bevel\",\n            \"stroke-linecap\": \"sqaure\"\n        };\n        this._font = new Font(14, \"sans-serif\");\n        this._ctx.font = this._font.value;\n        return this;\n    }\n    updateScope(group_id, group) {\n        this._ctx.group = group;\n        this._ctx.groupID = group_id;\n        this._ctx.groupCount = 0;\n        this.nextID();\n        return this._ctx;\n    }\n    scope(item) {\n        if (!item || item.animateID == null)\n            throw new Error(\"item not defined or not yet added to Space\");\n        return this.updateScope(SVGForm.scopeID(item), this.space.element);\n    }\n    nextID() {\n        this._ctx.groupCount++;\n        this._ctx.currentID = `${this._ctx.groupID}-${this._ctx.groupCount}`;\n        return this._ctx.currentID;\n    }\n    static getID(ctx) {\n        return ctx.currentID || `p-${SVGForm.domID++}`;\n    }\n    static scopeID(item) {\n        return `item-${item.animateID}`;\n    }\n    static style(elem, styles) {\n        let st = [];\n        if (!styles[\"filled\"])\n            st.push(\"fill: none\");\n        if (!styles[\"stroked\"])\n            st.push(\"stroke: none\");\n        for (let k in styles) {\n            if (styles.hasOwnProperty(k) && k != \"filled\" && k != \"stroked\") {\n                let v = styles[k];\n                if (v) {\n                    if (!styles[\"filled\"] && k.indexOf('fill') === 0) {\n                        continue;\n                    }\n                    else if (!styles[\"stroked\"] && k.indexOf('stroke') === 0) {\n                        continue;\n                    }\n                    else {\n                        st.push(`${k}: ${v}`);\n                    }\n                }\n            }\n        }\n        return DOMSpace.setAttr(elem, { style: st.join(\";\") });\n    }\n    static point(ctx, pt, radius = 5, shape = \"square\") {\n        if (shape === \"circle\") {\n            return SVGForm.circle(ctx, pt, radius);\n        }\n        else {\n            return SVGForm.square(ctx, pt, radius);\n        }\n    }\n    point(pt, radius = 5, shape = \"square\") {\n        this.nextID();\n        SVGForm.point(this._ctx, pt, radius, shape);\n        return this;\n    }\n    static circle(ctx, pt, radius = 10) {\n        let elem = SVGSpace.svgElement(ctx.group, \"circle\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            cx: pt[0],\n            cy: pt[1],\n            r: radius,\n            'class': `pts-svgform pts-circle ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    circle(pts) {\n        this.nextID();\n        SVGForm.circle(this._ctx, pts[0], pts[1][0]);\n        return this;\n    }\n    static arc(ctx, pt, radius, startAngle, endAngle, cc) {\n        let elem = SVGSpace.svgElement(ctx.group, \"path\", SVGForm.getID(ctx));\n        const start = new Pt(pt).toAngle(startAngle, radius, true);\n        const end = new Pt(pt).toAngle(endAngle, radius, true);\n        const diff = Geom.boundAngle(endAngle) - Geom.boundAngle(startAngle);\n        let largeArc = (diff > Const.pi) ? true : false;\n        if (cc)\n            largeArc = !largeArc;\n        const sweep = (cc) ? \"0\" : \"1\";\n        const d = `M ${start[0]} ${start[1]} A ${radius} ${radius} 0 ${largeArc ? \"1\" : \"0\"} ${sweep} ${end[0]} ${end[1]}`;\n        DOMSpace.setAttr(elem, {\n            d: d,\n            'class': `pts-svgform pts-arc ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    arc(pt, radius, startAngle, endAngle, cc) {\n        this.nextID();\n        SVGForm.arc(this._ctx, pt, radius, startAngle, endAngle, cc);\n        return this;\n    }\n    static square(ctx, pt, halfsize) {\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x: pt[0] - halfsize,\n            y: pt[1] - halfsize,\n            width: halfsize * 2,\n            height: halfsize * 2,\n            'class': `pts-svgform pts-square ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    square(pt, halfsize) {\n        this.nextID();\n        SVGForm.square(this._ctx, pt, halfsize);\n        return this;\n    }\n    static line(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        if (pts.length > 2)\n            return SVGForm._poly(ctx, pts, false);\n        let elem = SVGSpace.svgElement(ctx.group, \"line\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            x1: pts[0][0],\n            y1: pts[0][1],\n            x2: pts[1][0],\n            y2: pts[1][1],\n            'class': `pts-svgform pts-line ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    line(pts) {\n        this.nextID();\n        SVGForm.line(this._ctx, pts);\n        return this;\n    }\n    static _poly(ctx, pts, closePath = true) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, ((closePath) ? \"polygon\" : \"polyline\"), SVGForm.getID(ctx));\n        let points = pts.reduce((a, p) => a + `${p[0]},${p[1]} `, \"\");\n        DOMSpace.setAttr(elem, {\n            points: points,\n            'class': `pts-svgform pts-polygon ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    static polygon(ctx, pts) {\n        return SVGForm._poly(ctx, pts, true);\n    }\n    polygon(pts) {\n        this.nextID();\n        SVGForm.polygon(this._ctx, pts);\n        return this;\n    }\n    static rect(ctx, pts) {\n        if (!this._checkSize(pts))\n            return;\n        let elem = SVGSpace.svgElement(ctx.group, \"rect\", SVGForm.getID(ctx));\n        let bound = Group.fromArray(pts).boundingBox();\n        let size = Rectangle.size(bound);\n        DOMSpace.setAttr(elem, {\n            x: bound[0][0],\n            y: bound[0][1],\n            width: size[0],\n            height: size[1],\n            'class': `pts-svgform pts-rect ${ctx.currentClass}`,\n        });\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    rect(pts) {\n        this.nextID();\n        SVGForm.rect(this._ctx, pts);\n        return this;\n    }\n    static text(ctx, pt, txt) {\n        let elem = SVGSpace.svgElement(ctx.group, \"text\", SVGForm.getID(ctx));\n        DOMSpace.setAttr(elem, {\n            \"pointer-events\": \"none\",\n            x: pt[0],\n            y: pt[1],\n            dx: 0, dy: 0,\n            'class': `pts-svgform pts-text ${ctx.currentClass}`,\n        });\n        elem.textContent = txt;\n        SVGForm.style(elem, ctx.style);\n        return elem;\n    }\n    text(pt, txt) {\n        this.nextID();\n        SVGForm.text(this._ctx, pt, txt);\n        return this;\n    }\n    log(txt) {\n        this.fill(\"#000\").stroke(\"#fff\", 0.5).text([10, 14], txt);\n        return this;\n    }\n}\nSVGForm.groupID = 0;\nSVGForm.domID = 0;\n//# sourceMappingURL=Svg.js.map","import { Pt, Group, Bound } from \"./Pt\";\nimport { Polygon, Circle } from \"./Op\";\nexport class World {\n    constructor(bound, friction = 1, gravity = 0) {\n        this._lastTime = null;\n        this._gravity = new Pt();\n        this._friction = 1;\n        this._damping = 0.75;\n        this._particles = [];\n        this._bodies = [];\n        this._names = { p: {}, b: {} };\n        this._bound = Bound.fromGroup(bound);\n        this._friction = friction;\n        this._gravity = (typeof gravity === \"number\") ? new Pt(0, gravity) : new Pt(gravity);\n        return this;\n    }\n    get gravity() { return this._gravity; }\n    set gravity(g) { this._gravity = g; }\n    get friction() { return this._friction; }\n    set friction(f) { this._friction = f; }\n    get damping() { return this._damping; }\n    set damping(f) { this._damping = f; }\n    get bodyCount() { return this._bodies.length; }\n    get particleCount() { return this._particles.length; }\n    body(id) { return this._bodies[(typeof id === \"string\") ? this._names.b[id] : id]; }\n    particle(id) { return this._particles[(typeof id === \"string\") ? this._names.p[id] : id]; }\n    update(ms) {\n        let dt = ms / 1000;\n        this._updateParticles(dt);\n        this._updateBodies(dt);\n    }\n    drawParticles(fn) {\n        this._drawParticles = fn;\n    }\n    drawBodies(fn) {\n        this._drawBodies = fn;\n    }\n    add(p, name) {\n        if (p instanceof Body) {\n            this._bodies.push(p);\n            if (name)\n                this._names.b[name] = this._bodies.length - 1;\n        }\n        else {\n            this._particles.push(p);\n            if (name)\n                this._names.p[name] = this._particles.length - 1;\n        }\n        return this;\n    }\n    remove(which, index, count = 1) {\n        let param = (index < 0) ? [index * -1 - 1, count] : [index, count];\n        if (which == \"body\") {\n            this._bodies.splice(param[0], param[1]);\n        }\n        else {\n            this._particles.splice(param[0], param[1]);\n        }\n        return this;\n    }\n    static edgeConstraint(p1, p2, dist, stiff = 1, precise = false) {\n        const m1 = 1 / (p1.mass || 1);\n        const m2 = 1 / (p2.mass || 1);\n        const mm = m1 + m2;\n        let delta = p2.$subtract(p1);\n        let distSq = dist * dist;\n        let d = (precise) ? (dist / delta.magnitude() - 1) : (distSq / (delta.dot(delta) + distSq) - 0.5);\n        let f = delta.$multiply(d * stiff);\n        p1.subtract(f.$multiply(m1 / mm));\n        p2.add(f.$multiply(m2 / mm));\n        return p1;\n    }\n    static boundConstraint(p, rect, damping = 0.75) {\n        let bound = rect.boundingBox();\n        let np = p.$min(bound[1].subtract(p.radius)).$max(bound[0].add(p.radius));\n        if (np[0] === bound[0][0] || np[0] === bound[1][0]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(-c[0], c[1]));\n        }\n        else if (np[1] === bound[0][1] || np[1] === bound[1][1]) {\n            let c = p.changed.$multiply(damping);\n            p.previous = np.$subtract(new Pt(c[0], -c[1]));\n        }\n        p.to(np);\n    }\n    integrate(p, dt, prevDt) {\n        p.addForce(this._gravity);\n        p.verlet(dt, this._friction, prevDt);\n        return p;\n    }\n    _updateParticles(dt) {\n        for (let i = 0, len = this._particles.length; i < len; i++) {\n            let p = this._particles[i];\n            this.integrate(p, dt, this._lastTime);\n            World.boundConstraint(p, this._bound, this._damping);\n            for (let k = i + 1; k < len; k++) {\n                if (i !== k) {\n                    let p2 = this._particles[k];\n                    p.collide(p2, this._damping);\n                }\n            }\n            if (this._drawParticles)\n                this._drawParticles(p, i);\n        }\n        this._lastTime = dt;\n    }\n    _updateBodies(dt) {\n        for (let i = 0, len = this._bodies.length; i < len; i++) {\n            let b = this._bodies[i];\n            for (let k = 0, klen = b.length; k < klen; k++) {\n                let bk = b[k];\n                World.boundConstraint(bk, this._bound, this._damping);\n                this.integrate(bk, dt, this._lastTime);\n            }\n            for (let k = i + 1; k < len; k++) {\n                b.processBody(this._bodies[k]);\n            }\n            for (let m = 0, mlen = this._particles.length; m < mlen; m++) {\n                b.processParticle(this._particles[m]);\n            }\n            b.processEdges();\n            if (this._drawBodies)\n                this._drawBodies(b, i);\n        }\n    }\n}\nexport class Particle extends Pt {\n    constructor(...args) {\n        super(...args);\n        this._mass = 1;\n        this._radius = 0;\n        this._force = new Pt();\n        this._prev = new Pt();\n        this._lock = false;\n        this._prev = this.clone();\n    }\n    get mass() { return this._mass; }\n    set mass(m) { this._mass = m; }\n    get radius() { return this._radius; }\n    set radius(f) { this._radius = f; }\n    get previous() { return this._prev; }\n    set previous(p) { this._prev = p; }\n    get force() { return this._force; }\n    set force(g) { this._force = g; }\n    get body() { return this._body; }\n    set body(b) { this._body = b; }\n    get lock() { return this._lock; }\n    set lock(b) {\n        this._lock = b;\n        this._lockPt = new Pt(this);\n    }\n    get changed() { return this.$subtract(this._prev); }\n    set position(p) {\n        this.previous.to(this);\n        if (this._lock)\n            this._lockPt = p;\n        this.to(p);\n    }\n    size(r) {\n        this._mass = r;\n        this._radius = r;\n        return this;\n    }\n    addForce(...args) {\n        this._force.add(...args);\n        return this._force;\n    }\n    verlet(dt, friction, lastDt) {\n        if (this._lock) {\n            this.to(this._lockPt);\n        }\n        else {\n            let lt = (lastDt) ? lastDt : dt;\n            let a = this._force.multiply(dt * (dt + lt) / 2);\n            let v = this.changed.multiply(friction * dt / lt).add(a);\n            this._prev = this.clone();\n            this.add(v);\n            this._force = new Pt();\n        }\n        return this;\n    }\n    hit(...args) {\n        this._prev.subtract(new Pt(...args).$divide(Math.sqrt(this._mass)));\n        return this;\n    }\n    collide(p2, damp = 1) {\n        let p1 = this;\n        let dp = p1.$subtract(p2);\n        let distSq = dp.magnitudeSq();\n        let dr = p1.radius + p2.radius;\n        if (distSq < dr * dr) {\n            let c1 = p1.changed;\n            let c2 = p2.changed;\n            let dist = Math.sqrt(distSq);\n            let d = dp.$multiply(((dist - dr) / dist) / 2);\n            let np1 = p1.$subtract(d);\n            let np2 = p2.$add(d);\n            p1.to(np1);\n            p2.to(np2);\n            let f1 = damp * dp.dot(c1) / distSq;\n            let f2 = damp * dp.dot(c2) / distSq;\n            let dm1 = p1.mass / (p1.mass + p2.mass);\n            let dm2 = p2.mass / (p1.mass + p2.mass);\n            c1.add(new Pt(f2 * dp[0] - f1 * dp[0], f2 * dp[1] - f1 * dp[1]).$multiply(dm2));\n            c2.add(new Pt(f1 * dp[0] - f2 * dp[0], f1 * dp[1] - f2 * dp[1]).$multiply(dm1));\n            p1.previous = p1.$subtract(c1);\n            p2.previous = p2.$subtract(c2);\n        }\n    }\n    toString() {\n        return `Particle: ${this[0]} ${this[1]} | previous ${this._prev[0]} ${this._prev[1]} | mass ${this._mass}`;\n    }\n}\nexport class Body extends Group {\n    constructor() {\n        super();\n        this._cs = [];\n        this._stiff = 1;\n        this._locks = {};\n        this._mass = 1;\n    }\n    static fromGroup(list, stiff = 1, autoLink = true, autoMass = true) {\n        let b = new Body().init(list);\n        if (autoLink)\n            b.linkAll(stiff);\n        if (autoMass)\n            b.autoMass();\n        return b;\n    }\n    init(list, stiff = 1) {\n        let c = new Pt();\n        for (let i = 0, len = list.length; i < len; i++) {\n            let p = new Particle(list[i]);\n            p.body = this;\n            c.add(list[i]);\n            this.push(p);\n        }\n        this._stiff = stiff;\n        return this;\n    }\n    get mass() { return this._mass; }\n    set mass(m) {\n        this._mass = m;\n        for (let i = 0, len = this.length; i < len; i++) {\n            this[i].mass = this._mass;\n        }\n    }\n    autoMass() {\n        this.mass = Math.sqrt(Polygon.area(this)) / 10;\n        return this;\n    }\n    link(index1, index2, stiff) {\n        if (index1 < 0 || index1 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        if (index2 < 0 || index2 >= this.length)\n            throw new Error(\"index1 is not in the Group's indices\");\n        let d = this[index1].$subtract(this[index2]).magnitude();\n        this._cs.push([index1, index2, d, stiff || this._stiff]);\n        return this;\n    }\n    linkAll(stiff) {\n        let half = this.length / 2;\n        for (let i = 0, len = this.length; i < len; i++) {\n            let n = (i >= len - 1) ? 0 : i + 1;\n            this.link(i, n, stiff);\n            if (len > 4) {\n                let nd = (Math.floor(half / 2)) + 1;\n                let n2 = (i >= len - nd) ? i % len : i + nd;\n                this.link(i, n2, stiff);\n            }\n            if (i <= half - 1) {\n                this.link(i, Math.min(this.length - 1, i + Math.floor(half)));\n            }\n        }\n    }\n    linksToLines() {\n        let gs = [];\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let ln = this._cs[i];\n            gs.push(new Group(this[ln[0]], this[ln[1]]));\n        }\n        return gs;\n    }\n    processEdges() {\n        for (let i = 0, len = this._cs.length; i < len; i++) {\n            let [m, n, d, s] = this._cs[i];\n            World.edgeConstraint(this[m], this[n], d, s);\n        }\n    }\n    processBody(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectPolygon(b1, b2);\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.body.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            hit.vertex.add(cv.$multiply(mr1));\n        }\n    }\n    processParticle(b) {\n        let b1 = this;\n        let b2 = b;\n        let hit = Polygon.hasIntersectCircle(b1, Circle.fromCenter(b, b.radius));\n        if (hit) {\n            let cv = hit.normal.$multiply(hit.dist);\n            let t;\n            let eg = hit.edge;\n            if (Math.abs(eg[0][0] - eg[1][0]) > Math.abs(eg[0][1] - eg[1][1])) {\n                t = (hit.vertex[0] - cv[0] - eg[0][0]) / (eg[1][0] - eg[0][0]);\n            }\n            else {\n                t = (hit.vertex[1] - cv[1] - eg[0][1]) / (eg[1][1] - eg[0][1]);\n            }\n            let lambda = 1 / (t * t + (1 - t) * (1 - t));\n            let m0 = hit.vertex.mass || b2.mass || 1;\n            let m1 = hit.edge[0].body.mass || 1;\n            let mr0 = m0 / (m0 + m1);\n            let mr1 = m1 / (m0 + m1);\n            eg[0].subtract(cv.$multiply(mr0 * (1 - t) * lambda / 2));\n            eg[1].subtract(cv.$multiply(mr0 * t * lambda / 2));\n            let c1 = b.changed.add(cv.$multiply(mr1));\n            b.previous = b.$subtract(c1);\n        }\n    }\n}\n//# sourceMappingURL=Physics.js.map","export * from \"./Canvas\";\nexport * from \"./Create\";\nexport * from \"./Form\";\nexport * from \"./LinearAlgebra\";\nexport * from \"./Num\";\nexport * from \"./Op\";\nexport * from \"./Pt\";\nexport * from \"./Space\";\nexport * from \"./Color\";\nexport * from \"./Util\";\nexport * from \"./Dom\";\nexport * from \"./Svg\";\nexport * from \"./Typography\";\nexport * from \"./Physics\";\n//# sourceMappingURL=_module.js.map"],"sourceRoot":""}