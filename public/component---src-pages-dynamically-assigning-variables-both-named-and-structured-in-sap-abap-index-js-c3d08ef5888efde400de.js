(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{138:function(e,t,n){"use strict";n.r(t),n.d(t,"frontmatter",function(){return d});var a=n(7),r=n.n(a),s=n(172),o=n.n(s),i=n(146),l=n(173),u=n(0),c=function(e){function t(){return e.apply(this,arguments)||this}return r()(t,e),t.prototype.render=function(){return u.createElement("div",null,u.createElement("div",{style:{marginLeft:"auto",marginRight:"auto",maxWidth:Object(i.a)(24),padding:Object(i.a)(1.5)+" "+Object(i.a)(.75)}},u.createElement("h1",null,"Dynamically Assigning and Retrieving Variables- Both Named and Structured in SAP ABAP"),u.createElement("p",{className:"jsPostsDate"},"12 October, 2018"),u.createElement("p",null,"So, let's say you've got some, uh, let's just say for now... ",u.createElement("i",null,"not perfectly written")," ABAP code. Something that looks like this:"),u.createElement(l.a,{sLanguage:"abap",sCode:'" Ack! my eyes!\nTYPES: BEGIN OF gty_zstructure,\n  var1 type i,\n  var2 type i,\n  var3 type i,\n  var4 type i,\n  end of gty_zstructure.\n\nDATA: gv_badcodevar1 TYPE i VALUE 10,\ngv_badcodevar2 TYPE i VALUE 11,\ngv_badcodevar3 TYPE i VALUE 12,\ngv_badcodevar4 TYPE i VALUE 13,\ngs_zstructure type gty_zstructure.\n\ngs_zstructure-var1 = 96.\ngs_zstructure-var2 = 97.\ngs_zstructure-var3 = 98.\ngs_zstructure-var4 = 99.'}),u.createElement("br",null),u.createElement("p",null,"Yep. Super repetitive variable names."),u.createElement("p",null,"We don't know why a developer wrote code like that, and we don't know why he or she wouldn't utilize a structure or table, but we don't really care. ",u.createElement(o.a,{text:":wink:"})),u.createElement("p",null,"Let's assume we've gotta make a modification to such a program and we need to loop through all those variables. Instead of otherwise copying a similiar pattern of all those variable names which would be horrible, we can apply dynamic variable assignment by building a string that is identical to the variables actual name in the ABAP source code, and reading that into a field symbol."),u.createElement("p",null,"Below are copy/pastable examples showing how to do this for both plain variables and components of a structure you may want to snag."),u.createElement("h2",null,"Dynamic Variable Assignment for Global Variables"),u.createElement(l.a,{sLanguage:"abap",sCode:"\" Just to demonstrate the code sample, we'll use these variables which are all integer type with various values, but this process works for any variable type\nDATA: gv_badcodevar1     TYPE i VALUE 10,\n      gv_badcodevar2     TYPE i VALUE 11,\n      gv_badcodevar3     TYPE i VALUE 12,\n      gv_badcodevar4     TYPE i VALUE 13,\n      gv_sy_index_string TYPE string,\n      gv_variable_name   TYPE string.\n\nFIELD-SYMBOLS: <fs_variable_value> TYPE any.\n\nDO 4 TIMES. \" (or however many times you need to build a string for such patterned variables)\n  gv_sy_index_string = sy-index. \" convert the sy-index to string type so we can use it in the CONCATENATE statement\n  CONCATENATE 'GV_BADCODEVAR' gv_sy_index_string INTO gv_variable_name. \" build variable name\n  ASSIGN (gv_variable_name) TO <fs_variable_value>.  \" the parenthesis, without any spaces from the variable, are required here otherwise this dynamic method wont work!!!!\n  WRITE: / gv_variable_name, ' has a value of ', <fs_variable_value>. \" should be 'GV_BADCODEVAR1 has a value of 10' and so on\nENDDO."}),u.createElement("h2",null,"Dynamic Variable Assignment for Components of Line Structure Variables"),u.createElement(l.a,{sLanguage:"abap",sCode:"\" Just to demonstrate the code sample, we'll use this simple structure variable (again, it will work with any structure types)\nTYPES: BEGIN OF gty_zstructure,\n         var1 TYPE i,\n         var2 TYPE i,\n         var3 TYPE i,\n         var4 TYPE i,\n       END OF gty_zstructure.\n\nDATA:\n  gs_zstructure      TYPE gty_zstructure,\n  gv_sy_index_string TYPE string,\n  gv_component_name  TYPE string.\n\ngs_zstructure-var1 = 96.\ngs_zstructure-var2 = 97.\ngs_zstructure-var3 = 98.\ngs_zstructure-var4 = 99.\n\nFIELD-SYMBOLS: <fs_component_value> TYPE any.\n\nDO 4 TIMES. \" (or however many times you need to build a string for such patterned variables)\n  gv_sy_index_string = sy-index. \" convert the sy-index to string type so we can use it in the CONCATENATE statement\n  CONCATENATE 'VAR' gv_sy_index_string INTO gv_component_name. \" build variable name\n  ASSIGN COMPONENT gv_component_name OF STRUCTURE gs_zstructure TO <fs_component_value>.\n  WRITE: / 'Component ', gv_component_name, ' of structure gs_zstructure has a value of ', <fs_component_value>. \" should be 'GV_BADCODEVAR1 has a value of 10' and so on\nENDDO."}),u.createElement("p",null,"And that's it!"),u.createElement("p",null,"Cheers! ",u.createElement(o.a,{text:":beer:"})),u.createElement("p",null,"Chris")))},t}(u.Component),d={title:"Dynamically Assigning and Retrieving Variables- Both Named and Structured in SAP ABAP",date:"2018-10-12",draft:!1};t.default=c},146:function(e,t,n){"use strict";n.d(t,"a",function(){return l}),n.d(t,"b",function(){return u});var a=n(151),r=n.n(a),s=n(152),o=n.n(s);o.a.overrideThemeStyles=function(){return{"a.gatsby-resp-image-link":{boxShadow:"none"}}},delete o.a.googleFonts;var i=new r.a(o.a);var l=i.rhythm,u=i.scale},173:function(e,t,n){"use strict";n(158);var a=n(7),r=n.n(a),s=n(48),o=n.n(s),i=n(0),l=n.n(i),u=n(193),c=n(194),d=n.n(c),m=n(202),v=n(203),g=(n(208),{padding:"1em",margin:".5em 0",overflow:"auto",borderRadius:"0.3em"}),p=function(e){function t(){var t;return(t=e.call(this)||this).state={bCopied:!1},t.notify=t.notify.bind(o()(o()(t))),t}r()(t,e);var n=t.prototype;return n.notify=function(){v.toast.info("Code copied to clipboard!",{className:"custom-toast",position:v.toast.POSITION.BOTTOM_CENTER})},n.render=function(){return l.a.createElement("div",{style:{position:"relative"}},l.a.createElement(d.a,{language:this.props.sLanguage,style:m.monokaiSublime,customStyle:g},this.props.sCode),l.a.createElement(u.CopyToClipboard,{text:this.props.sCode,onCopy:this.notify},l.a.createElement("button",{className:"copyButton"},l.a.createElement("span",null,l.a.createElement("img",{width:"25px",alt:"Copy icon",style:{marginBottom:"0px"},src:"https://chrisfrew-in.ams3.digitaloceanspaces.com/copy.svg"})))),l.a.createElement(v.ToastContainer,{autoClose:2e3,hideProgressBar:!0,pauseOnHover:!1,closeButton:!1}))},t}(l.a.Component);t.a=p}}]);
//# sourceMappingURL=component---src-pages-dynamically-assigning-variables-both-named-and-structured-in-sap-abap-index-js-c3d08ef5888efde400de.js.map