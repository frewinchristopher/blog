{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack, Web Development, ABAP, SAPUI5, Blockchain, Machine Learning, & Natural Language Processing Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"f31dadc5-0e90-5db4-b3ec-6545da1f9766","excerpt":"Originally published on the  Siren Apparel Press on Medium A Detailed Tutorial: Shopify‚Äôs Storefront API + React + Redux E-commerce for all‚Ä¶","html":"<p><em>Originally published on the <a href=\"https://medium.com/siren-apparel-press/adding-shopifys-storefront-api-to-an-existing-react-app-with-react-redux-ea442bd7543\">Siren Apparel Press on Medium</a></em></p>\n<h1>A Detailed Tutorial: Shopify‚Äôs Storefront API + React + Redux</h1>\n<h2>E-commerce for all! (‚Ä¶websites, that is üòÑ)</h2>\n<p><em>Written by *<a href=\"https://medium.com/@frewin.christopher\">Chris</a></em> on Wednesday,\nAugust 22nd, 2018*</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*HU6qT6c4a54QX-mnuPMj7w.jpeg\">\n<span class=\"figcaption_hack\">Siren Apparel‚Äôs flagship shirt ‚Äî Hydrant Removal.</span></p>\n<h4>Background and Motivation</h4>\n<p>So the motivation here was pretty simple. I wanted my users to be able to\nbrowse, search, and select products directly on my custom domain without having\nto go to Shopify.</p>\n<p>The secondary motivation is that I‚Äôd much rather have my own codebase for a\nwebsite than use one of Shopify‚Äôs factory templates. No offence Shopify team!\nThe templates are modern and clean, but they are rather basic.</p>\n<p>So this is the best of both worlds ‚Äî my custom React site (already built and\nonline üòÑ), with the added API and checkout process of Shopify!</p>\n<p>By the end of this tutorial, you‚Äôll be able to add your Shopify products on\n<em>any</em> page of your site. The only part of the shopping process that will occur\non Shopify is when the user clicks ‚ÄòCheckout‚Äô.</p>\n<p>The motivation specifically for writing here on Medium was simply that I\ncouldn‚Äôt find a tutorial on this process myself‚Äî so I decided to make one\nmyself!</p>\n<p>I‚Äôve been a professional developer for 4 years now, and programming for 7. I‚Äôve\nworked in tech stacks from old-school Fortran and Perl to React, Javascript, and\nNodejs.</p>\n<p>Siren Apparel is one of my side project / startup / maker company that I‚Äôve run\nfor 5 years now, and we‚Äôve donated to 5 different police and fire departments.</p>\n<p>Let‚Äôs finally get started with this tutorial.</p>\n<h4>Shopify‚Äôs Storefront API</h4>\n<p>The wonderful folks at Shopify have put together the <a href=\"https://help.shopify.com/en/api/custom-storefronts/storefront-api\">Storefront\nAPI</a>. With\nthe Storefront API, you can create React components to add product pictures,\nproduct variations, product sizes, a cart, and ‚Äòadd to cart‚Äô and ‚Äòcheckout‚Äô\nbuttons into your own, non-Shopify site.</p>\n<p>Note that this tutorial is NOT about <a href=\"https://github.com/Shopify/polaris\">Shopify\nPolaris</a>, which is used to create components\nin React for Shopify store management itself.</p>\n<h4>Getting Started: <code class=\"language-text\">react-js-buy</code> Repository</h4>\n<p>Take a look at <a href=\"https://github.com/Shopify/storefront-api-examples/tree/master/react-js-buy\">this React example built by the Shopify\nteam</a>.\nMost of the code in this walkthrough tutorial comes from that repository.</p>\n<p>‚Ä¶Did you take a look? Good!</p>\n<p>Now we‚Äôre going to hop right into code! Head to your React site‚Äôs root folder\nand install the <code class=\"language-text\">shopify-buy</code> module via the terminal:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">cd my-awesome-react-node-project/\nnpm install --save shopify-buy</code></pre>\n      </div>\n<p>(or <code class=\"language-text\">yarn add shopify-buy</code> if you prefer <code class=\"language-text\">yarn</code>)</p>\n<p>Then, in your frontend <code class=\"language-text\">index.js</code>, (note: NOT <code class=\"language-text\">App.js</code>!) you will need to import\n<code class=\"language-text\">Client</code> from the JS Buy SDK:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import Client from &#39;shopify-buy&#39;;</code></pre>\n      </div>\n<p>Then add the following configuration object above the <code class=\"language-text\">ReactDOM.render()</code>call:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">const client = Client.buildClient({\n    storefrontAccessToken: &#39;your-access-token&#39;,\n    domain: &#39;your-shopify-url.myshopify.com&#39;\n});</code></pre>\n      </div>\n<p>That‚Äôs it for <code class=\"language-text\">index.js</code> for now ‚Äî we‚Äôll come back to it soon.</p>\n<p>Now we‚Äôre going to add in all the components needed for a smooth shopping and\ncheckout experience. Copy all the components from the <code class=\"language-text\">react-js-buy</code> repository:</p>\n<p><code class=\"language-text\">Cart.js</code></p>\n<p><code class=\"language-text\">LineItem.js</code></p>\n<p><code class=\"language-text\">Product.js</code></p>\n<p><code class=\"language-text\">Products.js</code></p>\n<p><code class=\"language-text\">VariantSelector.js</code></p>\n<p>We will paste these components into a<code class=\"language-text\">components/shopify/</code> folder in your <code class=\"language-text\">src/</code>\nfolder. You could put these component files anywhere else in the <code class=\"language-text\">src/</code> folder,\nif you wished. The rest of the tutorial assumes you have put them in\n<code class=\"language-text\">components/shopify/</code> .</p>\n<h4>Modifying App.js</h4>\n<p><code class=\"language-text\">App.js</code> will need extensive changes. First, import that Cart component you just\ncopied into your own project:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import Cart from &#39;./components/shopify/Cart&#39;;</code></pre>\n      </div>\n<p>If your <code class=\"language-text\">App.js</code> component was stateless, like mine, you should be safe copying\nthis entire <code class=\"language-text\">constructor()</code> function:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">constructor() {\n    super();\n    this.updateQuantityInCart = this.updateQuantityInCart.bind(this);\n    this.removeLineItemInCart = this.removeLineItemInCart.bind(this);\n    this.handleCartClose = this.handleCartClose.bind(this);\n}</code></pre>\n      </div>\n<p>if you already have state, copy only those <code class=\"language-text\">bind</code> lines. They are event handler\nfunctions that the Shopify cart needs to function properly.</p>\n<p>‚ÄúBut what about state for the cart!?‚Äù</p>\n<p>You may ask; or:</p>\n<p>‚ÄúWhat about defining those four methods for the cart!?‚Äù</p>\n<p>Indeed, that‚Äôs coming, but not yet! üòÑ</p>\n<p>You can then append the <code class=\"language-text\">&lt;Cart/&gt;</code> component to the bottom of your render()\nfunction, before the ending div. In my opinion, the cart should be accessible\nanywhere in your app. I think it makes sense then to put the <code class=\"language-text\">&lt;Cart/&gt;</code> component\nin the root component of your app:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">return (\n&lt;div&gt;\n...\n&lt;Cart\n    checkout={this.state.checkout}\n    isCartOpen={this.state.isCartOpen}\n    handleCartClose={this.handleCartClose}\n    updateQuantityInCart={this.updateQuantityInCart}\n    removeLineItemInCart={this.removeLineItemInCart}\n /&gt;\n&lt;/div&gt;\n);</code></pre>\n      </div>\n<p>So, you may have noticed I didn‚Äôt include any code on the event handlers for the\ncart yet. Additionally, I didn‚Äôt address the lack of state components for the\ncart in App.js.</p>\n<p>Well, about halfway through this project, I realized my products component was\nnot in my <code class=\"language-text\">App.js</code> file.</p>\n<p>Instead, it was buried about three children components down.</p>\n<p>So instead of passing products three levels down to children, and then function\nhandlers all the way back up‚Ä¶</p>\n<p>I decided to use‚Ä¶</p>\n<p><strong>üò± Redux!!! üò±</strong></p>\n<p>Ugh! I know, I know, Redux, while not being very difficult, is a pain in the\n%*$! to wire up initially with all the boilerplate required. But, if you are a\ndeveloper working on an E-commerce store or an E-commerce store owner, think of\nit this way: Redux will enable you to access the state of the cart from any\ncomponent or page in our app.</p>\n<p>This ability will be essential as Siren Apparel expands and we develop more\nproducts. As we create more products, I‚Äôll make a seperate dedicated store page\nwith all products, while leaving just a handful of featured products on the\nhomepage.</p>\n<p>The ability to access the cart is essential if a user shops around a bit, reads\nsome stories or info about Siren Apparel, and <em>then</em> decides to checkout. It\ndoesn‚Äôt matter how much they navigate around, nothing from their cart will be\nlost!</p>\n<p>So, in short, I decided it‚Äôs probably better to implement Redux now while the\ncodebase for <a href=\"https://sirenapparel.us/\">our site</a> isn‚Äôt too large.</p>\n<h4>Implementing Redux for Shopify Buy SDK With Bare Minimum Boilerplate</h4>\n<p>Install NPM packages <code class=\"language-text\">redux</code> and <code class=\"language-text\">react-redux</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">npm install --save redux react-redux</code></pre>\n      </div>\n<p>In <code class=\"language-text\">index.js</code> , import <code class=\"language-text\">Provider</code> from <code class=\"language-text\">react-redux</code>and your <code class=\"language-text\">store</code> from\n<code class=\"language-text\">./store</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import { Provider } from &#39;react-redux&#39;;\nimport store from &#39;./store&#39;;</code></pre>\n      </div>\n<p>Wrap the <code class=\"language-text\">&lt;Provider&gt;</code> component with the passed <code class=\"language-text\">store</code> around your<code class=\"language-text\">&lt;App&gt;</code>in\n<code class=\"language-text\">index.js</code>to hook up your App to your Redux store:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">ReactDOM.render(\n&lt;Provider store={store}&gt;\n    &lt;IntlProvider locale={locale} messages={flattenMessages(messages[locale.substring(0, 2)])}&gt;\n      &lt;App locale={locale}/&gt;\n    &lt;/IntlProvider&gt;\n &lt;/Provider&gt;,\ndocument.getElementById(&#39;root&#39;)\n);</code></pre>\n      </div>\n<p>Note that I also have a <code class=\"language-text\">&lt;IntlProvider&gt;</code>, but that‚Äôs in <a href=\"https://medium.com/@sirenapparel/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2\">a different post about\nhow I applied internationalization and localization to dynamically render the\ncontent on Siren Apparel‚Äôs\nsite.</a>\nA different story for a different day.</p>\n<p>Now of course we haven‚Äôt made a <code class=\"language-text\">./store.js</code> file yet. Create your store in\n<code class=\"language-text\">store.js</code>in the <code class=\"language-text\">src/</code> root and put this in it:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import {createStore} from &#39;redux&#39;;\nimport reducer from &#39;./reducers/cart&#39;; \n\nexport default createStore(reducer);</code></pre>\n      </div>\n<p>Create your reducers file in <code class=\"language-text\">src/reducers/cart.js</code>and paste this code:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">// initial state\nconst initState = {\n  isCartOpen: false,\n  checkout: { lineItems: [] },\n  products: [],\n  shop: {}\n}\n\n// actions\nconst CLIENT_CREATED = &#39;CLIENT_CREATED&#39;\nconst PRODUCTS_FOUND = &#39;PRODUCTS_FOUND&#39;\nconst CHECKOUT_FOUND = &#39;CHECKOUT_FOUND&#39;\nconst SHOP_FOUND = &#39;SHOP_FOUND&#39;\nconst ADD_VARIANT_TO_CART = &#39;ADD_VARIANT_TO_CART&#39;\nconst UPDATE_QUANTITY_IN_CART = &#39;UPDATE_QUANTITY_IN_CART&#39;\nconst REMOVE_LINE_ITEM_IN_CART = &#39;REMOVE_LINE_ITEM_IN_CART&#39;\nconst OPEN_CART = &#39;OPEN_CART&#39;\nconst CLOSE_CART = &#39;CLOSE_CART&#39;\n\n// reducers\nexport default (state = initState, action) =&gt; {\n  switch (action.type) {\n    case CLIENT_CREATED:\n      return {...state, client: action.payload}\n    case PRODUCTS_FOUND:\n      return {...state, products: action.payload}\n    case CHECKOUT_FOUND:\n      return {...state, checkout: action.payload}\n    case SHOP_FOUND:\n      return {...state, shop: action.payload}\n    case ADD_VARIANT_TO_CART:\n      return {...state, isCartOpen: action.payload.isCartOpen, checkout: action.payload.checkout}\n    case UPDATE_QUANTITY_IN_CART:\n      return {...state, checkout: action.payload.checkout}\n    case REMOVE_LINE_ITEM_IN_CART:\n      return {...state, checkout: action.payload.checkout}\n    case OPEN_CART:\n      return {...state, isCartOpen: true}\n    case CLOSE_CART:\n      return {...state, isCartOpen: false}\n    default:\n      return state\n  }\n}</code></pre>\n      </div>\n<p>Don‚Äôt worry, I‚Äôm not going to just post this big reducer and not discuss what is\ngoing on; we‚Äôll get to each event! Note a few things:</p>\n<p>We take the initial state from what the state is written as in the Shopify\nGitHub example and put it in our initState, namely the following four parts of\nstate:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">isCartOpen: false,\ncheckout: { lineItems: [] },\nproducts: [],\nshop: {}</code></pre>\n      </div>\n<p>However, in my implementation, I also create a <code class=\"language-text\">client</code> part of the state. I\ncall the <code class=\"language-text\">createClient()</code> function once and then immediately set it in the Redux\nstate in <code class=\"language-text\">index.js</code> . So let‚Äôs head into <code class=\"language-text\">index.js</code>:</p>\n<h4>Back to index.js</h4>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">const client = Client.buildClient({\n  storefrontAccessToken: &#39;your-shopify-token&#39;,\n  domain: &#39;your-shopify-url.myshopify.com&#39;\n});\nstore.dispatch({type: &#39;CLIENT_CREATED&#39;, payload: client});</code></pre>\n      </div>\n<p>In the Shopify buy SDK example, there are a few async calls to get information\nabout the products and store information in React‚Äôs <code class=\"language-text\">componentWillMount()</code>\nfunction. That code looks like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">componentWillMount() {\n    this.props.client.checkout.create().then((res) =&gt; {\n      this.setState({\n        checkout: res,\n      });\n    });\n\n    this.props.client.product.fetchAll().then((res) =&gt; {\n      this.setState({\n        products: res,\n      });\n    });\n\n    this.props.client.shop.fetchInfo().then((res) =&gt; {\n      this.setState({\n        shop: res,\n      });\n    });\n  }</code></pre>\n      </div>\n<p>I opted to do that instead as far upstream as possible, directly in <code class=\"language-text\">index.js</code>.\nThen, I issued a corresponding event when each part of the response has been\nreceived:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">// buildClient() is synchronous, so we can call all these after!\nclient.product.fetchAll().then((res) =&gt; {\n  store.dispatch({type: &#39;PRODUCTS_FOUND&#39;, payload: res});\n});\nclient.checkout.create().then((res) =&gt; {\n  store.dispatch({type: &#39;CHECKOUT_FOUND&#39;, payload: res});\n});\nclient.shop.fetchInfo().then((res) =&gt; {\n  store.dispatch({type: &#39;SHOP_FOUND&#39;, payload: res});\n});</code></pre>\n      </div>\n<p>By now the reducer is created, and the initialization of the Shopify API\n<code class=\"language-text\">client</code> is complete all for<code class=\"language-text\">index.js</code>.</p>\n<h4>Back to <code class=\"language-text\">App.js</code></h4>\n<p>Now in <code class=\"language-text\">App.js</code>, wire up Redux‚Äôs store to the App state:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import { connect } from &#39;react-redux&#39;;</code></pre>\n      </div>\n<p>and don‚Äôt forget to import the store as well:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import store from &#39;./store&#39;;</code></pre>\n      </div>\n<p>At the bottom where <code class=\"language-text\">export default App</code> should be, modify it to this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">export default connect((state) =&gt; state)(App);</code></pre>\n      </div>\n<p>This connects the redux state to the <code class=\"language-text\">App</code> component.</p>\n<p>Now in the <code class=\"language-text\">render()</code> function we are able to access the Redux‚Äôs state with\nRedux‚Äôs <code class=\"language-text\">getState()</code> (as apposed to using vanilla react‚Äôs <code class=\"language-text\">this.state</code>):</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">render() {\n    ...    \n    const state = store.getState();\n}</code></pre>\n      </div>\n<h4>Finally: the Event Handlers (Still in App.js)</h4>\n<p>From above, you know that there are only three event handlers that we need in\n<code class=\"language-text\">App.js</code>, because the cart uses only three: <code class=\"language-text\">updateQuantityInCart</code>,\n<code class=\"language-text\">removeLineItemInCart</code>, and <code class=\"language-text\">handleCartClose</code>. The original cart event handlers\nfrom the example GitHub repository, which used local component state looked like\nthis:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">updateQuantityInCart(lineItemId, quantity) {\n  const checkoutId = this.state.checkout.id\n  const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n\nreturn this.props.client.checkout.updateLineItems(checkoutId, lineItemsToUpdate).then(res =&gt; {\n    this.setState({\n      checkout: res,\n    });\n  });\n}\n\nremoveLineItemInCart(lineItemId) {\n  const checkoutId = this.state.checkout.id\n\nreturn this.props.client.checkout.removeLineItems(checkoutId, [lineItemId]).then(res =&gt; {\n    this.setState({\n      checkout: res,\n    });\n  });\n}\n\nhandleCartClose() {\n  this.setState({\n    isCartOpen: false,\n  });\n}</code></pre>\n      </div>\n<p>We can refactor them to dispatch events to the Redux store as follows:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">updateQuantityInCart(lineItemId, quantity) {\n    const state = store.getState(); // state from redux store\n    const checkoutId = state.checkout.id\n    const lineItemsToUpdate = [{id: lineItemId, quantity: parseInt(quantity, 10)}]\n    state.client.checkout.updateLineItems(checkoutId, lineItemsToUpdate).then(res =&gt; {\n      store.dispatch({type: &#39;UPDATE_QUANTITY_IN_CART&#39;, payload: {checkout: res}});\n    });\n}\nremoveLineItemInCart(lineItemId) {\n    const state = store.getState(); // state from redux store\n    const checkoutId = state.checkout.id\n    state.client.checkout.removeLineItems(checkoutId, [lineItemId]).then(res =&gt; {\n      store.dispatch({type: &#39;REMOVE_LINE_ITEM_IN_CART&#39;, payload: {checkout: res}});\n    });\n}\nhandleCartClose() {\n    store.dispatch({type: &#39;CLOSE_CART&#39;});\n}\nhandleCartOpen() {\n    store.dispatch({type: &#39;OPEN_CART&#39;});\n}</code></pre>\n      </div>\n<p>You can</p>\n<p>If you were following along, I already mentioned that I added my own\n<code class=\"language-text\">handleCartOpen</code> function, because I pass that function down as a prop to my\n<code class=\"language-text\">&lt;Nav/&gt;</code> component, so a user is able to open and close the cart from a link in\nthe nav. At a future time, I could move that function to the Nav itself instead\nof passing it as a prop, since of course the Redux store will also be avaliable\nthere!</p>\n<h4>Finally Add that <Products/> Component!</h4>\n<p>So, you‚Äôve got a basic store maybe with some simple <code class=\"language-text\">href</code>‚Äôs that link to the\ncorresponding product on your Shopify store? Ha! Throw those out, and replace\nthem with your brand spankin‚Äô new <code class=\"language-text\">&lt;Products/&gt;</code> component!</p>\n<p>First, import the component into wherever your store markup should be (remember,\nin my code base I‚Äôve put the shopify example components in a folder called\n<code class=\"language-text\">shopify/</code>)</p>\n<p>This will be where ever your products currently are. (In<a href=\"https://github.com/frewinchristopher/react-redux-shopify-storefront-api-example\"> the boilerplate\nrepository</a>\nI made, I put this in the <code class=\"language-text\">GenericProductsPage</code> component, to signal that this\ncode could be applied to any page that has a products section):</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import Products from &#39;./shopify/Products&#39;;</code></pre>\n      </div>\n<p>Now finally, that past 15‚Äì20 minutes of redux boilerplate code edits pays off:\nwe can grab the <code class=\"language-text\">products</code> component of our state ‚Äî not from a vanilla React\nstate passed down over and over again through props ‚Äî but through grabbing it in\na neat one liner <code class=\"language-text\">const state = store.getState();</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">render () {\n    const state = store.getState(); // state from redux store\n    let oProducts = &lt;Products\n      products={state.products}\n      client={state.client}\n      addVariantToCart={this.addVariantToCart}\n    /&gt;;</code></pre>\n      </div>\n<p>Don‚Äôt forget to drop the component itself into where it should go in your\n<code class=\"language-text\">render()</code> function. For me, that location was buried in Bootstrap style classes\nand HTML:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">...\n&lt;div className=&quot;service-content-one&quot;&gt;\n    &lt;div className=&quot;row&quot;&gt;\n        &lt;Products/&gt;\n    &lt;/div&gt;{/*/.row*/}\n&lt;/div&gt;{/*/.service-content-one*/}\n...</code></pre>\n      </div>\n<p>Finally, we will need a single event function <code class=\"language-text\">addVariantToCart</code> for the cart to\nwork with this products component. Again, for reference, here is the original,\nvanilla React local <code class=\"language-text\">state</code> version of <code class=\"language-text\">addVariantToCar</code>(again, from the shopify\nexample repository):</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">addVariantToCart(variantId, quantity){\n  this.setState({\n    isCartOpen: true,\n  });\n\nconst lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n  const checkoutId = this.state.checkout.id\n\nreturn this.props.client.checkout.addLineItems(checkoutId, lineItemsToAdd).then(res =&gt; {\n    this.setState({\n      checkout: res,\n    });\n  });\n}</code></pre>\n      </div>\n<p>and the new, Redux-friendly <code class=\"language-text\">store.dispatch()</code> version:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">addVariantToCart(variantId, quantity) {\n    const state = store.getState(); // state from redux store\n    const lineItemsToAdd = [{variantId, quantity: parseInt(quantity, 10)}]\n    const checkoutId = state.checkout.id\n    state.client.checkout.addLineItems(checkoutId, lineItemsToAdd).then(res =&gt; {\n      store.dispatch({type: &#39;ADD_VARIANT_TO_CART&#39;, payload: {isCartOpen: true, checkout: res}});\n    });\n}</code></pre>\n      </div>\n<p>which is of course the one we will use üòÑ</p>\n<p>don‚Äôt forget to bind it in the constructor:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">this.addVariantToCart = this.addVariantToCart.bind(this);</code></pre>\n      </div>\n<p>Don‚Äôt forget, you‚Äôll need to connect this component to the store like you did\n<code class=\"language-text\">App.js</code> , and import the store:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import { connect } from &#39;react-redux&#39;\nimport store from &#39;../store&#39;;</code></pre>\n      </div>\n<p>at the top, and (assuming the component where you put the Shopify <code class=\"language-text\">Product</code>\ncomponent name is <code class=\"language-text\">GenericProductPage</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">export default connect((state) =&gt; state)(GenericProductsPage);</code></pre>\n      </div>\n<p>at the bottom.</p>\n<p>Great! Now, no matter how deep in components or where ever your products\ncomponent is declared, it can communicate with the cart‚Äôs state!</p>\n<h4>Final BONUS Example: Cart in Your Header or Nav</h4>\n<p>If you want to have a ‚ÄòCart‚Äô button in your header / nav, add this button in\nyour Nav component‚Äôs render function (again, an example from my current site,\nwhich has Bootstrap styles ‚Äî a very simple version is in the <a href=\"https://github.com/frewinchristopher/react-redux-shopify-storefront-api-example\">boilerplate\nexample</a>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">&lt;div className=&quot;App__view-cart-wrapper&quot;&gt;\n&lt;button className=&quot;App__view-cart&quot; onClick={this.props.handleCartOpen}&gt;\n    Cart\n    &lt;/button&gt;\n&lt;/div&gt;</code></pre>\n      </div>\n<p>where <code class=\"language-text\">handleCartOpen</code> is a new handler method you‚Äôll have to add to <code class=\"language-text\">App.js</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">this.handleCartOpen = this.handleCartOpen.bind(this);</code></pre>\n      </div>\n<p>in the constructor. Then when you are referencing your Nav component in App.js\n(or wherever you place your Nav) you pass the function handler:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">&lt;Nav handleCartOpen={this.handleCartOpen}/&gt;</code></pre>\n      </div>\n<h4>Styling Component(s)</h4>\n<p>I relied on the CSS file, <code class=\"language-text\">app.css</code>, located in the<code class=\"language-text\">shared/</code> folder in th e\n<code class=\"language-text\">storefront-api-example</code> repository (you can‚Äôt miss it, it‚Äôs the only file in\n<code class=\"language-text\">shared/</code> ! Make sure to copy that into your <code class=\"language-text\">styles/</code> folder or wherever it\nneeds to be and include it in your <code class=\"language-text\">index.js</code>file. In my <code class=\"language-text\">index.js</code> it looks\nlike this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">import &#39;./styles/shopify.css&#39;;</code></pre>\n      </div>\n<p>Since I renamed the <code class=\"language-text\">app.css</code> which was in the Shopify example repository to\n<code class=\"language-text\">shopify.css</code> , and put it folder <code class=\"language-text\">styles</code>. This convention is also used in the\nboilerplate repository code.</p>\n<p>From here it‚Äôs pretty easy to identify where exactly in <code class=\"language-text\">shopify.css</code> the\ndefault bright blue color for the buttons is defined, and so on. I‚Äôm going to\nsave detailed CSS customization for you to handle. üòÉ</p>\n<p>But who knows, maybe I‚Äôll post on that eventually ‚Äî but I find the styles from\nShopify pretty good and easy enough to modify.</p>\n<h4>Takeaways</h4>\n<p>In my opinion, this is a perfect (non-todo list üòú) use of Redux. Redux cleanly\norganizes the event functions and state of the Shopify cart and makes it easy to\naccess the cart‚Äôs state from any other component. This is much easier to\nmaintain than passing pieces of state to children and using multiple event\nhandlers to pass events back up to parent functions all over a React app.</p>\n<p>As shown as an example in the tutorial, the cart‚Äôs state is accessed easily in\nthe nav component and the shop section of the front page. I‚Äôll also be able to\neasily add it to a sort of ‚Äòfeatured‚Äô product section as well, once we‚Äôre ready\nfor that.</p>\n<h4>Find the Code</h4>\n<p>A boilerplate repository of this implementation <a href=\"https://github.com/frewinchristopher/react-redux-shopify-storefront-api-example\">can be found\nhere</a>.\nIt is a near blank create-react-app app, but with all the changes of this\ntutorial implemented in <code class=\"language-text\">index.js</code> and <code class=\"language-text\">App.js</code> , as well as a super basic\n<code class=\"language-text\">GenericStorePage</code> and <code class=\"language-text\">Nav</code> components.</p>\n<p>I built the code on the repo while re-reading and updating my own tutorial here,\nto make sure this tutorial makes sense.</p>\n<p>Because I am crazy üòú, Siren Apparel‚Äôs website is all open-sourced. So if you\nwant to fool around with my implementation, <a href=\"https://github.com/frewinchristopher/sirenapparel.us\">check out the\nrespository!</a></p>\n<p>I hope you enjoyed this tutorial! If anything isn‚Äôt clear or just plain not\nworking, let me know! I‚Äôll try to assist you!</p>\n<p>Thanks to <a href=\"http://css-snippets.com/author/lisa/\">Lisa Catalano</a> at CSS-Snippets\nfor <a href=\"http://css-snippets.com/simple-horizontal-navigation/#code\">the simple Nav\nexample</a>!</p>\n<p>Cheers! üç∫</p>\n<p>Chris</p>\n<ul>\n<li><a href=\"https://medium.com/tag/react?source=post\">React</a></li>\n<li><a href=\"https://medium.com/tag/redux?source=post\">Redux</a></li>\n<li><a href=\"https://medium.com/tag/shopify?source=post\">Shopify</a></li>\n<li><a href=\"https://medium.com/tag/shopify-buy-api?source=post\">Shopify Buy Api</a></li>\n<li><a href=\"https://medium.com/tag/startup?source=post\">Startup</a></li>\n</ul>\n<h3><a href=\"https://medium.com/@sirenapparel\">Siren Apparel</a></h3>\n<h3><a href=\"https://medium.com/siren-apparel-press?source=footer_card\">Siren Apparel Press</a></h3>\n<p>The official publication of all things Siren Apparel.</p>","frontmatter":{"title":"","date":null,"draft":null}}},"pageContext":{"slug":"/a-detailed-tutorial-shopify-storefront-apireact-redux/","prev":{"fields":{"slug":"/warn-sap-users-of-locked-objects-then-kill-their-session/"},"frontmatter":{"date":"09 May, 2018","title":"Warn SAP Users of Locked Objects Then Kill Their Session","draft":false,"link":"https://chrisfrew.in/warn-sap-users-of-locked-objects-then-kill-their-session/","relativeLink":"/warn-sap-users-of-locked-objects-then-kill-their-session/"}},"next":null}}