{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"2e99bd4e-6ed4-55d1-bafa-a8bd9649b2d5","excerpt":"This post is also published on Medium, if you prefer to read there, but was posted here first ðŸ˜„. Results First, Technical Stuff Later Ifâ€¦","html":"<p>This post is also published on Medium, if you prefer to read there, but was posted here first ðŸ˜„.</p>\n<h1>Results First, Technical Stuff Later</h1>\n<p>If youâ€™re just trying to find the invader site, <a href=\"https://chrisfrew.in/invaders\">that can be found here.</a></p>\n<h1>Big Post Warning!</h1>\n<p>Warning: This is gonna be a big post, with lots of thought processes and code snippets. I hope you enjoy!</p>\n<h1>Processing and P5.JS</h1>\n<p>I got into the whole Processing universe through a few generative art courses on Skillshare.  If you donâ€™t know yet, Processing is a Java library (I believe there is a Python library too) that makes drawing and creating both fixed and animated digital art very easy. To get started, you need only to download the IDE and fill out a few methods, which could look as simple as:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n      </div>\n<p>and already youâ€™ll be getting generative animated art like this:</p>\n<p><img src=\"./scircles.gif\" alt=\"Gif of randomly colored circles popping up all over the screen\"></p>\n<p>of course, you can build out and develop as complex art as you want, <a href=\"\">like these examples.</a></p>\n<h1>Motivation for this Data Challenge</h1>\n<p>So, after learning the very basics about Processing and working through a few examples on Skillshare, I started exploring otherâ€™s work, also mostly on Skillshare. The nerd that I am, I took a particular liking to the â€˜Invadersâ€™ work by. I then saw he was originally inspired by </p>\n<p>I realized I could generate these in a very ordered fashion, instead using processingâ€™s <code class=\"language-text\">random()</code> method. By just using <code class=\"language-text\">random()</code> you arenâ€™t garunteed that all the drawn invaders are unique. And so this <strong>Data Challenge!</strong><sup>TM</sup> began! I started by modifying, but then I started getting frusterated with the Java syntax entirely. Itâ€™s been over 10 years since I coded any real Java, and that was my Junior year in Highschoolâ€¦ so yeah, I was looking for (hopefully) a Javascript possibility. And what do you know, there <em>is</em> a JavaScript library for processing!</p>\n<p>It just so happens that completely by chance, the very cover animation on the home page of my blog, which you may or may not know depending on how often you visit the blog, <em>is</em> a p5.js animation! I didnâ€™t make the connection at first because I originally found that library through <a href=\"https://news.ycombinator.com/item?id=17716542\">this â€˜Show HNâ€™ post showcasing the library back at the end of August, 2018</a>, and that â€˜circles bouncing around in a containerâ€™ example is a pretty generic example which I just lightly refactored for my site. Plus, the names P5 and Processing just never connected in my mind!</p>\n<p>Then I said, forget that, I wanna do this in JavaScript. Cuz, cmon, who doesnâ€™t do things in Javascript these days? ðŸ˜‚ (Yes, a bit of sarcasm, but honestlyâ€¦ itâ€™s been fairly true - weâ€™ll see what happens in 2019) Anyway, the REAL reason I wanted to do it in Javascript was to get more practice with P5.js. Iâ€™ll likely be using in the future for even more projects!</p>\n<h2>The Math</h2>\n<p>This is lightly discussed directly on the Invaders page, but Iâ€™ll go into detail here.</p>\n<p>A helpful analogy for me was to picture this array of 15 as 15 switches next to eachother, each being switch on or off at random, until you have every possible combination. In simplist terms, this can be realized as a binary list of length 15.</p>\n<p>Iâ€™ll admit, I struggled with this in Python. I jumped immediately to the <code class=\"language-text\">itertools</code> library, tryingt to work some magic with <code class=\"language-text\">permutations</code> and/or <code class=\"language-text\">combinations</code>, but Python kept thinking it should count each 0 in the list as unique, so I kept getting what I considered â€˜repeatâ€™ entries, for example: â€˜100000000000000â€™ and â€˜10000000000000â€™ - they of course appear identical to us, but Python was treating those separate 0â€™s as in a â€˜differentâ€™ order) Anyway, after lots of Google and Stackoverflow, it turns out that there is a simple on liner, which actually is the </p>\n<h2>The Data</h2>\n<p>I decided ultimately to use JSON my de facto file format for loading data on the frontend.</p>\n<p>Then, itâ€™s a simple </p>\n<p>as it always seems to be with these fancy data algorithms, 99% of the â€˜magicâ€™ to generate the Invaders happens in a double for loop. In the original Java code, it looks</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">255</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//black or white?</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">With react <span class=\"token keyword\">this</span> is very easy<span class=\"token punctuation\">,</span> we can pass the data down <span class=\"token keyword\">as</span> a prop into each canvas<span class=\"token punctuation\">:</span>\n\n<span class=\"token template-string\"><span class=\"token string\">``</span></span>`javascript</code></pre>\n      </div>\n<h2>Code</h2>\n<p>As always when I make big posts like these, the links to the repositories can be found below.</p>\n<h3>Backend Code</h3>\n<p>This is the data crunching bit, utilizing Pythonâ€™s Pandas and JSON modules to generate the JSON per rank:</p>\n<h3>Frontend Code</h3>\n<p>React app bootstrapped by <code class=\"language-text\">create-react-app</code>, using P5.js and served statically with <code class=\"language-text\">express</code>:</p>\n<p>If you have experience with p5.js or Processing, you may find ways to extend what Iâ€™ve built.</p>\n<p>Enjoy!</p>","frontmatter":{"title":"Data Challenge! Rendering all 32,767 Invaders!","date":"December 31, 2018","draft":false,"starID":104,"postType":"data"}}},"pageContext":{"slug":"/data-challenge-rendering-all-32767-invaders/","prev":{"fields":{"slug":"/data-analysis-and-pixel-art-of-towns-and-cities-in-pokemon/"},"frontmatter":{"date":"15 July, 2018","title":"Data Analysis and Pixel Art of Towns and Cities in Pokemon","draft":false,"starID":21,"postType":"dev","link":"https://chrisfrew.in/data-analysis-and-pixel-art-of-towns-and-cities-in-pokemon/","relativeLink":"/data-analysis-and-pixel-art-of-towns-and-cities-in-pokemon/"}},"next":{"fields":{"slug":"/donations/"},"frontmatter":{"date":"26 November, 2018","title":"All Time Blog Donations Flowchart","draft":true,"starID":53,"postType":"blog","link":"https://chrisfrew.in/donations/","relativeLink":"/donations/"}}}}