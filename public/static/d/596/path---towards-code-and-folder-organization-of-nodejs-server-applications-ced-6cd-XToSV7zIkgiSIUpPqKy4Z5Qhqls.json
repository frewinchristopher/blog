{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"d14f6674-8354-5c63-ad78-8cc95fb06e66","excerpt":"Giant  ’s Got You Down? Client Side Code In client (read: frontend) code organization, I am pretty well versed in code organization. You’ve…","html":"<h1>Giant <code class=\"language-text\">index.js</code>’s Got You Down?</h1>\n<h2>Client Side Code</h2>\n<p>In client (read: frontend) code organization, I am pretty well versed in code organization. You’ve of course got your <code class=\"language-text\">/src</code> Even with state, if you use Redux, you ahve your <code class=\"language-text\">reducers/</code>, your <code class=\"language-text\">store</code> and your <code class=\"language-text\">actions/</code> folders and files. </p>\n<h2>Server Side Code</h2>\n<p>However, on server sided code, I find myself continually making ever larger <code class=\"language-text\">index.js</code> files for each of my projects. (And I’m sure many of us out there are guilty of that!). </p>\n<p>This habit of mine I believe developed simply from finding no authority on organization of nodejs backends - and even worse, not being able to find information like this readily avaliable in the first place! The only source I can remotely remember going into detail about code organization was a <a href=\"https://scotch.io/tutorials/keeping-api-routing-clean-using-express-routers\">nice scotch.io post at least about routing organization</a> by <a href=\"https://scotch.io/@searsaw\">Alex Sears</a>. But that’s just about routing. I want to organize ALL the things on the server side! GET and POST routes, socket callbacks, database work, and any other utils!</p>\n<p>This post is an attempt to <em>be</em> that authoritative post. </p>\n<p>What I’ll do is post in on <a href=\"https://dev.to\">the DEV.to community</a>, get clobbered there by master devs, and then update this post here and on medium towards a sort of organization encyclopedia.</p>\n<p>It’s amazing that the software/programming/developer communities haven’t built - indeed, you always. But this is the <em>perfect</em> use case for gists or a repository - full best practices. Perhaps I just haven’t looked hard enough. Or perhaps this is just a pipe dream of mine, and it falls back to the required curse that is software engineering: every product, website, application, whatever it be, </p>\n<p>I suggest the following folders:</p>\n<p><code class=\"language-text\">routes/</code> for all your GET, POST, PUT, and DELETE statements\n<code class=\"language-text\">postgresUtils/</code> for all your postgresql callbacks (obviously interchangeable to whatever database you use, be it mysql, I’ve seen in <a href=\"https://reallifeprogramming.com/node-authentication-with-passport-postgres-ef93e2d520e7\">this nice nodejs + postgresql + passport example</a> by [Bartek Witczak] (<a href=\"https://reallifeprogramming.com/@bartekwitczak?source=post_header_lockup\">https://reallifeprogramming.com/@bartekwitczak?source=post<em>header</em>lockup</a>), the folder <code class=\"language-text\">db/</code> is used. But, I find this a bit ambiguous, as one would have to actually open the code and look inside to see exactly what kind of database it is. Another thing I really like which I learned from Olawale Aladeusi on Codementor.io <a href=\"https://www.codementor.io/olawalealadeusi896/building-a-simple-api-with-nodejs-expressjs-and-postgresql-db-masuu56t7\">Building a simple API with Nodejs, Expressjs and PostgreSQL DB -2</a> is reducing your query to a single <code class=\"language-text\">index.js</code> file\n<code class=\"language-text\">socketUtils/</code> for all your websocket callbacks\n<code class=\"language-text\">utils/</code> like what is often seen in the frontend, but for any functions that are shared across</p>\n<p>some important notes: we will also need a </p>","frontmatter":{"title":"Towards Code and Folder Organization of NodeJS Server Applications","date":"October 28, 2018","draft":true,"starID":56}}},"pageContext":{"slug":"/towards-code-and-folder-organization-of-nodejs-server-applications/","prev":{"fields":{"slug":"/that-was-it-the-first-week-of-the-rest-of-my-life/"},"frontmatter":{"date":"08 December, 2018","title":"That was it. The First Week of the Rest of My Life.","draft":false,"starID":102,"postType":"life","link":"https://chrisfrew.in/that-was-it-the-first-week-of-the-rest-of-my-life/","relativeLink":"/that-was-it-the-first-week-of-the-rest-of-my-life/"}},"next":{"fields":{"slug":"/using-google-clouds-text-to-speech-machine-learning-api/"},"frontmatter":{"date":"14 April, 2018","title":"Using Google Cloud's Text To Speech Machine Learning API","draft":false,"starID":17,"postType":"dev","link":"https://chrisfrew.in/using-google-clouds-text-to-speech-machine-learning-api/","relativeLink":"/using-google-clouds-text-to-speech-machine-learning-api/"}}}}