{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"2e99bd4e-6ed4-55d1-bafa-a8bd9649b2d5","excerpt":"This post is also published on Medium, if you prefer to read there, but was posted here first 😄. Results First, Technical Stuff Later If…","html":"<p>This post is also published on Medium, if you prefer to read there, but was posted here first 😄.</p>\n<h1>Results First, Technical Stuff Later</h1>\n<p>If you’re just trying to find the Invader site, <a href=\"https://chrisfrew.in/invaders\">that can be found here.</a></p>\n<h1>Big Post Warning!</h1>\n<p>Warning: This is gonna be a big post, with lots of thought processes and code snippets. I hope you enjoy!</p>\n<h1>Processing and P5.JS</h1>\n<p>I got into the whole Processing universe through a few generative art courses on Skillshare.  If you don’t know yet, Processing is a Java library (I believe there is a Python library too) that makes drawing and creating both fixed and animated digital art very easy. To get started, you need only to download the IDE and fill out a few methods, which could look as simple as:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"></code></pre>\n      </div>\n<p>and already you’ll be getting generative animated art like this:</p>\n<p><img src=\"./scircles.gif\" alt=\"Gif of randomly colored circles popping up all over the screen\"></p>\n<p>of course, you can build out and develop as complex art as you want, <a href=\"\">like these examples.</a></p>\n<h1>Motivation for this Data Challenge</h1>\n<p>So, after learning the very basics about Processing and working through a few examples on Skillshare, I started exploring other’s work, also mostly on Skillshare. The videogame nerd that I am, I took a particular liking to the ‘Invaders’ work by <a href=\"https://www.skillshare.com/projects/Experimenting-with-Processing-and-HYPE/18021\">Jerome Herr’s 2013 work</a> and <a href=\"https://pastebin.com/umz39Yus\">code</a>. I saw he was originally inspired by <a href=\"http://www.complexification.net/gallery/machines/invaderfractal/\">Jared Tarbell’s work in 2003</a> who appears to be the first to work on the Invaders concept and even provides <a href=\"http://www.complexification.net/gallery/machines/invaderfractal/flash/invaderFractall.html\">an interactive fractal implementation of Invader generation</a>.</p>\n<p>That’s when I saw my chance to put my own spin on Invaders. Both Jerome’s and Jared’s works are not determinant. In other words, each time you run their respective programs, you get a different result. With my more application and web minded background, I saw that all the Invader data could first be generated, and then loaded at any later time. And so this <strong>Data Challenge!</strong><sup>TM</sup> began! </p>\n<p>I started by diving into the code kindly provided by Jerome, but then I started getting frusterated with the Java syntax entirely. It’s been over 10 years since I wrote any Java, and that was my Junior year in Highschool… so yeah, I was looking for (hopefully) a Javascript possibility. And what do you know, there <em>is</em> a JavaScript library for processing!</p>\n<p>It just so happens that completely by chance, the very cover animation on the home page of my blog, which you may or may not know depending on how often you visit the blog, <em>is</em> a p5.js animation! I didn’t make the connection at first because I originally found that library through <a href=\"https://news.ycombinator.com/item?id=17716542\">this ‘Show HN’ post showcasing the library back at the end of August, 2018</a>, and that ‘circles bouncing around in a container’ example is a pretty generic example which I just lightly refactored for my site. Plus, the names P5 and Processing just never connected in my mind!</p>\n<p>So I finally bit the bullet and said, alright, I wanna do this in JavaScript, let’s convert this Java code to Javascript. Cuz, cmon, who doesn’t do things in Javascript these days? 😂 (Yes, a bit of sarcasm, but honestly… it’s been fairly true - we’ll see what happens in 2019) Anyway, the REAL reason I wanted to do it in Javascript was to get more practice with p5.js. I’ll likely be using in the future for even more projects!</p>\n<p>I <em>also</em> wanted to build this site with react. Then of course, because p5.js uses canvas elements, you need a wrapper to pass events to it from react and blah blah blah. Yay, state-of-the-web in 2019!</p>\n<p>Luckily, there is <a href=\"https://github.com/atorov/react-p5js/tree/master/src/components\">a boilerplate repository</a> by <a href=\"https://github.com/atorov\">atorov</a> with not <em>one</em> but <em>two</em> examples of how to use p5.js sketches with react!</p>\n<p>So, I had an overview of everything I needed. I then got started with the Invader data generation.</p>\n<h2>Math and Data Generation</h2>\n<p>The math behind Invader generation is lightly discussed directly on the <a href=\"https://chrisfrew.in/invaders\">Invaders page</a>, but I’ll go into detail here.</p>\n<h3>What is an Invader?</h3>\n<p>Before we go any further, I’ll explain mathematically what an Invader is. An Invader is an array of 15 independently activated or deactivated blocks, arranged in any order, which is then partially reflected along the y axis, like so (1 reflecting to 1’, 6 reflecting to 6’, and so on):</p>\n<p><img src=\"/invader-b3fcac9ee9a0c381555f0922344158e5.svg\" alt=\"Invader schematic\"></p>\n<p>There are 2<sup>15</sup>-1 possible unique combinations of this configuration, or 32,768 - 1 = 32,767. One must be subtracted from 32,768, since the Invader with all 15 blocks deactived would be an empty 15 x 15 block. (Oppositely, an Invader with all 15 blocks activated is a sold 15 x 15 block.)</p>\n<p>A helpful analogy for me was to picture this array of 15 as 15 switches next to each other, each being switch on or off at random, until you have every possible combination. This configuration can be realized as a binary list of length 15, where a <code class=\"language-text\">1</code> represents an activated or turned on block, while a <code class=\"language-text\">0</code> represents a deactivated or turned off block. But how can we generate every possible binary string of length 15?</p>\n<p>I’ll admit, I struggled with how to do this correctly in Python. I went immediately to the <code class=\"language-text\">itertools</code> library, trying to work some magic with the <code class=\"language-text\">permutations</code> and/or <code class=\"language-text\">combinations</code> functions, but Python kept thinking it should count each <code class=\"language-text\">0</code> in the list as unique, so I kept getting what I considered ‘repeat’ entries, for example: <code class=\"language-text\">&#39;100000000000000&#39;</code> and <code class=\"language-text\">&#39;10000000000000&#39;</code> - they of course appear identical to us, but not to Python 😄) </p>\n<p>Anyway, after lots of Google and Stackoverflow, it turns out that there is a simple one-liner, which actually <em>is</em> in the itertools library, just using a not-so-commonly seen method, <code class=\"language-text\">product()</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">lInvaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> seq <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># all binary combinations of 0s and 1s and length 15</span></code></pre>\n      </div>\n<h3>Rank Data</h3>\n<p>I also had the idea to create a so called ‘rank’ - the number of total activated blocks in the array of 15. In other words, counting how many <code class=\"language-text\">1</code>’s that were in the binary string.</p>\n<p>It’s easy to image that for both ranks 1 and 14 there are 15 Invaders, since Rank 1 is the same as choosing any 1 of the 15 blocks and activating it, while Rank 14 is simply deactivating 1 of the given 15 blocks. Rank 15 is also easy to image - there is only 1 combination - all 15 blocks activated. However, for all the ranks in between (2-13), trying to intuitively picture the number of Invaders becomes difficult. So I decided to add that into my code, by getting a count of <code class=\"language-text\">1</code>’s in each of the 32,767 Invader binary strings:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">lRanks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    \n    lRanks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>In this form, this is simply a rank count for each, so we need to count all the ranks in the array by <em>collecting</em> them. That can be done with, <em>gasp</em> the <code class=\"language-text\">collections</code> library:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">counter<span class=\"token operator\">=</span>collections<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">(</span>lRanks<span class=\"token punctuation\">)</span> </code></pre>\n      </div>\n<p>Here’s the contents of <code class=\"language-text\">counter</code> for your enjoyment.</p>\n<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>15</td>\n</tr>\n<tr>\n<td>2</td>\n<td>105</td>\n</tr>\n<tr>\n<td>3</td>\n<td>455</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1365</td>\n</tr>\n<tr>\n<td>5</td>\n<td>3003</td>\n</tr>\n<tr>\n<td>6</td>\n<td>5005</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6435</td>\n</tr>\n<tr>\n<td>8</td>\n<td>6435</td>\n</tr>\n<tr>\n<td>9</td>\n<td>5005</td>\n</tr>\n<tr>\n<td>10</td>\n<td>3003</td>\n</tr>\n<tr>\n<td>11</td>\n<td>1365</td>\n</tr>\n<tr>\n<td>12</td>\n<td>455</td>\n</tr>\n<tr>\n<td>13</td>\n<td>105</td>\n</tr>\n<tr>\n<td>14</td>\n<td>15</td>\n</tr>\n<tr>\n<td>15</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>I’m sure someone with more experience in binary concepts can provide the analytical reason and equations for why this is, but for me I just left it as a general idea of ‘degrees of freedom’ allowable in the 15 character binary string, based on how many blocks that have to be activated. </p>\n<p>Plus, if we add those counts up, we see it confirms our analysis of 2<sup>15</sup>-1 possible unique combinations, or 32,767 combinations.</p>\n<h3>DataFrame and JSON Data Export</h3>\n<p>So we have all 32,767 binary strings and their rank. We need to just ‘zip’ these arrays together (and I sorted them by rank): </p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">oDataFrame <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'block_string'</span><span class=\"token punctuation\">:</span> lInvaders<span class=\"token punctuation\">,</span> <span class=\"token string\">'rank'</span><span class=\"token punctuation\">:</span> lRanks<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noDataFrame <span class=\"token operator\">=</span> oDataFrame<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>I then opted to create both a full data JSON file for reference, and a seperate JSON file, per-rank:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">oDataFrame<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/all_data.json'</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># full data</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> oDataFrame<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># data per rank</span>\n    x<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/data_rank_{}.json'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h3>Complete Data Generation Code</h3>\n<p>And that’s it for data crunching! In the end, the total data generation script is only about 25 lines long:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools\n<span class=\"token keyword\">import</span> collections  \n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> os\n  \nlInvaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> seq <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># all binary combinations of 0s and 1s and length 15</span>\n\n<span class=\"token comment\"># now we can see how many invaders have what rank (number of times '1' occurs in a given invader string)</span>\nlRanks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    \n    lRanks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># put blocks string and rank into dataframe</span>\noDataFrame <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'block_string'</span><span class=\"token punctuation\">:</span> lInvaders<span class=\"token punctuation\">,</span> <span class=\"token string\">'rank'</span><span class=\"token punctuation\">:</span> lRanks<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noDataFrame <span class=\"token operator\">=</span> oDataFrame<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\noDataFrame<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/all_data.json'</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># json for each rank</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> oDataFrame<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/data_rank_{}.json'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># print for counts of each rank</span>\n<span class=\"token comment\"># counter=collections.Counter(lRanks) </span>\n<span class=\"token comment\"># print(counter)</span></code></pre>\n      </div>\n<p>As always, the most up-to-date version will be <a href=\"https://github.com/frewinchristopher/invaders-data\">on the repository</a>.</p>\n<h2>Frontend Fun</h2>\n<p>So now that I had the data, I needed to create a p5.js canvas for each of the json files per rank. Let’s get started!</p>\n<p>As it always seems to be with these fancy data algorithms, 99% of the ‘magic’ to generate the Invaders happens in a double for loop. In the original Java code, it looks</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">255</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//black or white?</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and the converted JavaScript:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"></code></pre>\n      </div>\n<p>I only needed to change that <code class=\"language-text\">c =</code> line, since I already had my organized and pre-generated data.</p>\n<p>With the beauty of React, we can pass the data down as a prop into each canvas:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"></code></pre>\n      </div>\n<h2>Code</h2>\n<p>As always when I make big posts like these, the links to the repositories can be found below.</p>\n<h3>Backend Code</h3>\n<p>This is the data crunching bit, as discussed, utilizing Python’s Pandas and JSON modules to generate the JSON per rank:</p>\n<p><a href=\"https://github.com/frewinchristopher/invaders-data\">https://github.com/frewinchristopher/invaders-data</a></p>\n<h3>Frontend Code</h3>\n<p>React app bootstrapped by <code class=\"language-text\">create-react-app</code>, using P5.js and served statically on <code class=\"language-text\">Node.js</code> with <code class=\"language-text\">express</code>:</p>\n<p><a href=\"https://github.com/frewinchristopher/invaders\">https://github.com/frewinchristopher/invaders</a></p>\n<h2>Thanks!</h2>\n<p>As always, thanks for reading and I hoped you enjoyed this in-depth post. Get out there and start generating your own spin on Invaders!</p>\n<p>I also think this <strong>Data Challenge</strong><sup>TM</sup> theme will return. It helps be develop as a better software engineer, and makes for really interesting posts. I’ll be making more, as soon as I find the next project enticing enough to tackle.</p>\n<p>Cheers! 🍺</p>\n<p>-Chris</p>","frontmatter":{"title":"Data Challenge! Rendering all 32,767 Invaders!","date":"December 31, 2018","draft":false,"starID":104,"postType":"data"}}},"pageContext":{"slug":"/data-challenge-rendering-all-32767-invaders/","prev":{"fields":{"slug":"/obligatory-goals-for-2019-post/"},"frontmatter":{"date":"03 January, 2019","title":"Obligatory 'Goals for 2019' Post","draft":false,"starID":105,"postType":"misc","link":"https://chrisfrew.in/obligatory-goals-for-2019-post/","relativeLink":"/obligatory-goals-for-2019-post/"}},"next":null}}