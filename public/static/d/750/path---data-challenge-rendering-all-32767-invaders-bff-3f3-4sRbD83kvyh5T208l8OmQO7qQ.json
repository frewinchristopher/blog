{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"2e99bd4e-6ed4-55d1-bafa-a8bd9649b2d5","excerpt":"This post is also published on Medium, if you prefer to read there, but it was posted here first 😄. Results First, Technical Stuff Later If…","html":"<p>This post is also published on Medium, if you prefer to read there, but it was posted here first 😄.</p>\n<h1>Results First, Technical Stuff Later</h1>\n<p>If you’re here just trying to find my Invader-rendering site, <a href=\"https://chrisfrew.in/invaders\">that is here.</a></p>\n<p>Or, if you are looking for the repository for ^ that site, <a href=\"https://github.com/frewinchristopher/invaders\">that is here.</a></p>\n<p>Finally, the backend code (in Python) to generate all 32,767 unique instances Invaders <a href=\"https://github.com/frewinchristopher/invaders-data\">is here.</a></p>\n<h1>Background: Processing and p5.js</h1>\n<p>I got into the whole Processing universe through a few generative art courses on Skillshare.  If you don’t know yet, Processing is a Java library (I believe there is a Python library too) that makes drawing and creating both fixed and animated digital art very easy. To get started, you need only to download the IDE and fill out a few methods, which could look as simple as:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">float</span> xLocation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> yLocation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">background</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span><span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">float</span> newXLocation <span class=\"token operator\">=</span> xLocation <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> newYLocation <span class=\"token operator\">=</span> yLocation <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newXLocation <span class=\"token operator\">></span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     newXLocation <span class=\"token operator\">=</span> <span class=\"token number\">700</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newXLocation <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     newXLocation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newYLocation <span class=\"token operator\">></span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     newYLocation <span class=\"token operator\">=</span> <span class=\"token number\">700</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newYLocation <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     newYLocation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">//line(s.xLocation, s.yLocation, newXLocation, newYLocation);</span>\n   <span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">float</span> randomCircleSize <span class=\"token operator\">=</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>xLocation<span class=\"token punctuation\">,</span> yLocation<span class=\"token punctuation\">,</span> randomCircleSize<span class=\"token punctuation\">,</span> randomCircleSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   xLocation <span class=\"token operator\">=</span> newXLocation<span class=\"token punctuation\">;</span>\n   yLocation <span class=\"token operator\">=</span> newYLocation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and already you’ve written code that generates an animation like this:</p>\n<p><img src=\"/circles-f4766f4ccae55e058804419c2c2a0e0a.gif\" alt=\"Gif of randomly colored circles popping up all over the screen\"></p>\n<p>of course, this is only the tip of the ice berg. You can build out and develop art and patterns as complex as you want, <a href=\"https://www.skillshare.com/projects/Talkin-Bout-My-Generating/27908\">like these examples by Daniel Stewart.</a></p>\n<h1>Motivation for this Data Challenge</h1>\n<p>So, after learning the very basics about Processing and working through a few examples and a beginner generative art course by <a href=\"https://www.skillshare.com/classes/Coding-Easy-Generative-Art-With-Processing-The-Basics/520946096\">Melissa Wiederrecth on Skillshare</a>, I started exploring other’s work, also mostly on Skillshare. </p>\n<p>Being the video game nerd that I am, I took a particular liking to the ‘Invaders’ work by <a href=\"https://www.skillshare.com/projects/Experimenting-with-Processing-and-HYPE/18021\">Jerome Herr in 2013</a> and <a href=\"https://pastebin.com/umz39Yus\">code</a>. He mentions for the Invaders that he was originally inspired by <a href=\"http://www.complexification.net/gallery/machines/invaderfractal/\">Jared Tarbell’s work in 2003</a> who appears to be the first to work on the Invaders concept and even provides <a href=\"http://www.complexification.net/gallery/machines/invaderfractal/flash/invaderFractall.html\">an interactive fractal implementation of Invader generation</a>.</p>\n<p>That’s when I saw my chance to put my own spin on Invaders. Both Jerome’s and Jared’s works are not determinant. In other words, each time you run their respective programs, you get a different result. With my web app / API / front-end background, I realized that all the Invader data could first be generated, and then loaded at any later time. And so this <strong>Data Challenge!</strong><sup>TM</sup> began! </p>\n<p>I started by modifying <a href=\"https://pastebin.com/umz39Yus\">the code kindly provided by Jerome</a>, but then I started getting frustrated with the Java syntax entirely. It’s been over 10 years since I wrote any Java, and that was my Junior year in Highschool… so yeah, I was looking for (hopefully) a Javascript possibility. And what do you know, there <em>is</em> a JavaScript library for processing!</p>\n<p>It just so happens that completely by chance, the very cover animation on the home page of my blog, which you may or may not know depending on how often you visit the blog, <em>is</em> a p5.js animation! I didn’t make the connection at first because I originally found that library through <a href=\"https://news.ycombinator.com/item?id=17716542\">this ‘Show HN’ post showcasing the library back at the end of August, 2018</a>, and that ‘circles bouncing around in a container’ example is a pretty generic example which I just lightly refactored for my site. Plus, the names p5 and Processing just never connected in my mind!</p>\n<h2>The Decision to Switch to Javascript</h2>\n<p>So I finally bit the bullet and said, “alright, I’m killin’ myself here, I need do this in JavaScript, let’s convert this Java code to Javascript.”<sup><a href=\"#footnote-1\">1</a></sup>  Anyway, the reason I wanted to do this project in Javascript was to get more practice with p5.js. I’ll likely be using in the future for even more generative art projects! This is the best path forward for me, because even if it is static artwork (like prints and such), I’ll still have the p5.js version that can litterally be shared in its pure form across the web!</p>\n<h2>React and p5.js</h2>\n<p>I <em>also</em> wanted to build this site with my near and dear front-end library of choice, React. Then of course, because p5.js uses canvas elements, you need a wrapper to pass data events to p5.js from React and blah blah blah. Yay, state-of-the-web in 2019!</p>\n<p>Luckily, there is <a href=\"https://github.com/atorov/react-p5js/tree/master/src/components\">a boilerplate repository</a> by <a href=\"https://github.com/atorov\">atorov</a> with not <em>one</em> but <em>two</em> examples of how to use p5.js sketches with react!</p>\n<p>So, I had an overview of all the scaffolding I needed. I then got started with the Invader data generation.</p>\n<h2>Definitions</h2>\n<h3>What is an Invader?</h3>\n<p>Before we go any further, I’ll explain mathematically what an Invader is. An Invader is an array of 15 independently activated or deactivated blocks, arranged in any order, which is then partially reflected along the y axis, like so (1 reflecting to 1’, 6 reflecting to 6’, and so on):</p>\n<p><img src=\"/invader-57e7eb952cf097b73983513c5de33d4e.svg\" alt=\"Invader schematic\"></p>\n<p>There are 2<sup>15</sup>-1 possible unique combinations of this configuration, or 32,768 - 1 = 32,767. We have to subtract 1 from 32,768, since the Invader with all 15 blocks deactived would be an empty 30 x 30 block. (Oppositely, an Invader with all 15 blocks activated is a solid 30 x 30 block.)</p>\n<p>A helpful analogy for me was to picture this array of 15 switches next to each other, each being switched on or off at random, until you have every possible combination - all 32,767 of them. This configuration can be realized as a binary list of length 15, where a <code class=\"language-text\">1</code> represents an activated, or turned on block, while a <code class=\"language-text\">0</code> represents a deactivated, or turned off block.</p>\n<h2>Math and Data Generation</h2>\n<p>The math behind Invader generation is briefly discussed directly on the <a href=\"https://chrisfrew.in/invaders\">Invaders page</a>, but I’ll go into detail here.</p>\n<h3>Block Data</h3>\n<p>So we know what an Invader is now. But how can exactly are we going to generate every possible binary string of length 15? We need to generate what I call in the code “block strings” (or <code class=\"language-text\">block_strings</code>).</p>\n<p>I’ll admit, I struggled for a while on how to do this without writing custom Python. I went immediately to the <code class=\"language-text\">itertools</code> library, trying to work some magic with the <code class=\"language-text\">permutations</code> and/or <code class=\"language-text\">combinations</code> functions, but Python kept thinking it should count each <code class=\"language-text\">0</code> in the list as unique, so I kept getting what I considered ‘repeat’ entries, for example: <code class=\"language-text\">&#39;100000000000000&#39;</code> and <code class=\"language-text\">&#39;10000000000000&#39;</code> - they of course appear identical to us, but not to Python 😄) </p>\n<p>Anyway, after lots of Google and Stack Overflow, it turns out that there <em>is</em> a one-liner that can do this, which actually <em>is</em> in the itertools library, it’s just a not-so-commonly seen method, <code class=\"language-text\">product()</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">lInvaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> seq <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># all binary combinations of 0s and 1s and length 15</span></code></pre>\n      </div>\n<p>Yep. That’s it. <code class=\"language-text\">lInvaders</code> is a list with all 32,767 unique Invaders in it.</p>\n<h3>Rank Data</h3>\n<p>I also had the idea to create a ‘rank’ for each Invader - the number of total activated blocks in the array of 15. In other words, counting how many <code class=\"language-text\">1</code>’s that were in the binary string.</p>\n<p>One can imagine that for both ranks 1 and 14 there are 15 Invaders, since Rank 1 is the same as choosing any 1 of the 15 blocks and activating it, while Rank 14 is similar, but instead, 1 of the given 15 blocks is deactivated instead of activated. Rank 15 is also easy to image - there is only 1 combination - all 15 blocks activated. (As mentioned above in the description, I ignore the single Invader of Rank 0, because it is a 30x30 block with all block deactivated, thus it is an empty block.) </p>\n<p>However, for all the ranks from 2 to 13, trying to intuitively picture the number of Invaders becomes difficult. So I decided to add that into my code, by determining the count of <code class=\"language-text\">1</code>’s in each of the 32,767 Invader binary strings:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">lRanks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    \n    lRanks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>This form is simply a rank count for each Invader, so I needed to count all the ranks in the array by <em>collecting</em> them. That can be done with, <em>gasp</em> the <code class=\"language-text\">collections</code> library:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">counter<span class=\"token operator\">=</span>collections<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">(</span>lRanks<span class=\"token punctuation\">)</span> </code></pre>\n      </div>\n<p>Here’s the contents of <code class=\"language-text\">counter</code> for your enjoyment.</p>\n<table>\n<thead>\n<tr>\n<th>Rank</th>\n<th>Count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>15</td>\n</tr>\n<tr>\n<td>2</td>\n<td>105</td>\n</tr>\n<tr>\n<td>3</td>\n<td>455</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1365</td>\n</tr>\n<tr>\n<td>5</td>\n<td>3003</td>\n</tr>\n<tr>\n<td>6</td>\n<td>5005</td>\n</tr>\n<tr>\n<td>7</td>\n<td>6435</td>\n</tr>\n<tr>\n<td>8</td>\n<td>6435</td>\n</tr>\n<tr>\n<td>9</td>\n<td>5005</td>\n</tr>\n<tr>\n<td>10</td>\n<td>3003</td>\n</tr>\n<tr>\n<td>11</td>\n<td>1365</td>\n</tr>\n<tr>\n<td>12</td>\n<td>455</td>\n</tr>\n<tr>\n<td>13</td>\n<td>105</td>\n</tr>\n<tr>\n<td>14</td>\n<td>15</td>\n</tr>\n<tr>\n<td>15</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>I’m sure someone with a stronger mathematics background can provide the analytical solution for why this is, but I just left it as a vague concept of ‘degrees of freedom’, peaking at 7 and 8, allowed in the 15 character binary string, based on how many blocks that have to be activated. </p>\n<p>Additionally, if we add those counts up, we see it confirms my analysis of 2<sup>15</sup>-1 possible unique combinations, or 32,767 combinations. (Notice also that Rank 0 could be shown, and that would likewise have a count of 1 like Rank 15, but as I said above, I’m not counting that Invader because it is an empty block and wouldn’t really display anything.)</p>\n<h3>DataFrame and JSON Data Export</h3>\n<p>So we have all 32,767 binary strings and their rank. We need to just ‘zip’ these arrays together (and I sorted them by rank). This ‘zipping’ is very easy with the pandas <code class=\"language-text\">DataFrame</code> constructor: </p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">oDataFrame <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'block_string'</span><span class=\"token punctuation\">:</span> lInvaders<span class=\"token punctuation\">,</span> <span class=\"token string\">'rank'</span><span class=\"token punctuation\">:</span> lRanks<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noDataFrame <span class=\"token operator\">=</span> oDataFrame<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>I opted to create both a full data JSON file for reference, and a separate JSON file, per-rank:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\">oDataFrame<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/all_data.json'</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># full data</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> oDataFrame<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># data per rank</span>\n    x<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/data_rank_{}.json'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<h3>Complete Data Generation Code</h3>\n<p>And that’s it for the data crunching! In the end, the total data generation Python script is only about 25 lines long:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> itertools\n<span class=\"token keyword\">import</span> collections  \n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> os\n  \nlInvaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> seq <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># all binary combinations of 0s and 1s and length 15</span>\n\n<span class=\"token comment\"># now we can see how many invaders have what rank (number of times '1' occurs in a given invader string)</span>\nlRanks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    \n    lRanks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>lInvaders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># put blocks string and rank into dataframe</span>\noDataFrame <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'block_string'</span><span class=\"token punctuation\">:</span> lInvaders<span class=\"token punctuation\">,</span> <span class=\"token string\">'rank'</span><span class=\"token punctuation\">:</span> lRanks<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noDataFrame <span class=\"token operator\">=</span> oDataFrame<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\noDataFrame<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/all_data.json'</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># json for each rank</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> x <span class=\"token keyword\">in</span> oDataFrame<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/data/data_rank_{}.json'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> orient<span class=\"token operator\">=</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># print for counts of each rank</span>\n<span class=\"token comment\"># counter=collections.Counter(lRanks) </span>\n<span class=\"token comment\"># print(counter)</span></code></pre>\n      </div>\n<p>As always, the most up-to-date version will be <a href=\"https://github.com/frewinchristopher/invaders-data\">on the repository</a>.</p>\n<h2>Frontend Fun</h2>\n<p>So now that I had the data for my Invaders, I needed to create a p5.js canvas for each of the per-rank json files. Let’s get started!</p>\n<p>As it always seems to be with these fancy data algorithms, 99% of the ‘magic’ to generate the Invaders happens in a double for loop. In the original Java code it looks like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">255</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//black or white?</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and in the converted React-ified JavaScript code:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> sz <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">255</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//black or white?</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>For my project, it looks like I only needed to change that <code class=\"language-text\">c =</code> line, the line that defines if the given block in the Invader should be activated or not. Instead of using p5.js’ <code class=\"language-text\">random()</code> function, I would need to load the “block string” for the given index of Invader. But let’s take a step back. </p>\n<p>We know we need to somehow add in the JSON data we generated with Python. We could hardcode the data file into a given sketch, but Yeah, I don’t want to do that because it’s horrible form and it would be annoying and take forever.</p>\n<p>It makes way more sense to pass our data down as a prop. From the boilerplate repository, that data prop flows through the following files, like so:</p>\n<p><code class=\"language-text\">App/index.jsx -&gt; P5Wrapper/index.jsx -&gt; P5Wrapper/sketch1/index.jsx</code>  </p>\n<p>In this case, the name <code class=\"language-text\">sketch1</code> is a bit misleading, since I will create multiple canvases from the single sketch, but I kept the file name conventions from boilerplate repository for anyone who may want to follow along and do the exact same.</p>\n<p>So now the data is being passed down as a prop! The sketch object is simply <code class=\"language-text\">s</code>, so we can reference that prop with <code class=\"language-text\">s.props.data</code>. Recalling that the <code class=\"language-text\">data</code> prop is a list, we can write the color line as follows:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> sz <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>block_string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">255</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// either filled with rank color or white</span>\n    position <span class=\"token operator\">=</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Where <code class=\"language-text\">this.number</code> is a property for which index a given Invader is (1 to 32,767) which is provided in an extended version of the constructor in the <code class=\"language-text\">Invader</code> class. If you’re interested, the number property is set by creating invaders in a double for loop over all available x and y:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>height<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>padding<span class=\"token punctuation\">;</span> y <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sz<span class=\"token operator\">+</span>padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> padding<span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>width<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>padding<span class=\"token punctuation\">;</span> x <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sz<span class=\"token operator\">+</span>padding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> iMaxInvaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> invader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Invader</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      number <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      invaders<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>invader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The Invader class itself is also refactored from the example code, but I’ll leave look at that in detail to developers interested to look into the specifics of <code class=\"language-text\">P5Wrapper/sketch1/index.js</code>!</p>\n<h3>Color By Rank</h3>\n<p>I extended this line even further, that instead of painting the Invader blocks with black or white, the color is based on the Invader’s rank. So instead of hardcoding <code class=\"language-text\">255</code> in the ternary statement, we can use the rank portion oft he data, and replace it with <code class=\"language-text\">aColors[s.props.data[this.number].rank - 1]</code> which we’ve already generated from the Python / data side of things! So the final implementation in the ‘magic’ portion of the code looks like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> sz <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>block_string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> aColors<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rank <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> oBackgroundColor<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// either filled with rank color or white</span>\n    position <span class=\"token operator\">=</span> position <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and <code class=\"language-text\">aColors</code> is a constant array of <code class=\"language-text\">s.color</code> objects, defined in directly in the sketch file <code class=\"language-text\">P5Wrapper/sketch1/index.jsx</code>: </p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-text\"><code class=\"language-text\">const aColors = [s.color(132, 94, 194), s.color(214, 93, 177), s.color(255, 111, 145), s.color(255, 150, 113), s.color(255, 199, 95), s.color(249, 248, 113), s.color(44, 115, 210), s.color(0, 142, 155), s.color(0, 143, 122), s.color(155, 222, 126), s.color(75, 188, 142), s.color(3, 149, 144), s.color(28, 110, 125), s.color(47, 82, 107), s.color(26, 36, 120)]</code></pre>\n      </div>\n<p>Again, I will leave that to developers interested in looking at the code to examine exactly what is going on in detail.</p>\n<h3>The Last p5.js &#x3C;-> React Caveat</h3>\n<p>Now that we’ve got our pre-generated data fed into our, . p5.js does this by using a specific ID per canvas. So, our final code will be looping over all ranks in our <code class=\"language-text\">App/index.jsx</code> file, and generating an ID that the canvas can use for the given rank. That code is at the top of the <code class=\"language-text\">render()</code> method and just before the <code class=\"language-text\">return(...)</code> statement:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> aElements <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> canvasWidth <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">></span> <span class=\"token number\">690</span> <span class=\"token operator\">?</span> <span class=\"token number\">690</span> <span class=\"token punctuation\">:</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">;</span> <span class=\"token comment\">// start width calculation for canvases at 690px, otherwise screen width</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> canvasId <span class=\"token operator\">=</span> <span class=\"token string\">\"canvas\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-container\"</span><span class=\"token punctuation\">;</span>\n    aElements<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Invaders <span class=\"token keyword\">of</span> Rank <span class=\"token punctuation\">{</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>aData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\B(?=(\\d{3})+(?!\\d))/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> Total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>P5Wrapper\n            p5Props<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> aData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> canvasId<span class=\"token punctuation\">,</span> canvasWidth <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            onSetAppState<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onSetAppState<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and then we can reference that same ID in the <code class=\"language-text\">componentDidMount</code> method of the p5.js driven component, <code class=\"language-text\">P5Wrapper/index.jsx</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">window<span class=\"token punctuation\">.</span>p5</span><span class=\"token punctuation\">(</span>sketch1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>p5Props<span class=\"token punctuation\">.</span>canvasId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas1<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>p5Props\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas1<span class=\"token punctuation\">.</span>onSetAppState <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onSetAppState\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div\n    id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>p5Props<span class=\"token punctuation\">.</span>canvasId<span class=\"token punctuation\">}</span>\n    style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">:</span> <span class=\"token string\">\"100%\"</span><span class=\"token punctuation\">,</span> textAlign<span class=\"token punctuation\">:</span> <span class=\"token string\">\"center\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n      </div>\n<p>further down in the main <code class=\"language-text\">&lt;div&gt;</code> of the <code class=\"language-text\">render()</code> method. So, in the end, we are rendering 15 separate canvases, totalling up to our target of 32,767. This completes the deep-dive into code on this post!</p>\n<h3>Give it a Try Yourself!</h3>\n<p>If you want to give it a shot yourself, you may want to add your own new columns from the (i’m sure a ‘complexity’ or ‘sparsity’ value could be generated for, and color your own Invaders that way!)</p>\n<h2>Code and Site</h2>\n<p>As always when I make big posts like these, the links to the repositories can be found below.</p>\n<h3>Backend Code</h3>\n<p>The backend code utilizes Python’s Pandas and JSON modules to generate the JSON per rank:</p>\n<p><a href=\"https://github.com/frewinchristopher/invaders-data\">https://github.com/frewinchristopher/invaders-data</a></p>\n<h3>Frontend Code</h3>\n<p>The front end code is a React app bootstrapped by <code class=\"language-text\">create-react-app</code>, using p5.js and served statically on <code class=\"language-text\">Node.js</code> with <code class=\"language-text\">express</code>:</p>\n<p><a href=\"https://github.com/frewinchristopher/invaders\">https://github.com/frewinchristopher/invaders</a></p>\n<h3>Final Site</h3>\n<p>As stated way above, the final site can be found here:</p>\n<p><a href=\"https://chrisfrew.in/invaders\">https://chrisfrew.in/invaders</a></p>\n<h2>Thanks!</h2>\n<p>As always, thanks for reading and I hoped you enjoyed this in-depth post. Get out there and start generating your own spin on Invaders!</p>\n<p>I also think this <strong>Data Challenge</strong><sup>TM</sup> theme will return to my blog. It helps me develop as a software engineer, and makes for really interesting posts. I’ll be making another <strong>Data Challenge</strong><sup>TM</sup> for sure, as soon as I find the next project enticing enough to tackle!</p>\n<p>Cheers! 🍺</p>\n<p>-Chris</p>\n<h2>Footnotes</h2>\n<div id=\"footnote-1\">\n1. Cuz, cmon, who _doesn't_ do things in Javascript these days? 😂 (Yes, a bit of sarcasm, but honestly... it's been fairly true - we'll see what happens in 2019)\n</div>","frontmatter":{"title":"Data Challenge! Rendering all 32,767 Invaders!","date":"December 31, 2018","draft":false,"starID":104,"postType":"data"}}},"pageContext":{"slug":"/data-challenge-rendering-all-32767-invaders/","prev":{"fields":{"slug":"/obligatory-goals-for-2019-post/"},"frontmatter":{"date":"03 January, 2019","title":"Obligatory 'Goals for 2019' Post","draft":false,"starID":105,"postType":"misc","link":"https://chrisfrew.in/obligatory-goals-for-2019-post/","relativeLink":"/obligatory-goals-for-2019-post/"}},"next":null}}