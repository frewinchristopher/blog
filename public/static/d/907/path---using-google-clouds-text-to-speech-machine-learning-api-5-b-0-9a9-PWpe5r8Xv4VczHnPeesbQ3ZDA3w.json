{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"ab3cd049-8117-5d87-ad7a-479cce7babba","excerpt":"Google Cloud I‚Äôm torn most of the time about using Google Cloud APIs - on one hand, they are a group of some of the best APIs on the web‚Ä¶","html":"<h1>Google Cloud</h1>\n<p>I‚Äôm torn most of the time about using Google Cloud APIs - on one hand, they are a group of some of the best APIs on the web today - the variety of what you can do with their APIs, whether it be maps, text to speech, search data, and more - is huge. However, with such a huge library comes the fact that the documentation can be a bit of a maze to get through. I mean, for the text to speech (TTS) API we‚Äôll be talking about in this post, for the getting started guide (in ‚Äúfive minutes!!!‚Äù as it says on the site), they provide this old-school bash <code class=\"language-text\">curl</code> command:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -H <span class=\"token string\">\"Authorization: Bearer \"</span><span class=\"token variable\"><span class=\"token variable\">$(</span>gcloud auth application-default print-access-token<span class=\"token variable\">)</span></span> -H <span class=\"token string\">\"Content-Type: application/json; charset=utf-8\"</span> --data <span class=\"token string\">\"{\n  'input':{\n    'text':'Android is a mobile operating system developed by Google, based on the Linux kernel and designed primarily for touchscreen mobile devices such as smartphones and tablets.'\n  },\n  'voice':{\n    'languageCode':'en-gb',\n    'name':'en-GB-Standard-A',\n    'ssmlGender':'FEMALE'\n  },\n  'audioConfig':{\n    'audioEncoding':'MP3'\n  }\n}\"</span> <span class=\"token string\">\"https://texttospeech.googleapis.com/v1beta1/text:synthesize\"</span> <span class=\"token operator\">></span> synthesize-output.txt</code></pre>\n      </div>\n<p>I mean what the heck is that? The <code class=\"language-text\">$(gcloud auth application-default print-access-token)</code> did <em>not</em> work for me. Even if it did, the following steps included extracting the base64 encoded string (which is only a part of the downloaded curl file) to another file, <em>and then</em> converting that base64 file to an mp3 file. No thank you, I‚Äôm going to do it all at runtime!</p>\n<p>Long story short, I‚Äôve found that this time and like many times before, using Google‚Äôs APIs is usually a lot of trial and error to get the endpoints working. <sup><a href=\"#footnote-3\">1</a></sup></p>\n<p>It wasn‚Äôt until I got to Google‚Äôs interactive POST console for their TTS module which you can use to test endpoints that I got a basic request working. That‚Äôs how I determined the bare minimum API request required below.</p>\n<h1>You‚Äôre in Luck üòé</h1>\n<p>There‚Äôs good news: luckily for you, I can spare you the migrain/hair pulling/rage that may ensue when trying to wrap your mind around Google‚Äôs often spotty documentation. I managed to get the TTS endpoint working, in Node.js nonetheless. In Node.js JavaScript, here is the code for converting some typed text to a tasty mp3 (granted you have a valid API key generated from googles cloud console for the )</p>\n<p><strong><em>Note that you need the following prerequisites for this to work!</em></strong></p>\n<ul>\n<li>be in a node project <code class=\"language-text\">npm init -y</code></li>\n<li>axios installed <code class=\"language-text\">npm install --save axios</code></li>\n<li>your google TTS module API key exported (in your <code class=\"language-text\">.bash_profile</code> or similar) as <code class=\"language-text\">GOOGLE_CLOUD_TEXT_TO_SPEECH_API</code>, i.e. that would be this line of bash:</li>\n</ul>\n<p><code class=\"language-text\">export GOOGLE_CLOUD_TEXT_TO_SPEECH_API=blahblahblahblah</code></p>\n<ul>\n<li>the following in <code class=\"language-text\">index.js</code>:</li>\n</ul>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> oResponse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sMainText <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> oData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"input\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">:</span> sMainText\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"voice\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"languageCode\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"en-GB\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ssmlGender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"FEMALE\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"audioConfig\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"audioEncoding\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mp3\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://texttospeech.googleapis.com/v1beta1/text:synthesize?fields=audioContent&amp;key=\"</span> <span class=\"token operator\">+</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GOOGLE_CLOUD_TEXT_TO_SPEECH_API</span><span class=\"token punctuation\">,</span> oData<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>oResponse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// write dat baoss (an encoded string) response into an mp3 file</span>\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'outfile.mp3'</span><span class=\"token punctuation\">,</span> oResponse<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>audioContent<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// write this base64 to an mp3</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MP3 file generated and saved! Should be saved at outfile.mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Then it should run with a good ol‚Äô <code class=\"language-text\">node index.js</code>! You‚Äôll find a tasty mp3 with ‚Äúhello world‚Äù being spoken - relatively better than Microsoft Sam i‚Äôd have to say! üòÇ</p>\n<p>So I hoped I saved you some time and frustration with at least this Google API.</p>\n<p>Enjoy, and Cheers! üç∫</p>\n<p>-Chris</p>\n<p><strong>This is part of a longer project that I‚Äôm trying to build to get a market volatility news flash published as one of Amazon Alexa‚Äôs skills. More on that to come. - A link here will also come soon.</strong></p>\n<h1>Footnotes</h1>\n<div id=\"footnote-1\">\n1. Some other APIs I've found have example minimum required interface endpoints for every language they support - super clean and tasty. I'm wondering if a lack of such clean documentation is because Google is focusing more on development than maintenance and documentation of their APIs. Perhaps the challenge itself is the vastness of the Google API library, and it would take nothing short of a genius to organize a proper strategy of attack on updating and cleaning up all the documentation.\n</div>","frontmatter":{"title":"Using Google Cloud's Text To Speech Machine Learning API","date":"April 14, 2018","draft":false,"starID":17}}},"pageContext":{"slug":"/using-google-clouds-text-to-speech-machine-learning-api/","prev":{"fields":{"slug":"/some-tasty-bash-profile-commands/"},"frontmatter":{"date":"09 April, 2018","title":"Some Tasty Bash Profile / Bashrc Commands To Make Your Life Better","draft":false,"starID":16,"link":"https://chrisfrew.in/some-tasty-bash-profile-commands/","relativeLink":"/some-tasty-bash-profile-commands/"}},"next":{"fields":{"slug":"/welp-i-did-it-i-quit/"},"frontmatter":{"date":"22 July, 2018","title":"Welp, I Did It. I Quit.","draft":false,"starID":24,"link":"https://chrisfrew.in/welp-i-did-it-i-quit/","relativeLink":"/welp-i-did-it-i-quit/"}}}}