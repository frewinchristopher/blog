{"data":{"site":{"siteMetadata":{"title":"Chris Frewin's Full Stack Blog.","author":"Chris Frewin"}},"markdownRemark":{"id":"2e99bd4e-6ed4-55d1-bafa-a8bd9649b2d5","excerpt":"This post is also published on Medium, but was posted here first ðŸ˜„. Whew. A biggunâ€™ Warning: This is gonna be a big post, with lots ofâ€¦","html":"<p>This post is also published on Medium, but was posted here first ðŸ˜„.</p>\n<h1>Whew. A biggunâ€™</h1>\n<p>Warning: This is gonna be a big post, with lots of thought processes and code snippets. I hope you enjoy!</p>\n<h1>Processing and P5.JS</h1>\n<p>So the source that I started with. I realized I could generate these . Then I started getting frusterated with the Java syntax. Itâ€™s been over 10 years since I coded any real Java, and that was my Junior year in Highschoolâ€¦ so yeah, I was looking for (hopefully) a Javascript possibility. And what do you know, there <em>is</em> a library for processing</p>\n<p>It just so happens that completely by chance, the very cover animation on the home page of my blog, which you may or may not know depending on how often you visit the blog - <em>is</em> a p5.js animation! I didnâ€™t make the connection at first because I originally found that library through <a href=\"https://news.ycombinator.com/item?id=17716542\">this â€˜Show HNâ€™ post showcasing the library back at the end of August, 2018</a>, and that â€˜circles bouncing around in a containerâ€™ example is a pretty generic example which I just lightly refactored for my site.</p>\n<h2>The Math</h2>\n<p>This is lightly discussed directly on the showcase page, but Iâ€™ll go</p>\n<p>A helpful analogy for me was to picture this array of 15 as 15 switches next to eachother, each being switch on or off at random, until you have every possible combination. In simplist terms, this can be realized as a binary list of length 15.</p>\n<p>Iâ€™ll admit, I struggled with this (mainly because I was getting Python thinking it should count each 0 as unique, so I kept getting what I considered â€˜repeatâ€™ entries for example â€˜100000000000000â€™ and â€˜100000000000000â€™ - they of course appear identical to us, but ptyhon was treating those separate 0â€™s as in a different order) Anyway, after lots of Google and Stackoverflow, it turns out that the </p>\n<p>I decided ultimately to use JSON my de facto file format for loading data on the frontend.</p>\n<p>Then, itâ€™s a simple </p>\n<p>as it always seems to be with these fancy data algorithms, 99% of the â€˜magicâ€™ to generate the Invaders happens in a double for loop. In the original Java code, it looks</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  m <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token number\">255</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//black or white?</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">-</span>step<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">With react <span class=\"token keyword\">this</span> is very easy<span class=\"token punctuation\">,</span> we can pass the data down <span class=\"token keyword\">as</span> a prop into each canvas<span class=\"token punctuation\">:</span>\n\n<span class=\"token template-string\"><span class=\"token string\">``</span></span>`javascript</code></pre>\n      </div>\n<h2>The Code</h2>\n<p>As always, hereâ€™s the full code for big posts like these:</p>\n<p>If you have experience with p5.js or Processing, you may find ways to extend what Iâ€™ve built.</p>\n<p>Enjoy!</p>\n<p>Then I said, forget that, I wanna do this in JavaScript. Cuz, cmon, who doesnâ€™t do things in Javascript these days? ðŸ˜‚ (Yes, a bit of sarcasm, but honestlyâ€¦ itâ€™s been fairly true - weâ€™ll see what happens in 2019) Anyway, the REAL reason I wanted to do it in Javascript was to get more practice with </p>","frontmatter":{"title":"Data Challenge! Rendering all 32,767 Invaders!","date":"December 29, 2018","draft":true,"starID":104,"postType":"data"}}},"pageContext":{"slug":"/data-challenge-rendering-all-32767-invaders/","prev":{"fields":{"slug":"/donations/"},"frontmatter":{"date":"26 November, 2018","title":"All Time Blog Donations Flowchart","draft":true,"starID":53,"postType":"blog","link":"https://chrisfrew.in/donations/","relativeLink":"/donations/"}},"next":{"fields":{"slug":"/final-say-bitcoin/"},"frontmatter":{"date":"18 December, 2017","title":"My First and Final Statement on Bitcoin for this Blog","draft":false,"starID":4,"postType":"misc","link":"https://chrisfrew.in/final-say-bitcoin/","relativeLink":"/final-say-bitcoin/"}}}}